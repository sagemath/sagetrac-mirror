## Configuration for tox.
## Needs tox installed in the system python.
##
## doctest:  Run the sage doctests.  From the SAGE_ROOT/src directory:
##
##     $ tox
##
##   Arguments are passed on to "sage -t":
##
##     $ tox sage/geometry
##
##   To pass on options to "sage -t", use -- to separate it from tox options:
##
##     $ tox -- --verbose --optional=sage,pynormaliz --long sage/geometry
##
## pycodestyle:
##
##     $ tox -e pycodestyle
##
##   Note that on the first run, tox automatically installs pycodestyle
##   in a virtual environment.
##
[tox]
envlist = doctest, coverage, startuptime, pycodestyle-minimal, relint, codespell
# When adding environments above, also update the delegations in SAGE_ROOT/tox.ini
skipsdist = true

[sagedirect]
# Base for tox environments that bypass the virtual environment set up by tox,
# calling sage directly.
passenv =
    HOME
setenv =
    SAGE={toxinidir}/../sage
envdir={toxworkdir}/sagedirect

[testenv:doctest]
description =
    run the Sage doctester (same as "sage -t")
## This toxenv bypasses the virtual environment set up by tox.
passenv = {[sagedirect]passenv}
setenv  = {[sagedirect]setenv}
envdir  = {[sagedirect]envdir}
commands =
    {env:SAGE} -t -p 0 {posargs:--all}

[testenv:coverage]
description =
    give information about doctest coverage of files
    (same as "sage --coverage[all]")
## This toxenv bypasses the virtual environment set up by tox.
passenv = {[sagedirect]passenv}
setenv  = {[sagedirect]setenv}
envdir  = {[sagedirect]envdir}
commands =
    {env:SAGE} --coverage {posargs:--all}

[testenv:startuptime]
description =
    display how long each component of Sage takes to start up
    (same as "sage --startuptime")
## This toxenv bypasses the virtual environment set up by tox.
passenv = {[sagedirect]passenv}
setenv  = {[sagedirect]setenv}
envdir  = {[sagedirect]envdir}
commands =
    {env:SAGE} --startuptime {posargs}

[testenv:pyright]
description =
    run the static typing checker pyright
deps = pyright
setenv =
    HOME={envdir}
    # Fix version, see .github/workflows/build.yml
    PYRIGHT_PYTHON_FORCE_VERSION=1.1.232
## We run pyright from within the sage-env so that SAGE_LOCAL is available.
## pyright is already configured via SAGE_ROOT/pyrightconfig.json to use our venv.
##
## Running pyright on the whole Sage source tree takes very long
## and may run out of memory. When no files/directories are given, just run it
## on the packages that already have typing annotations.
commands =
    {toxinidir}/../sage -sh -c 'pyright {posargs:{toxinidir}/sage/combinat {toxinidir}/sage/manifolds}'

[testenv:pycodestyle]
description =
    check against the Python style conventions of PEP8
deps = pycodestyle
commands = pycodestyle {posargs:{toxinidir}/sage/}

[testenv:pycodestyle-minimal]
description =
    check against Sage's minimal style conventions
    # Check for the following issues:
    # E111: indentation is not a multiple of four
    # E401: multiple imports on one line
    # E701: multiple statements on one line (colon)
    # E702: multiple statements on one line (semicolon)
    # E703: statement ends with a semicolon
    # E711: comparison to None should be ‘if cond is None:’
    # E712: comparison to True should be ‘if cond is True:’ or ‘if cond:’
    # E713 test for membership should be 'not in'
    # E721: do not compare types, use isinstance()
    # E722: do not use bare except, specify exception instead
    # W605: invalid escape sequence ‘x’
    # See https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
deps = pycodestyle
commands = pycodestyle --select E111,E401,E701,E702,E703,W605,E711,E712,E713,E721,E722 {posargs:{toxinidir}/sage/}
       pycodestyle --select E111,E401,E703,E712,E713,E721,E722 --filename *.pyx {posargs:{toxinidir}/sage/}

[pycodestyle]
max-line-length = 160
statistics = True

[testenv:relint]
description =
    check whether some forbidden patterns appear
    (includes all patchbot pattern-exclusion plugins)
# https://github.com/codingjoe/relint
# The patterns are in .relint.yml
deps = relint
whitelist_externals = find
commands = find {posargs:{toxinidir}/sage/} \
    -name "*#*" -prune -o \
    -name "*.a" -prune -o \
    -name "*.bak" -prune -o \
    -name "*.bz2" -prune -o \
    -name "*.dia" -prune -o \
    -name "*.gz" -prune -o \
    -name "*.ico" -prune -o \
    -name "*.inv" -prune -o \
    -name "*.JPEG" -prune -o \
    -name "*.jpeg" -prune -o \
    -name "*.JPG" -prune -o \
    -name "*.jpg" -prune -o \
    -name "*.log" -prune -o \
    -name "*.o" -prune -o \
    -name "*.orig" -prune -o \
    -name "*.PDF" -prune -o \
    -name "*.pdf" -prune -o \
    -name "*.PNG" -prune -o \
    -name "*.png" -prune -o \
    -name "*.pyc" -prune -o \
    -name "*.so" -prune -o \
    -name "*.sobj" -prune -o \
    -name "*.sws" -prune -o \
    -name "*.tar" -prune -o \
    -name "*.tgz" -prune -o \
    -name "*.xz" -prune -o \
    -name "*.zip" -prune -o \
    -name "*~*" -prune -o \
    -name ".DS_Store" -prune -o \
    -exec relint -c {toxinidir}/.relint.yml \{\} +

[testenv:codespell]
description =
    check for misspelled words in source code
# https://pypi.org/project/codespell/
deps = codespell
commands = codespell \
    --skip="*#*,*.a,*.bak,*.bz2,*.dia,*.gz,*.ico,*.inv,*.JPEG,*.jpeg" \
    --skip="*.JPG,*.jpg,*.log,*.o,*.orig,*.PDF,*.pdf,*.PNG,*.png,*.pyc" \
    --skip="*.so,*.sobj,*.sws,*.tar,*.tgz,*.xz,*.zip,*~*,.DS_Store" \
    --skip="doc/ca,doc/de,doc/es,doc/fr,doc/hu,doc/it,doc/ja,doc/pt,doc/ru,doc/tr" \
    --skip="src/doc/ca,src/doc/de,src/doc/es,src/doc/fr,src/doc/hu" \
    --skip="src/doc/it,src/doc/ja,src/doc/pt,src/doc/ru,src/doc/tr" \
    --skip=".git,.tox,autom4te.cache,cythonized,dist,lib.*,local" \
    --skip="logs,scripts-3,tmp,upstream,worktree*,*.egg-info" \
    --dictionary=- \
    --dictionary={toxinidir}/.codespell-dictionary.txt \
    --ignore-words={toxinidir}/.codespell-ignore.txt \
    {posargs:{toxinidir}/sage/}

[pytest]
python_files = *_test.py
norecursedirs = local prefix venv build pkgs .git src/doc src/bin
addopts = --import-mode importlib
doctest_optionflags = NORMALIZE_WHITESPACE ELLIPSIS

[coverage:run]
source = sage
concurrency = multiprocessing
data_file = .coverage/.coverage
disable_warnings = no-data-collected
