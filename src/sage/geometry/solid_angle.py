r"""
Solid angle of a polyhedral cone

This module implements the *normalized solid angle measure* of polyhedral
cones. The normalized solid angle measure of a cone is the amount of space
the cone takes up in reference to some given set.

EXAMPLES:

Compute the normalized solid angle measure of the first quadrant::

    sage: from sage.geometry.solid_angle import solid_angle_simplicial_2d
    sage: RDF(solid_angle_simplicial_2d(matrix([[0,1],[1,0]])))
    0.25

AUTHORS:

- Yuan Zhou (2022)

- Allison Fitisone (2022)
"""
# ****************************************************************************
#       Copyright (C) 2022 Yuan Zhou <yuan.zhou@uky.edu>
#       Copyright (C) 2022 Allison Fitisone <allison.fitisone@uky.edu>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#  as published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#                  https://www.gnu.org/licenses/
# ****************************************************************************

from sage.symbolic.constants import pi
from sage.matrix.constructor import matrix
from sage.structure.element import is_Matrix
from sage.functions.trig import arccos
from sage.modules.free_module_element import vector
from sage.calculus.var import var
from sage.symbolic.relation import solve
from sage.symbolic.subring import SymbolicSubring
from sage.rings.integer_ring import ZZ
from sage.rings.rational_field import QQ
from sage.geometry.polyhedron.constructor import Polyhedron
import logging


def solid_angle_simplicial_2d(A):
    r"""
    Return the normalized solid angle measure of the cone generated by the
    row vector(s) of ``A``, which is determined by the arccos of the dot
    product of two vectors.

    INPUT:

    - ``A`` -- 2x2 matrix in the form of ``matrix([[a, b], [c, d]])`` or
      simply ``[[a, b], [c, d]]`` where the nonzero linearly independent
      rows of ``A`` generate the cone in `\RR^2`

    OUTPUT:

    - the normalized solid angle measure of the cone generated by the
      vectors. The output is in the Symbolic Constants Subring if the base ring
      of the input ``A`` is exact, and has the same parent as ``A`` otherwise.

    EXAMPLES:

    This example shows the normalized measure of the solid angle spanned
    by the rows of the matrix::

        sage: from sage.geometry.solid_angle import solid_angle_simplicial_2d
        sage: solid_angle_simplicial_2d(matrix([[0, 1], [1, 0]]))
        1/4

    The input can be a list of vectors instead of a matrix as well::

        sage: solid_angle_simplicial_2d([[1, 0], [-1, sqrt(3)]])
        1/3

        sage: solid_angle_simplicial_2d([[1.0, 0.0], [0.0, 1.0]])
        0.250000000000000

        sage: RDF(solid_angle_simplicial_2d([[2, 13], [-1, 7]]))  # abs tol 1e-15
        0.04687851282419763

    This example illustrates how the solid angle measure will not be
    greater than 0.5 as the function always outputs the minimal angle
    between the two rays::

        sage: solid_angle_simplicial_2d([[1.0, 0.0], [-1.0, -1.0]])
        0.375000000000000

    TESTS:

    The following tests check for corner cases where the vectors are
    antiparallel, parallel and perpendicular, respectively::

        sage: solid_angle_simplicial_2d([[1, 1], [-1, -1]])
        0

        sage: solid_angle_simplicial_2d([[1, 2], [2, 4]])
        0

        sage: solid_angle_simplicial_2d([[1, 1], [-1, 1]])
        1/4

    The following tests check the assumptions of the input::

        sage: solid_angle_simplicial_2d([[-3, 2]])
        Traceback (most recent call last):
        ...
        ValueError: input matrix has incorrect dimension

        sage: solid_angle_simplicial_2d([[1, 4], [0, 0]])
        Traceback (most recent call last):
        ...
        ValueError: input matrix has a row that is zero

    In the following examples, we check the parent of the output only depends
    on the parent of the input, but not the value of the input::

        sage: A = matrix([[1, 0], [-1, -1]])
        sage: solid_angle_simplicial_2d(A).simplify()
        3/8
        sage: B = matrix([[1, 0], [-1, 0]])
        sage: solid_angle_simplicial_2d(B)
        0
        sage: [solid_angle_simplicial_2d(matrix(ZZ, M)).parent() for M in [A, B]]
        [Symbolic Constants Subring, Symbolic Constants Subring]
        sage: [solid_angle_simplicial_2d(matrix(QQ, M)).parent() for M in [A, B]]
        [Symbolic Constants Subring, Symbolic Constants Subring]
        sage: [solid_angle_simplicial_2d(matrix(AA, M)).parent() for M in [A, B]]
        [Symbolic Constants Subring, Symbolic Constants Subring]
        sage: [solid_angle_simplicial_2d(matrix(SR, M)).parent() for M in [A, B]]
        [Symbolic Ring, Symbolic Ring]
        sage: [solid_angle_simplicial_2d(matrix(RR, M)).parent() for M in [A, B]]
        [Real Field with 53 bits of precision, Real Field with 53 bits of precision]
        sage: [solid_angle_simplicial_2d(matrix(RDF, M)).parent() for M in [A, B]]
        [Real Double Field, Real Double Field]
        sage: [solid_angle_simplicial_2d(matrix(RBF, M)).parent() for M in [A, B]]
        [Real ball field with 53 bits of precision, Real ball field with 53 bits of precision]
    """
    if not is_Matrix(A):
        A = matrix(A)
    P = A.base_ring()
    if A.nrows() != 2 or A.ncols() != 2:
        raise ValueError("input matrix has incorrect dimension")
    if any(r == 0 for r in A.rows()):
        raise ValueError("input matrix has a row that is zero")
    if A.rank() < 2:
        if P.is_exact():
            return SymbolicSubring(no_variables=True)(0)
        else:
            return P.zero()
    u = A.row(0)
    v = A.row(1)
    p = u.dot_product(v)
    a = u.norm()
    b = v.norm()
    cs = p/(a*b)
    final_calc = arccos(cs) / (2*pi)
    if P.is_exact():
        return SymbolicSubring(no_variables=True)(final_calc)
    else:
        return P(final_calc)


def solid_angle_2d(A):
    r"""
    Return the normalized solid angle measure of the cone spanned by
    vectors in `\RR^2`.

    INPUT:

    - ``A`` -- `n\times 2` matrix whose rows vectors span the cone in `\RR^2`
      of which we look for the solid angle. The input can be in the form of a
      matrix or as a list of vectors in `\RR^2`.

    OUTPUT: The normalized solid angle measure spanned by the row vectors

    EXAMPLES:

    The following three examples show the solid angle measures of non-pointed
    cones in `\RR^2` corresponding to a line, half-space, and the whole space
    respectively ::

        sage: from sage.geometry.solid_angle import solid_angle_2d
        sage: A = matrix([[2,3],[-2,-3]])
        sage: solid_angle_2d(A)
        0

        sage: A = matrix([[1,0],[0,1],[-1,0]])
        sage: solid_angle_2d(A)
        1/2

        sage: A = matrix(RR, [[1,0],[-1,1],[0,-4.5]])
        sage: solid_angle_2d(A)
        1.00000000000000

    In the following example, we consider the solid angle measure of the first
    quadrant given a minimum description, as well as when one is not provided::

        sage: A = matrix([[1,0],[0,1]])
        sage: solid_angle_2d(A)
        1/4

        sage: A = matrix([[1,0],[1,1],[0,1]])
        sage: solid_angle_2d(A)
        1/4


    In the following examples, we consider pointed/simplicial two-dimensional
    cones::

        sage: A = matrix([[1,0],[0,1],[-1,1]])
        sage: solid_angle_2d(A)
        1/2*arccos(-1/2*sqrt(2))/pi

        sage: A = matrix([[1,1],[0,1],[-1,1],[-2,1]])
        sage: solid_angle_2d(A)
        1/2*arccos(-1/10*sqrt(5)*sqrt(2))/pi

    The following examples illustrate how the solid angle measure can equal
    `1`. That is, the span of the rays is all of space.::

        sage: A = matrix([[0.2,0.2],[0,-1],[-1,-1],[-3,0]])
        sage: solid_angle_2d(A)
        1.00000000000000

        sage: A = matrix([[3,0],[-2,-1/5],[-1,14.7]])
        sage: solid_angle_2d(A)
        1.00000000000000

    Check examples where the where cones have affine dimension less than `2`::

        sage: A = matrix([[1,0],[2,0]])
        sage: solid_angle_2d(A)
        0
        sage: A = matrix([[1,2],[-2,-4]])
        sage: solid_angle_2d(A)
        0
        sage: A = matrix([[-2,5],[-4,10],[-1,5/2],[-2/5,1]])
        sage: solid_angle_2d(A)
        0
    """
    if not is_Matrix(A):
        A = matrix(A)
    B = A.base_ring()
    if A.rank() < 2:
        if B.is_exact():
            return SymbolicSubring(no_variables=True)(0)
        else:
            return B.zero()
    P = Polyhedron(rays=A.rows())  # does not allow for computations over SR
    if P.lines():
        if P.is_universe():
            if B.is_exact():
                return SymbolicSubring(no_variables=True)(1)
            else:
                return B.one()
        else:
            if B.is_exact():
                return SymbolicSubring(no_variables=True)(QQ(1/2))
            else:
                return B.one()/2
    else:
        return solid_angle_simplicial_2d(matrix(B, P.rays_list()))
