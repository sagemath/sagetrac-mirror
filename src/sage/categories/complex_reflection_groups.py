r"""
Finite complex reflection groups
"""
#*****************************************************************************
#  Copyright (C) 2015    Christian Stump <christian.stump at lacim.ca>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#******************************************************************************

from sage.misc.abstract_method import abstract_method
from sage.misc.all import prod
from sage.misc.cachefunc import cached_method
from sage.categories.category_singleton import Category_singleton
from sage.categories.category_with_axiom import CategoryWithAxiom, axiom
from sage.categories.groups import Groups

class ComplexReflectionGroups(Category_singleton):
    r"""
    The category of finite dimensional complex reflection groups.

    This is the base category for subgroups of the special linear
    group which are generated by reflections.

    A *reflection group* is a group `W` generated by (complex)
    reflections `t \in \operatorname{O}(V)` acting on a complex vector
    space `V` such that `t` fixes a hyperplane pointwise and acts by a
    root of unity on its orthogonal complement.

    The (finite) dimension of `V` is the *rank* of `W`.

    For a comprehensive treatment of complex reflection groups and
    many definitions and theorems used here, we refer to [LT2009]_.
    See also :wikipedia:`Reflection_group`.

    .. SEEALSO::

        :func:`ReflectionGroup` for usage examples of this category.

    REFERENCES:

    .. [LT2009] G.I.~Lehrer and D.E.~Taylor. Unitary reflection groups. Australian Mathematical Society Lecture Series, 2009.

    EXAMPLES::

        sage: ComplexReflectionGroups()
        Category of complex reflection groups
        sage: ComplexReflectionGroups().super_categories()
        [Category of groups]
        sage: ComplexReflectionGroups().all_super_categories()
        [Category of complex reflection groups,
         Category of groups,
         Category of monoids,
         Category of semigroups,
         Category of inverse unital magmas,
         Category of unital magmas,
         Category of magmas,
         Category of sets,
         Category of sets with partial maps,
         Category of objects]

    An example of a reflection group::

        sage: W = ComplexReflectionGroups().example(); W
        Irreducible complex reflection group of rank 3 and type G(3,1,3)

    ``W`` is in the category of complex reflection groups::

        sage: W in ComplexReflectionGroups()
        True

    TESTS::

        sage: TestSuite(W).run()
        sage: TestSuite(ComplexReflectionGroups()).run()
    """

    @cached_method
    def super_categories(self):
        r"""
        Return the super categories of ``self``.

        EXAMPLES::

            sage: ComplexReflectionGroups().super_categories()
            [Category of groups]
        """
        return [Groups()]

    class SubcategoryMethods:
        Finite = axiom("Finite")
        Irreducible = axiom("Irreducible")
        WellGenerated = axiom("WellGenerated")

    def example(self):
        r"""
        Return an example of a complex reflection group.

        EXAMPLES::

            sage: ComplexReflectionGroups().example()
            Irreducible complex reflection group of rank 3 and type G(3,1,3)
        """
        from sage.combinat.root_system.reflection_group_real import ReflectionGroup
        return ReflectionGroup((3,1,3))

    class ParentMethods:

        @abstract_method
        def index_set(self):
            r"""
            Return the index set of the simple reflections of ``self``.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4))
                sage: W.index_set()
                [0, 1, 2]
                sage: W = ReflectionGroup((1,1,4),index_set=[1,3,'asdf'])
                sage: W.index_set()
                [1, 3, 'asdf']
                sage: W = ReflectionGroup((1,1,4),index_set={'a':0,'b':1,'c':2})
                sage: W.index_set()
                ['a', 'b', 'c']
            """

        def simple_reflection(self, i):
            r"""
            Return the `i`-th simple reflection of ``self``.

            For `i` in `1,\dots,n`, this gives the `i`-th simple reflection of ``self``.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4),index_set=[1,3,'asdf'])
                sage: for i in W.index_set():
                ....:     print i, W.simple_reflection(i)
                1 (1,7)(2,4)(5,6)(8,10)(11,12)
                3 (1,4)(2,8)(3,5)(7,10)(9,11)
                asdf (2,5)(3,9)(4,6)(8,11)(10,12)
            """
            return self.one().apply_simple_reflection(i)

        @abstract_method(optional=True)
        def hyperplane_index_set(self):
            r"""
            Return the index set of the reflection hyperplanes of ``self``.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4))
                sage: W.hyperplane_index_set()
                [0, 1, 2, 3, 4, 5]
                sage: W = ReflectionGroup((1,1,4),hyperplane_index_set=[1,3,'asdf',7,9,11])
                sage: W.hyperplane_index_set()
                [1, 3, 'asdf', 7, 9, 11]
                sage: W = ReflectionGroup((1,1,4),hyperplane_index_set={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5})
                sage: W.hyperplane_index_set()
                ['a', 'b', 'c', 'd', 'e', 'f']
            """

        @abstract_method(optional=True)
        def distinguished_reflection(self, i):
            r"""
            Return the `i`-th distinguished reflection of ``self``.

            For `i` in `1,\dots,N^*`, this gives the `i`-th distinguished reflection of ``self``.
            For a definition of destinguished reflections, see :meth:`distinguished_reflections`.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4),hyperplane_index_set={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5})
                sage: for i in W.hyperplane_index_set(): print i, W.distinguished_reflection(i)
                a (1,7)(2,4)(5,6)(8,10)(11,12)
                b (1,4)(2,8)(3,5)(7,10)(9,11)
                c (2,5)(3,9)(4,6)(8,11)(10,12)
                d (1,8)(2,7)(3,6)(4,10)(9,12)
                e (1,6)(2,9)(3,8)(5,11)(7,12)
                f (1,11)(3,10)(4,9)(5,7)(6,12)
            """

        @abstract_method(optional=True)
        def reflection_index_set(self):
            r"""
            Return the index set of the reflections of ``self``.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4))
                sage: W.reflection_index_set()
                [0, 1, 2, 3, 4, 5]
                sage: W = ReflectionGroup((1,1,4),reflection_index_set=[1,3,'asdf',7,9,11])
                sage: W.reflection_index_set()
                [1, 3, 'asdf', 7, 9, 11]
                sage: W = ReflectionGroup((1,1,4),reflection_index_set={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5})
                sage: W.reflection_index_set()
                ['a', 'b', 'c', 'd', 'e', 'f']
            """

        @abstract_method(optional=True)
        def reflection(self, i):
            r"""
            Return the `i`-th reflection of ``self``.

            For `i` in `1,\dots,N`, this gives the `i`-th reflection of ``self``.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4))
                sage: for i in W.reflection_index_set():
                ....:     print i, W.reflection(i)
                0 (1,7)(2,4)(5,6)(8,10)(11,12)
                1 (1,4)(2,8)(3,5)(7,10)(9,11)
                2 (2,5)(3,9)(4,6)(8,11)(10,12)
                3 (1,8)(2,7)(3,6)(4,10)(9,12)
                4 (1,6)(2,9)(3,8)(5,11)(7,12)
                5 (1,11)(3,10)(4,9)(5,7)(6,12)
            """

        @cached_method
        def simple_reflections(self):
            r"""
            Return the simple reflections of ``self`` as a family
            indexed by :meth:`index_set`.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3))
                sage: W.simple_reflections()
                Finite family {0: (1,4)(2,3)(5,6), 1: (1,3)(2,5)(4,6)}

                sage: W = ReflectionGroup((1,1,3),index_set=['a','b'])
                sage: W.simple_reflections()
                Finite family {'a': (1,4)(2,3)(5,6), 'b': (1,3)(2,5)(4,6)}
            """
            from sage.sets.family import Family
            return Family(self.index_set(), self.simple_reflection)

        @cached_method
        def distinguished_reflections(self):
            r"""
            Return a finite family containing the distinguished
            reflections of ``self``, indexed by
            :meth:`hyperplane_index_set`.

            These are the reflections in ``self`` acting on the complement
            of the fixed hyperplane `H` as `\operatorname{exp}(2 \pi i / n)`, where `n`
            is the order of the reflection subgroup fixing `H`.

           EXAMPLES::

                sage: W = ReflectionGroup((1,1,3))
                sage: distinguished_reflections = W.distinguished_reflections()
                sage: for index in sorted(distinguished_reflections.keys()): print index, distinguished_reflections[index]
                0 (1,4)(2,3)(5,6)
                1 (1,3)(2,5)(4,6)
                2 (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((1,1,3),hyperplane_index_set=['a','b','c'])
                sage: distinguished_reflections = W.distinguished_reflections()
                sage: for index in sorted(distinguished_reflections.keys()): print index, distinguished_reflections[index]
                a (1,4)(2,3)(5,6)
                b (1,3)(2,5)(4,6)
                c (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((3,1,1))
                sage: distinguished_reflections = W.distinguished_reflections()
                sage: for index in sorted(distinguished_reflections.keys()): print index, distinguished_reflections[index]
                0 (1,2,3)

                sage: W = ReflectionGroup((1,1,3),(3,1,2))
                sage: distinguished_reflections = W.distinguished_reflections()
                sage: for index in sorted(distinguished_reflections.keys()): print index, distinguished_reflections[index]
                0 (1,6)(2,5)(7,8)
                1 (1,5)(2,7)(6,8)
                2 (3,9,15)(4,10,16)(12,17,23)(14,18,24)(20,25,29)(21,22,26)(27,28,30)
                3 (3,11)(4,12)(9,13)(10,14)(15,19)(16,20)(17,21)(18,22)(23,27)(24,28)(25,26)(29,30)
                4 (1,7)(2,6)(5,8)
                5 (3,19)(4,25)(9,11)(10,17)(12,28)(13,15)(14,30)(16,18)(20,27)(21,29)(22,23)(24,26)
                6 (4,21,27)(10,22,28)(11,13,19)(12,14,20)(16,26,30)(17,18,25)(23,24,29)
                7 (3,13)(4,24)(9,19)(10,29)(11,15)(12,26)(14,21)(16,23)(17,30)(18,27)(20,22)(25,28)
            """
            from sage.sets.family import Family
            return Family(self.hyperplane_index_set(), self.distinguished_reflection)

        @cached_method
        def reflections(self):
            r"""
            Return a finite family containing the reflections of ``self``,
            indexed by :meth:`reflection_index_set`.

           EXAMPLES::

                sage: W = ReflectionGroup((1,1,3))
                sage: reflections = W.reflections()
                sage: for index in sorted(reflections.keys()): print index, reflections[index]
                0 (1,4)(2,3)(5,6)
                1 (1,3)(2,5)(4,6)
                2 (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((1,1,3),reflection_index_set=['a','b','c'])
                sage: reflections = W.reflections()
                sage: for index in sorted(reflections.keys()): print index, reflections[index]
                a (1,4)(2,3)(5,6)
                b (1,3)(2,5)(4,6)
                c (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((3,1,1))
                sage: reflections = W.reflections()
                sage: for index in sorted(reflections.keys()): print index, reflections[index]
                0 (1,2,3)
                1 (1,3,2)

                sage: W = ReflectionGroup((1,1,3),(3,1,2))
                sage: reflections = W.reflections()
                sage: for index in sorted(reflections.keys()): print index, reflections[index]
                0 (1,6)(2,5)(7,8)
                1 (1,5)(2,7)(6,8)
                2 (3,9,15)(4,10,16)(12,17,23)(14,18,24)(20,25,29)(21,22,26)(27,28,30)
                3 (3,11)(4,12)(9,13)(10,14)(15,19)(16,20)(17,21)(18,22)(23,27)(24,28)(25,26)(29,30)
                4 (1,7)(2,6)(5,8)
                5 (3,19)(4,25)(9,11)(10,17)(12,28)(13,15)(14,30)(16,18)(20,27)(21,29)(22,23)(24,26)
                6 (4,21,27)(10,22,28)(11,13,19)(12,14,20)(16,26,30)(17,18,25)(23,24,29)
                7 (3,13)(4,24)(9,19)(10,29)(11,15)(12,26)(14,21)(16,23)(17,30)(18,27)(20,22)(25,28)
                8 (3,15,9)(4,16,10)(12,23,17)(14,24,18)(20,29,25)(21,26,22)(27,30,28)
                9 (4,27,21)(10,28,22)(11,19,13)(12,20,14)(16,30,26)(17,25,18)(23,29,24)
            """
            from sage.sets.family import Family
            return Family(self.reflection_index_set(), self.reflection)

        @abstract_method(optional=True)
        def irreducible_components(self):
            r"""
            Return a list containing all irreducible components of
            ``self`` as finite reflection groups.

            EXAMPLES::

                sage: W = ReflectionGroup([1,1,3],[3,1,3],4)
                sage: W.irreducible_components()
                [Irreducible real reflection group of rank 2 and type A2,
                 Irreducible complex reflection group of rank 3 and type G(3,1,3),
                 Irreducible complex reflection group of rank 2 and type ST4]
            """

        def an_element(self):
            r"""
            Return the product of the simple reflections of ``self``.

            EXAMPLES::

                sage: W = ComplexReflectionGroups().example()
                sage: W
                Irreducible complex reflection group of rank 3 and type G(3,1,3)
                sage: W.an_element() # random
                (1,3)(2,5)(4,6)
            """
            return self.prod(self.reflection(i) for i in self.index_set())

        an_element_force = an_element

        def some_elements(self):
            r"""
            Return a list of typical elements of ``self``.

            Implements :meth:`Sets.ParentMethods.some_elements` by
            returning some typical element of ``self``.

            EXAMPLES::

                sage: W=ReflectionGroup((1,1,4))
                sage: W.some_elements()
                [(1,7)(2,4)(5,6)(8,10)(11,12), (1,4)(2,8)(3,5)(7,10)(9,11), (2,5)(3,9)(4,6)(8,11)(10,12), (), (1,7)(2,4)(5,6)(8,10)(11,12)]
                sage: W.order()    
                24
            """
            return [self.simple_reflection(i) for i in self.index_set() ] + [ self.one(), self.an_element_force() ]

        def from_word(self, word, word_type='simple'):
            r"""
            Return the reflection group element corresponding to
            ``word``.

            INPUT:

            - ``word`` - a list (or iterable) of elements of the
              appropriate index set

            - ``word_type`` (optional, default: 'simple') can be
              'simple', 'distinguished', or 'all', depending on the type
              of reflections used.
  
            If ``word`` is `[i_1,i_2,\ldots,i_k]`, then this returns the
            corresponding product of (simple/distinguished/all)
            reflections `t_{i_1} t_{i_2} \cdots t_{i_k}`.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4)); W
                Irreducible complex reflection group of rank 3 and type A3
                sage: W.from_word([0,1,0,1,0,1])
                ()

                sage: W.from_word([0,1,2]).reduced_word()
                word: 012

                sage: W.from_word([0,1,2], word_type='all').reduced_word()
                word: 012

                sage: W.from_word([0,1,2], word_type='all').reduced_word_in_reflections()
                word: 012

                sage: W.from_word([0,1,2]).reduced_word_in_reflections()
                word: 012
            """
            if word_type == 'simple':
                f = self.one().apply_simple_reflections
            elif word_type == 'distinguished':
                f = self.one().apply_distinguished_reflections
            elif word_type == 'all':
                f = self.one().apply_reflections
            return f(word, side = 'right')

        def group_generators(self):
            r"""
            Return the simple reflections of ``self``.

            Implements :meth:`Groups.ParentMethods.group_generators`.

            EXAMPLES::

                sage: W = ReflectionGroup([3,1,2])
                sage: for gen in W.group_generators():
                ....:     print gen
                (1,3,9)(2,4,10)(6,11,17)(8,12,18)(14,19,23)(15,16,20)(21,22,24)
                (1,5)(2,6)(3,7)(4,8)(9,13)(10,14)(11,15)(12,16)(17,21)(18,22)(19,20)(23,24)
            """
            return sorted(self.simple_reflections())

        semigroup_generators = group_generators

    class ElementMethods:

        # at least one of the two methods must be reimplemented
        # it is recommended to reimplement both, as computing
        # the inverse might not be very efficient...

        def apply_simple_reflection_left(self, i):
            """
            Return ``self`` multiplied by the simple reflection ``s[i]``
            on the left.

            This low level method is used intensively. Coxeter groups
            are encouraged to override this straightforward
            implementation whenever a faster approach exists.

            EXAMPLES::

                sage: W=CoxeterGroups().example()
                sage: w = W.an_element(); w
                (1, 2, 3, 0)
                sage: w.apply_simple_reflection_left(0)
                (0, 2, 3, 1)
                sage: w.apply_simple_reflection_left(1)
                (2, 1, 3, 0)
                sage: w.apply_simple_reflection_left(2)
                (1, 3, 2, 0)

            TESTS::

                sage: w.apply_simple_reflection_left.__module__
                'sage.categories.coxeter_groups'
            """
            s = self.parent().simple_reflections()
            return s[i] * self

        def apply_simple_reflection_right(self, i):
            """
            Return ``self`` multiplied by the simple reflection ``s[i]``
            on the right.

            This low level method is used intensively. Coxeter groups
            are encouraged to override this straightforward
            implementation whenever a faster approach exists.

            EXAMPLES::

                sage: W=CoxeterGroups().example()
                sage: w = W.an_element(); w
                (1, 2, 3, 0)
                sage: w.apply_simple_reflection_right(0)
                (2, 1, 3, 0)
                sage: w.apply_simple_reflection_right(1)
                (1, 3, 2, 0)
                sage: w.apply_simple_reflection_right(2)
                (1, 2, 0, 3)

            TESTS::

                sage: w.apply_simple_reflection_right.__module__
                'sage.categories.coxeter_groups'
            """
            s = self.parent().simple_reflections()
            return self * s[i]

        def apply_simple_reflection(self, i, side = 'right'):
            """
            Return ``self`` multiplied by the simple reflection ``s[i]``.

            INPUT:

            - ``i`` -- an element of the index set
            - ``side`` -- "left" or "right" (default: "right")

            This default implementation simply calls
            :meth:`apply_simple_reflection_left` or
            :meth:`apply_simple_reflection_right`.

            EXAMPLES::

                sage: W=CoxeterGroups().example()
                sage: w = W.an_element(); w
                (1, 2, 3, 0)
                sage: w.apply_simple_reflection(0, side = "left")
                (0, 2, 3, 1)
                sage: w.apply_simple_reflection(1, side = "left")
                (2, 1, 3, 0)
                sage: w.apply_simple_reflection(2, side = "left")
                (1, 3, 2, 0)

                sage: w.apply_simple_reflection(0, side = "right")
                (2, 1, 3, 0)
                sage: w.apply_simple_reflection(1, side = "right")
                (1, 3, 2, 0)
                sage: w.apply_simple_reflection(2, side = "right")
                (1, 2, 0, 3)

            By default, ``side`` is "right"::

                sage: w.apply_simple_reflection(0)
                (2, 1, 3, 0)

            TESTS::

                sage: w.apply_simple_reflection_right.__module__
                'sage.categories.coxeter_groups'
            """
            if side == 'right':
                return self.apply_simple_reflection_right(i)
            else:
                return self.apply_simple_reflection_left(i)

        @abstract_method(optional=True)
        def reflection_length(self):
            r"""
            Return the reflection length of ``self``.

            This is the minimal length of a factorization of ``self``
            into reflections.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,2))
                sage: sorted([ t.reflection_length() for t in W ])
                [0, 1]

                sage: W = ReflectionGroup((2,1,2))
                sage: sorted([ t.reflection_length() for t in W ])
                [0, 1, 1, 1, 1, 2, 2, 2]

                sage: W = ReflectionGroup((3,1,2))
                sage: sorted([ t.reflection_length() for t in W ])
                [0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

                sage: W = ReflectionGroup((2,2,2))
                sage: sorted([ t.reflection_length() for t in W ])
                [0, 1, 1, 2]
            """

        def is_reflection(self):
            r"""
            Return ``True`` if ``self`` is a reflection.

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,4)); W
                Irreducible complex reflection group of rank 3 and type A3
                sage: [ t.is_reflection() for t in W.reflections() ]
                [True, True, True, True, True, True]
                sage: len( [ t for t in W.reflections() if t.is_reflection() ] )
                6

                sage: W = ReflectionGroup((2,1,3)); W
                Irreducible complex reflection group of rank 3 and type B3
                sage: [ t.is_reflection() for t in W.reflections() ]
                [True, True, True, True, True, True, True, True, True]
                sage: len( [t for t in W.reflections() if t.is_reflection() ] )
                9
            """
            return self.reflection_length() == 1

        def apply_simple_reflections(self, word, side = 'right'):
            r"""
            Return the result of the (left/right) multiplication of   
            ``word`` to ``self``.

            INPUT:

             - ``word`` -- A sequence of indices of reflections
             - ``side`` -- (defaut:'right') Indicates multiplying from left or right

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3)); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_simple_reflections([0])
                (1,4)(2,3)(5,6)
                sage: W.one().apply_simple_reflections([1])
                (1,3)(2,5)(4,6)
                sage: W.one().apply_simple_reflections([1,0])
                (1,2,6)(3,4,5)
                sage: W.one().apply_simple_reflections([0,1])
                (1,6,2)(3,5,4)
                sage: W.one().apply_simple_reflections([0,1,0])
                (1,5)(2,4)(3,6)
                sage: W.one().apply_simple_reflections([0,1,0,1])
                (1,2,6)(3,4,5)
                sage: W.one().apply_simple_reflections([0,1,0,1,0])
                (1,3)(2,5)(4,6)
                sage: W.one().apply_simple_reflections([0,1,0,1,0,1])
                ()
            """
            for i in word:
                self = self.apply_simple_reflection(i, side=side)
            return self

        def apply_distinguished_reflection(self, i, side = 'right'):
            r"""
            Return the result of the (left/right) multiplication of   
            the ``i`` -th distingiushed reflection to ``self``.

            INPUT:

             - ``i`` -- An index of a distinguished reflection
             - ``side`` -- (defaut:'right') Multiplying from left/right

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3)); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_distinguished_reflection(0)
                (1,4)(2,3)(5,6)
                sage: W.one().apply_distinguished_reflection(1)
                (1,3)(2,5)(4,6)
                sage: W.one().apply_distinguished_reflection(2)
                (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((1,1,3),hyperplane_index_set=['A','B','C']); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_distinguished_reflection('A')
                (1,4)(2,3)(5,6)
                sage: W.one().apply_distinguished_reflection('B')
                (1,3)(2,5)(4,6)
                sage: W.one().apply_distinguished_reflection('C')
                (1,5)(2,4)(3,6)
            """
            G = self.parent()
            if not i in G.hyperplane_index_set():
                raise ValueError("The given index %s is not an index of a hyperplane"%i)
            if side == 'right':
                return self * G.distinguished_reflection(i)
            else:
                return self.parent().reflection(i) * self

        def apply_distinguished_reflections(self, word, side = 'right'):
            r"""
            Return the result of the (left/right) multiplication of the
            distinguished reflections indexed by the elements in
            ``word`` to ``self``.

            INPUT:

             - ``word`` -- Iterable of distinguished reflections indices
             - ``side`` -- (defaut:'right') Multiplying from left/right

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3)); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_distinguished_reflections([0])
                (1,4)(2,3)(5,6)
                sage: W.one().apply_distinguished_reflections([1])
                (1,3)(2,5)(4,6)
                sage: W.one().apply_distinguished_reflections([1,0])
                (1,2,6)(3,4,5)
            """
            for i in word:
                self = self.apply_distinguished_reflection(i, side=side)
            return self

        def apply_reflection(self, i, side = 'right'):
            r"""
            Return the result of the (left/right) multiplication of   
            the ``i`` -th reflection to ``self``.

            INPUT:

             - ``i`` -- An index of a reflection
             - ``side`` -- (defaut:'right') Multiplying from left/right

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3)); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_reflection(0)
                (1,4)(2,3)(5,6)
                sage: W.one().apply_reflection(1)
                (1,3)(2,5)(4,6)
                sage: W.one().apply_reflection(2)
                (1,5)(2,4)(3,6)

                sage: W = ReflectionGroup((1,1,3),reflection_index_set=['A','B','C']); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_reflection('A')
                (1,4)(2,3)(5,6)
                sage: W.one().apply_reflection('B')
                (1,3)(2,5)(4,6)
                sage: W.one().apply_reflection('C')
                (1,5)(2,4)(3,6)
            """
            W = self.parent()
            if i not in W.reflection_index_set():
                raise ValueError("The given index %s is not an index of a reflection"%i)
            if side == 'right':
                return self * W.reflection(i)
            else:
                return W.reflection(i) * self

        def apply_reflections(self, word, side = 'right'):
            r"""
            Return the result of the (left/right) multiplication of the
            reflections indexed by the elements in ``word`` to ``self``.

            INPUT:

             - ``word`` -- Iterable of reflections indices
             - ``side`` -- (defaut:'right') Multiplying from left/right

            EXAMPLES::

                sage: W = ReflectionGroup((1,1,3)); W
                Irreducible complex reflection group of rank 2 and type A2
                sage: W.one().apply_reflections([0])
                (1,4)(2,3)(5,6)
                sage: W.one().apply_reflections([1])
                (1,3)(2,5)(4,6)
                sage: W.one().apply_reflections([1,0])
                (1,2,6)(3,4,5)
            """
            for i in word:
                self = self.apply_reflection(i, side=side)
            return self

    class Finite(CategoryWithAxiom):
        r"""
        The category of finite complex reflection groups.

        This is the base category for finite subgroups of the special
        linear group which are generated by reflections.

        EXAMPLES::

            sage: ComplexReflectionGroups().Finite()
            Category of finite complex reflection groups
            sage: ComplexReflectionGroups().Finite().super_categories()
            [Category of finite groups, Category of complex reflection groups]
            sage: ComplexReflectionGroups().Finite().all_super_categories()
            [Category of finite complex reflection groups,
             Category of finite groups,
             Category of finite monoids,
             Category of complex reflection groups,
             Category of groups,
             Category of monoids,
             Category of finite semigroups,
             Category of semigroups,
             Category of inverse unital magmas,
             Category of unital magmas,
             Category of magmas,
             Category of finite sets,
             Category of sets,
             Category of sets with partial maps,
             Category of objects]

        An example of a finite reflection group::

            sage: W = ComplexReflectionGroups().Finite().example(); W
            Reducible complex reflection group of rank 4 and type A2 x B2

            sage: W.reflections()
            Finite family {0: (1,8)(2,5)(9,12), 1: (1,5)(2,9)(8,12), 2: (3,10)(4,7)(11,14), 3: (3,6)(4,11)(10,13), 4: (1,9)(2,8)(5,12), 5: (4,14)(6,13)(7,11), 6: (3,13)(6,10)(7,14)}

        ``W`` is in the category of complex reflection groups::

            sage: W in ComplexReflectionGroups().Finite()
            True
        """
        def example(self):
            r"""
            Return an example of a complex reflection group.

            EXAMPLES::

                sage: ComplexReflectionGroups().Finite().example()
                Reducible complex reflection group of rank 4 and type A2 x B2
            """
            from sage.combinat.root_system.reflection_group_real import ReflectionGroup
            return ReflectionGroup((1,1,3),(2,1,2))

        class ParentMethods:

            def is_finite(self):
                r"""
                Return ``True`` since ``self`` is finite.

                EXAMPLES::

                    sage: C = ComplexReflectionGroups().Finite().example()
                    sage: C.is_finite()
                    True
                """
                return True

            @abstract_method(optional=True)
            def degrees(self):
                r"""
                Return the degrees of ``self``, as a list in increasing
                order.

                EXAMPLES::

                    sage: W = ReflectionGroup([1,1,4])
                    sage: W.degrees()
                    [2, 3, 4]

                    sage: W = ReflectionGroup([3,1,3])
                    sage: W.degrees()
                    [3, 6, 9]

                    sage: W = ReflectionGroup(31)
                    sage: W.degrees()
                    [8, 12, 20, 24]
                """

            @abstract_method(optional=True)
            def codegrees(self):
                r"""
                Return the codegrees of ``self``, as a list.

                .. TODO::

                    This should be in decreasing order.

                EXAMPLES::

                    sage: W = ReflectionGroup([1,1,4])
                    sage: W.codegrees()
                    [0, 1, 2]

                    sage: W = ReflectionGroup([3,1,3])
                    sage: W.codegrees()
                    [0, 3, 6]

                    sage: W = ReflectionGroup(31)
                    sage: W.codegrees()
                    [0, 12, 16, 28]
                """

            def nr_simple_reflections(self):
                r"""
                Return the number of reflections simple of ``self``.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.nr_simple_reflections()
                    2
                    sage: W = ReflectionGroup((2,1,3))
                    sage: W.nr_simple_reflections()
                    3
                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.nr_simple_reflections()
                    3
                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.nr_simple_reflections()
                    4
                """
                return len(self.simple_reflections())

            def nr_reflecting_hyperplanes(self):
                r"""
                Return the number of reflecting hyperplanes of ``self``.

                It is given by the sum of the codegrees of self plus its
                rank.

                For real groups, this coincides with the number of
                reflections.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.nr_reflecting_hyperplanes()
                    3
                    sage: W = ReflectionGroup((2,1,3))
                    sage: W.nr_reflecting_hyperplanes()
                    9
                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.nr_reflecting_hyperplanes()
                    15
                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.nr_reflecting_hyperplanes()
                    15
                """
                return sum(self.codegrees())+self.rank()

            def nr_reflections(self):
                r"""
                Return the number of reflections of ``self``.

                It is given by the sum of the degrees of self minus its
                rank.

                For real groups, this coincides with the number of
                reflecting hyperplanes.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.nr_reflections()
                    3
                    sage: W = ReflectionGroup((2,1,3))
                    sage: W.nr_reflections()
                    9
                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.nr_reflections()
                    21
                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.nr_reflections()
                    15
                """
                return sum(self.degrees()) - self.rank()

            def rank(self):
                r"""
                Return the rank of ``self``.

                This is the dimension of the underlying vector space.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.rank()
                    2
                    sage: W = ReflectionGroup((2,1,3))
                    sage: W.rank()
                    3
                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.rank()
                    3
                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.rank()
                    3
                """
                return len(self.degrees())

            def nr_irreducible_components(self):
                r"""
                Return the number of irreducible components of ``self``.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.nr_irreducible_components()
                    1

                    sage: W = ReflectionGroup((1,1,3),(2,1,3))
                    sage: W.nr_irreducible_components()
                    2
                """
                return len(self.irreducible_components())

            def cardinality(self):
                r"""
                Return the cardinality of ``self``.

                It is given by the product of the degrees of ``self``.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.cardinality()
                    6
                    sage: W = ReflectionGroup((2,1,3))
                    sage: W.cardinality()
                    48
                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.cardinality()
                    384
                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.cardinality()
                    192
                """
                return prod(self.degrees())

            def is_irreducible(self):
                r"""
                Return True if ``self`` is irreducible.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3)); W
                    Irreducible complex reflection group of rank 2 and type A2
                    sage: W.is_irreducible()
                    True

                    sage: W = ReflectionGroup((1,1,3),(2,1,3)); W
                    Reducible complex reflection group of rank 5 and type A2 x B3
                    sage: W.is_irreducible()
                    False
                """
                return self.nr_irreducible_components() == 1

            def is_reducible(self):
                r"""
                Return True if ``self`` is not irreducible.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3)); W
                    Irreducible complex reflection group of rank 2 and type A2
                    sage: W.is_reducible()
                    False

                    sage: W = ReflectionGroup((1,1,3),(2,1,3)); W
                    Reducible complex reflection group of rank 5 and type A2 x B3
                    sage: W.is_reducible()
                    True
                """
                return not self.is_irreducible()

            def is_well_generated(self):
                r"""
                Return True if ``self`` is well generated.

                This is, if ``self`` is generated by `n` many
                reflections where `n` is the rank of ``self``.

                .. NOTE::

                    - all finite real reflection groups are well generated,
                    - the complex reflection groups of type `G(r,1,n)` and of type `G(r,r,n)` are well generated,
                    - the complex reflection groups of type `G(r,p,n)` with `1 < p < r` are *not* well generated.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.is_well_generated()
                    True

                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.is_well_generated()
                    True

                    sage: W = ReflectionGroup((4,2,3))
                    sage: W.is_well_generated()
                    False

                    sage: W = ReflectionGroup((4,4,3))
                    sage: W.is_well_generated()
                    True
                """
                return self.nr_simple_reflections() == self.rank()

            def is_real(self):
                r"""
                Return ``True`` if ``self`` is real.

                For irreducible reflection groups, this holds if and
                only if `2` is a degree of ``self``.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: W.is_real()
                    True

                    sage: W = ReflectionGroup((4,1,3))
                    sage: W.is_real()
                    False
                """
                return self.degrees().count(2) == self.nr_irreducible_components()

            @cached_method
            def reflecting_hyperplanes(self):
                r"""
                Return the list of all reflecting hyperplanes of
                ``self``.

                .. NOTE::

                    The method does not yet work for
                    non-crystallographic types.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: for H in W.reflecting_hyperplanes(): print H
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [0 1]
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [1 0]
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [ 1 -1]

                    sage: W = ReflectionGroup((2,1,2))
                    sage: for H in W.reflecting_hyperplanes(): print H
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [0 1]
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [1 0]
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [ 1 -1]
                    Vector space of degree 2 and dimension 1 over Rational Field
                    Basis matrix:
                    [ 1 -2]
                """
                from sage.matrix.all import identity_matrix
                Hs = []
                for r in self.distinguished_reflections():
                    mat = r.as_matrix()
                    mat = mat - identity_matrix(mat.base_ring(),self.rank())
                    Hs.append( mat.right_kernel() )
                return Hs

        class ElementMethods:

            @abstract_method(optional=True)
            def as_matrix(self):
                r"""
                Return the matrix presentation of ``self`` acting on the
                vector space `V`.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3))
                    sage: [ t.as_matrix() for t in W ]
                    [
                    [1 0]  [-1  0]  [ 1  1]  [-1 -1]  [ 0  1]  [ 0 -1]
                    [0 1], [ 1  1], [ 0 -1], [ 1  0], [-1 -1], [-1  0]
                    ]

                    sage: W = ReflectionGroup((3,1,1))
                    sage: [ t.as_matrix() for t in W ]
                    [[1], [E(3)], [E(3)^2]]
                """

            def character_value(self):
                r"""
                Return the value at ``self`` of the character of the
                reflection representation `V`.

                EXAMPLES::

                    sage: W = ReflectionGroup((1,1,3)); W
                    Irreducible complex reflection group of rank 2 and type A2
                    sage: [ t.character_value() for t in W ]
                    [2, 0, 0, -1, -1, 0]

                    sage: W = ReflectionGroup((2,1,2)); W
                    Irreducible complex reflection group of rank 2 and type B2
                    sage: [ t.character_value() for t in W ]
                    [2, 0, 0, 0, 0, 0, 0, -2]

                    sage: W = ReflectionGroup((3,1,2)); W
                    Irreducible complex reflection group of rank 2 and type G(3,1,2)
                    sage: [ t.character_value() for t in W ]
                    [2, -E(3)^2, 0, -E(3), 0, 0, 0, 0, 0, -E(3)^2, 0, 0, 2*E(3), -E(3), 0, -1, -1, 2*E(3)^2]
                """
                return self.as_matrix().trace()

        class Irreducible(CategoryWithAxiom):
            
            def example(self):
                r"""
                Return an example of an irreducible complex
                reflection group.

                EXAMPLES::

                    sage: ComplexReflectionGroups().Finite().Irreducible().example()
                    Irreducible complex reflection group of rank 3 and type G(4,2,3)
                """
                from sage.combinat.root_system.reflection_group_real import ReflectionGroup
                return ReflectionGroup((4,2,3))

            class ParentMethods:
                def coxeter_number(self):
                    r"""
                    Return the Coxeter number of an irreducible
                    reflection group.

                    This is defined as `\frac{N + N^*}{n}` where
                    `N` is the number of reflections, `N^*` is the
                    number of reflecting hyperplanes, and `n` is the
                    rank of ``self``.

                    EXAMPLES::

                        sage: W = ReflectionGroup(31)
                        sage: W.coxeter_number()
                        30
                    """
                    return ( self.nr_reflecting_hyperplanes() + self.nr_reflections() ) / self.rank()

        class WellGenerated(CategoryWithAxiom):
            r"""
            The category of finite well-generated complex reflection
            groups.

            This is the base category for finite subgroups of the
            special linear group which are generated by `n`
            reflections where `n` is the finite dimension of the
            underlying vector space.

            An example of a finite well-generated complex reflection
            group::

                sage: W = ComplexReflectionGroups().Finite().WellGenerated().example(); W
                Reducible complex reflection group of rank 4 and type A2 x G(3,1,2)

            ``W`` is in the category of complex reflection groups::

                sage: W in ComplexReflectionGroups().Finite().WellGenerated()
                True

            TESTS::

                sage: TestSuite(W).run()
                sage: TestSuite(ComplexReflectionGroups().Finite().WellGenerated()).run()
            """

            def example(self):
                r"""
                Return an example of a well-generated complex
                reflection group.

                EXAMPLES::

                    sage: ComplexReflectionGroups().Finite().WellGenerated().example()
                    Reducible complex reflection group of rank 4 and type A2 x G(3,1,2)
                """
                from sage.combinat.root_system.reflection_group_real import ReflectionGroup
                return ReflectionGroup((1,1,3),(3,1,2))

            class Irreducible(CategoryWithAxiom):

                def example(self):
                    r"""
                    Return an example of an irreducible well-generated
                    complex reflection group.

                    EXAMPLES::

                        sage: ComplexReflectionGroups().Finite().WellGenerated().Irreducible().example()
                        Irreducible complex reflection group of rank 3 and type G(4,1,3)
                    """
                    from sage.combinat.root_system.reflection_group_real import ReflectionGroup
                    return ReflectionGroup((4,1,3))

                class ParentMethods:
                    def coxeter_number(self):
                        r"""
                        Return the Coxeter number of a well-generated,
                        irreducible reflection group. This is defined to be
                        the order of a regular element in ``self``, and is
                        equal to the highest degree of self.

                        .. NOTE::

                            This method overwrites the more general
                            method for complex reflection groups since
                            the expression given here is quicker to
                            compute.

                        EXAMPLES::

                            sage: W = ReflectionGroup((1,1,3))
                            sage: W.coxeter_number()
                            3

                            sage: W = ReflectionGroup((4,1,3))
                            sage: W.coxeter_number()
                            12

                            sage: W = ReflectionGroup((4,4,3))
                            sage: W.coxeter_number()
                            8
                        """
                        return max(self.degrees())

                    def number_of_reflections_of_full_support(self):
                        r"""
                        Return the number of reflections with full
                        support.

                        EXAMPLES::

                            sage: W = ReflectionGroup([1,1,4])
                            sage: W.number_of_reflections_of_full_support()
                            1

                            sage: W = ReflectionGroup([3,1,3])
                            sage: W.number_of_reflections_of_full_support()
                            3
                        """
                        n = self.rank()
                        h = self.coxeter_number()
                        l = self.cardinality()
                        codegrees = self.codegrees()[1:]
                        return n*h/l * prod( codeg for codeg in codegrees )

                    @cached_method
                    def rational_catalan_number(self,p,polynomial=False):
                        r"""
                        Return the ``p``-th rational Catalan number
                        associated to ``self``.

                        It is defined by
                        `\prod_{i = 1}^n \frac{p + (p(d_i-1)) \mod h)}{d_i}`
                        where `d_1,\ldots,d_n` are the degrees and
                        where `h` is the Coxeter number, see [STW2015]_
                        for this formula.

                        REFERENCES:

                        .. [STW2015] C. Stump, H. Thomas, N. Williams. Cataland II, in preparation, 2015.

                        EXAMPLES::

                            sage: W = ReflectionGroup((1,1,3))
                            sage: [ W.rational_catalan_number(p) for p in [5,7,8] ]
                            [7, 12, 15]

                            sage: W = ReflectionGroup((2,1,2))
                            sage: [ W.rational_catalan_number(p) for p in [7,9,11] ]
                            [10, 15, 21]
                        """
                        from sage.rings.all import gcd, ZZ
                        from sage.combinat.q_analogues import q_int

                        h = self.coxeter_number()
                        if not gcd(h,p) == 1:
                            raise ValueError("Your given parameter p = %s is not coprime to the Coxeter number %s"%(p,h))

                        if polynomial:
                            f = lambda n: q_int(n)
                        else:
                            f = lambda n: n

                        num = prod( f( p + (p*(deg-1))%h ) for deg in self.degrees() )
                        den = prod( f(deg                ) for deg in self.degrees() )
                        ret = num / den
                        if ret in ZZ:
                            ret = ZZ(ret)
                        return ret

                    def fuss_catalan_number(self,m,positive=False,polynomial=False):
                        r"""
                        Return the ``m``-th Fuss-Catalan number
                        associated to ``self``.

                        It is defined by `\prod_{i = 1}^n \frac{d_i + mh}{d_i}`
                        where `d_1,\ldots,d_n` are the degrees and where `h` is the Coxeter number.

                        .. NOTE::

                            - For the symmetric group `S_n`, it reduces to the Fuss-Catalan number `\frac{1}{mn+1}\binom{(m+1)n}{n}`.
                            - The Fuss-Catalan numbers for `G(r,1,n)` all coincide for `r > 1`.

                        REFERENCES:

                        .. [Arm2000] D. Armstrong. Generalized noncrossing partitions and combinatorics of {C}oxeter groups. Mem. Amer. Math. Soc., 2006.

                        EXAMPLES::

                            sage: W = ReflectionGroup((1,1,3))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [5, 12, 22]

                            sage: W = ReflectionGroup((1,1,4))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [14, 55, 140]

                            sage: W = ReflectionGroup((1,1,5))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [42, 273, 969]

                            sage: W = ReflectionGroup((2,1,2))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [6, 15, 28]

                            sage: W = ReflectionGroup((2,1,3))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [20, 84, 220]

                            sage: W = ReflectionGroup((2,1,4))
                            sage: [ W.fuss_catalan_number(i) for i in [1,2,3] ]
                            [70, 495, 1820]
                        """
                        h = self.coxeter_number()
                        if positive:
                            p = m*h-1
                        else:
                            p = m*h+1

                        return self.rational_catalan_number(p,polynomial=polynomial)

                    def catalan_number(self,positive=False,polynomial=False):
                        r"""
                        Return the Catalan number associated to ``self``.

                        It is defined by `\prod_{i = 1}^n \frac{d_i + h}{d_i}`
                        where `d_1,\ldots,d_n` are the degrees and where `h` is the Coxeter number.

                        .. NOTE::

                            - For the symmetric group `S_n`, it reduces to the Catalan number `\frac{1}{n+1}\binom{2n}{n}`.
                            - The Catalan numbers for `G(r,1,n)` all coincide for `r > 1`.

                        REFERENCES:

                        .. [Arm2000] D. Armstrong. Generalized noncrossing partitions and combinatorics of {C}oxeter groups. Mem. Amer. Math. Soc., 2006.

                        EXAMPLES::

                            sage: [ ReflectionGroup((1,1,n)).catalan_number() for n in [3,4,5] ]
                            [5, 14, 42]

                            sage: [ ReflectionGroup((2,1,n)).catalan_number() for n in [3,4,5] ]
                            [20, 70, 252]

                            sage: [ ReflectionGroup((2,2,n)).catalan_number() for n in [3,4,5] ]
                            [14, 50, 182]
                        """
                        return self.fuss_catalan_number(1,positive=positive,polynomial=polynomial)

            class ParentMethods:
                def _test_well_generated(self, **options):
                    r"""
                    Tester for well-generated complex reflection groups.

                    EXAMPLES::

                        sage: W = ReflectionGroup(4)
                        sage: W._test_well_generated()
                        True
                    """
                    tester = self._tester(**options)
                    return self.is_well_generated()
