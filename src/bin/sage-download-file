#!/usr/bin/env python

#*****************************************************************************
#  Copyright (C) 2013  Volker Braun <vbraun.name@gmail.com>
#  Distributed under the terms of the GNU General Public License (GPL)
#  as published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

import contextlib
import os
import sys
import re

try:
    # Python 3
    import urllib.request as urllib
    import urllib.parse as urlparse
except ImportError:
    import urllib
    import urlparse

try:
    from sage.env import SAGE_ROOT, SAGE_DISTFILES
except ImportError:
    # Sage is not yet installed
    SAGE_ROOT = os.environ['SAGE_ROOT']
    SAGE_DISTFILES = os.environ.get('SAGE_DISTFILES',
            os.path.join(SAGE_ROOT, 'upstream'))

try:
    # we want to assume that SAGE_DISTFILES is an actual
    # directory for the remainder of this script
    os.mkdir(SAGE_DISTFILES)
except OSError:
    pass


def printflush(x):
    """Print ``x`` and flush output"""
    print(x)
    sys.stdout.flush()


def http_error_default(url, fp, errcode, errmsg, headers):
    """
    Callback for the URLopener to raise an exception on HTTP errors
    """
    fp.close()
    raise IOError(errcode, errmsg, url)


class ProgressBar(object):
    """
    Progress bar as urllib reporthook
    """

    def __init__(self, length=70):
        self.length = length
        self.progress = 0
        self.stream = sys.stderr

    def start(self):
        sys.stdout.flush()    # make sure to not interleave stdout/stderr
        self.stream.write('[')
        self.stream.flush()

    def __call__(self, chunks_so_far, chunk_size, total_size):
        if total_size == -1:  # we do not know size
            n = 0 if chunks_so_far == 0 else self.length // 2
        else:
            n = chunks_so_far * chunk_size * self.length // total_size
        if n > self.length: 
            # If there is a Content-Length, this will be sent as the last progress
            return
        # n ranges from 0 to length*total (exclude), so we'll print at most length dots
        if n >= self.progress:
            self.stream.write('.' * (n-self.progress))
            self.stream.flush()
        self.progress = n
        
    def stop(self):
        missing = '.' * (self.length - self.progress)
        self.stream.write(missing + ']\n')
        self.stream.flush()

    def error_stop(self):
        missing = 'x' * (self.length - self.progress)
        self.stream.write(missing + ']\n')
        self.stream.flush()
        

def http_download(url, destination=None, progress=True, ignore_errors=False):
    """
    Download via HTTP

    This should work for FTP as well but, in fact, hangs on python <
    3.4, see http://bugs.python.org/issue16270

    INPUT:

    - ``url`` -- string. The URL to download.

    - ``destination`` -- string or ``None`` (default). The destination
      file name to save to. If not specified, the file is written to
      stdout.

    - ``progress`` -- boolean (default: ``True``). Whether to print a
      progress bar to stderr.

    - ``ignore_errors`` -- boolean (default: ``False``). Catch network
      errors (a message is still printed to stdout).
    """
    if destination is None:
        destination = '/dev/stdout'
    opener = urllib.FancyURLopener()
    opener.http_error_default = http_error_default
    if progress:
        progress_bar = ProgressBar()
        progress_bar.start()
        try:
            filename, info = opener.retrieve(url, destination, progress_bar)
        except IOError as err:
            progress_bar.error_stop()
            printflush(err)
            if not ignore_errors:
                raise
        else:
            progress_bar.stop()
    else:
        filename, info = opener.retrieve(url, destination)


class MirrorList(object):
    
    URL = 'http://www.sagemath.org/mirror_list'

    MAXAGE = 24*60*60   # seconds

    def __init__(self, verbose=True):
        """
        If `verbose` is False, don't print messages along the way.
        This is needed to produce the appropriate output for
        `sage-download-file --print-fastest-mirror`.
        """
        self.filename = os.path.join(SAGE_DISTFILES, 'mirror_list')
        self.verbose = verbose
        if self.must_refresh():
            if self.verbose:
                printflush('Downloading the Sage mirror list')
            with contextlib.closing(urllib.urlopen(self.URL)) as f:
                mirror_list = f.read().decode("ascii")
            self.mirrors = self._load(mirror_list)
            self._rank_mirrors()
            self._save()
        else:
            self.mirrors = self._load()

    def _load(self, mirror_list = None):
        """
        Load and return `mirror_list` (defaults to the one on disk) as
        a list of strings
        """
        if mirror_list is None:
            with open(self.filename, 'rt') as f:
                mirror_list = f.read()
        import ast
        return ast.literal_eval(mirror_list)

    def _save(self):
        """
        Save the mirror list for (short-term) future  use.
        """
        with open(self.filename, 'wt') as f:
            f.write(repr(self.mirrors))

    def _port_of_mirror(self, mirror):
        if mirror.startswith('http://'):
            return 80
        if mirror.startswith('https://'):
            return 443
        if mirror.startswith('ftp://'):
            return 21

    def _rank_mirrors(self):
        """
        Sort the mirrors by speed, fastest being first

        This method is used by the YUM fastestmirror plugin 
        """
        timed_mirrors = []
        import time, socket
        if self.verbose:
            printflush('Searching fastest mirror')
        timeout = 1
        for mirror in self.mirrors:
            if not mirror.startswith('http'):
                # we currently cannot handle ftp://
                continue
            port = self._port_of_mirror(mirror)
            mirror_hostname = urlparse.urlsplit(mirror).netloc
            time_before = time.time()
            try:
                sock = socket.create_connection((mirror_hostname, port), timeout)
                sock.close()
            except (IOError, socket.error, socket.timeout):
                continue
            result = time.time() - time_before
            result_ms = int(1000 * result)
            if self.verbose:
                printflush(str(result_ms).rjust(5) + 'ms: ' + mirror)
            timed_mirrors.append((result, mirror))
        timed_mirrors.sort()
        self.mirrors = [m[1] for m in timed_mirrors]
        if self.verbose:
            printflush('Fastest mirror: ' + self.fastest)

    @property
    def fastest(self):
        return self.mirrors[0]

    def age(self):
        """
        Return the age of the cached mirror list in seconds
        """
        import time
        mtime = os.path.getmtime(self.filename)
        now = time.mktime(time.localtime())
        return now - mtime

    def must_refresh(self):
        """
        Return whether we must download the mirror list.

        If and only if this method returns ``False`` is it admissible
        to use the cached mirror list.
        """
        if not os.path.exists(self.filename):
            return True
        return self.age() > self.MAXAGE

    def __iter__(self):
        """
        Iterate through the list of mirrors.

        This is the main entry point into the mirror list. Every
        script should just use this function to try mirrors in order
        of preference. This will not just yield the official mirrors,
        but also urls for packages that are currently being tested.
        """
        try:
            yield os.environ['SAGE_SERVER']
        except KeyError:
            pass
        for mirror in self.mirrors:
            yield mirror
        # If all else fails: Try the packages we host ourselves
        yield 'http://sagepad.org/'
        


class ChecksumError(Exception):
    pass

class FileNotMirroredError(Exception):
    pass


class Package(object):

    def __init__(self, package_name):
        self.name = package_name
        self._init_checksum()
        self._init_version()
        
    @classmethod
    def all(cls):
        base = os.path.join(SAGE_ROOT, 'build', 'pkgs')
        for subdir in os.listdir(base):
            path = os.path.join(base, subdir) 
            if not os.path.isdir(path):
                continue
            yield cls(subdir)

    @property
    def path(self):
        return os.path.join(SAGE_ROOT, 'build', 'pkgs', self.name)
            
    def _init_checksum(self):
        """
        Load the checksums from the appropriate ``checksums.ini`` file
        """
        checksums_ini = os.path.join(self.path, 'checksums.ini')
        assignment = re.compile('(?P<var>[a-zA-Z0-9]*)=(?P<value>.*)')
        result = dict()
        with open(checksums_ini, 'rt') as f:
            for line in f.readlines():
                match = assignment.match(line)
                if match is None:
                    continue
                var, value = match.groups()
                result[var] = value
        self.md5 = result['md5']
        self.sha1 = result['sha1']
        self.cksum = result['cksum']
        self.sha1 = result['sha1']
        self.tarball_pattern = result['tarball']
        
    VERSION_PATCHLEVEL = re.compile('(?P<version>.*)\.p(?P<patchlevel>[0-9]+)')
    
    def _init_version(self):
        with open(os.path.join(self.path, 'package-version.txt')) as f:
            package_version = f.read().strip()
        match = self.VERSION_PATCHLEVEL.match(package_version)
        if match is None:
            self.version = package_version
            self.patchlevel = -1
        else:
            self.version = match.group('version')
            self.patchlevel = match.group('patchlevel')
        self.tarball = self.tarball_pattern.replace('VERSION', self.version)
        
        
class Tarball(object):
    
    def __init__(self, tarball_name):
        """
        A (third-party downloadable) tarball

        INPUT:

        - ``name`` - string. The full filename (``foo-1.3.tar.bz2``)
          of a tarball on the Sage mirror network.
        """
        self.filename = tarball_name
        self.package = None
        for pkg in Package.all():
            if pkg.tarball == tarball_name:
                self.package = pkg
        if self.package is None:
            raise ValueError('tarball {0} is not referenced by any Sage package'
                             .format(tarball_name))
            
    @property
    def upstream_fqn(self):
        """
        The fully-qualified (including directory) file name in the upstream directory.
        """
        return os.path.join(SAGE_DISTFILES, self.filename)

    def _compute_hash(self, algorithm):
        with open(self.upstream_fqn, 'rb') as f:
            while True:
                buf = f.read(0x100000)
                if not buf:
                    break
                algorithm.update(buf)
        return algorithm.hexdigest()

    def _compute_sha1(self):
        import hashlib
        return self._compute_hash(hashlib.sha1())

    def _compute_md5(self):
        import hashlib
        return self._compute_md5(hashlib.md5())
    
    def checksum_verifies(self):
        """
        Test whether the checksum of the downloaded file is correct.
        """
        sha1 = self._compute_sha1()
        return sha1 == self.package.sha1

    def download(self):
        """
        Download the tarball to the upstream directory.
        """
        destination = os.path.join(SAGE_DISTFILES, self.filename)
        if os.path.isfile(destination):
            if self.checksum_verifies():
                print('Using cached file {destination}'.format(destination=destination))
                return
            else:
                # Garbage in the upstream directory? Delete and re-download
                print('Invalid checksum for cached file {destination}, deleting'
                      .format(destination=destination))
                os.remove(destination)
        successful_download = False
        print('Attempting to download package {0} from mirrors'.format(self.filename))
        for mirror in MirrorList():
            url = mirror + '/'.join(['spkg', 'upstream', self.package.name, self.filename])
            printflush(url)
            try:
                http_download(url, self.upstream_fqn)
                successful_download = True
                break
            except IOError:
                pass  # mirror doesn't have file for whatever reason...
        if not successful_download:
            raise FileNotMirroredError('tarball does not exist on mirror')
        if not self.checksum_verifies():
            raise ChecksumError('checksum does not match')

    def save_as(self, destination):
        import shutil
        shutil.copy(self.upstream_fqn, destination)


usage = \
"""
USAGE:

    sage-download-file --print-fastest-mirror

Print out the fastest mirror. All further arguments are ignored in
that case.

    sage-download-file [--quiet] url-or-tarball [destination]

The single mandatory argument can be a http:// url or a tarball
filename. In the latter case, the tarball is downloaded from the
mirror network and its checksum is verified.

If the destination is not specified:
* a url will be downloaded and the content written to stdout
* a tarball will be saved under {SAGE_DISTFILES}
""".format(SAGE_DISTFILES=SAGE_DISTFILES)

if __name__ == '__main__':
    progress = True
    url = None
    destination = None
    for arg in sys.argv[1:]:
        if arg.startswith('--print-fastest-mirror'):
            url = "fastest mirror"
            continue
        if arg.startswith('--quiet'):
            progress = False
            continue
        if url is None:
            url = arg
            continue
        if destination is None:
            destination = arg
            continue
        raise ValueError('too many arguments')
    if url is None:
        print(usage)
        sys.exit(2)

    try:
        if url.startswith('http://') or url.startswith('https://') or url.startswith('ftp://'):
            http_download(url, destination, progress=progress, ignore_errors=True)
        elif url == "fastest mirror":
            print(MirrorList(verbose=False).fastest)
        else:
            # url is a tarball name
            tarball = Tarball(url)
            tarball.download()
            if destination is not None:
                tarball.save_as(destination)
    except:
        try:
            stars = '*' * 72 + '\n'
            sys.stderr.write(stars)
            try:
                import traceback
                traceback.print_exc(file=sys.stderr)
                sys.stderr.write(stars)
            except:
                pass
            sys.stderr.write("Error downloading %s\n"%(url,))
            sys.stderr.write(stars)
        finally:
            sys.exit(1)
