###############################################################################
# This file ($SAGE_ROOT/build/deps) will be copied into
# $SAGE_ROOT/build/Makefile by $SAGE_ROOT/build/install
###############################################################################

# Do not put an explicit path for sage-spkg here, it will be found in $PATH.
SAGE_SPKG = sage-spkg -f
PIPE = $(SAGE_ROOT)/build/pipestatus

# Tell make not to look for files with these names:
.PHONY: all all-sage base toolchain toolchain-deps

# Make the 5 build phases:
# prereq, base, toolchain, toolchain-deps, all-sage
# During the toolchain build, we export SAGE_BUILD_TOOLCHAIN=yes
# such that packages can do different things when they are built
# as prerequisite of GCC.
all:
	$(MAKE) $(INST)/prereq
	$(MAKE) base
	env SAGE_BUILD_TOOLCHAIN=yes $(MAKE) toolchain
	$(MAKE) toolchain-deps
	$(MAKE) all-sage

# All targets except for the base packages
all-sage: \
     $(STANDARD_PACKAGES) \
     $(INST)/$(SAGE_MP_LIBRARY) \
     $(INST)/sage \
     $(EXTCODE) \
     $(SCRIPTS)

# TOOLCHAIN consists of dependencies determined by build/install,
# including for example the GCC package.
toolchain: $(TOOLCHAIN)

# Build all packages that GCC links against serially, otherwise this
# leads to race conditions where some library which is used by GCC gets
# reinstalled. Since system GCCs might use Sage's libraries, we do this
# unconditionally. We still use the dependency checking from $(MAKE),
# so this will not trigger useless rebuilds.
# See #14168 and #14232.
toolchain-deps:
	$(MAKE) $(INST)/$(ZLIB)
	$(MAKE) $(INST)/$(SAGE_MP_LIBRARY)
	$(MAKE) $(INST)/$(MPFR)
	$(MAKE) $(INST)/$(MPC)
	$(MAKE) $(INST)/$(PPL)

# Everything needed to start up Sage using "./sage".  Of course, not
# every part of Sage will work.  It does not include Maxima for example.
SAGERUNTIME = $(SCRIPTS) $(INST)/sage $(INST)/$(IPYTHON)

###############################################################################
# Building the base system
#
# This consists of packages which are required for the Sage build system.
###############################################################################
base: $(INST)/$(BZIP2) $(INST)/$(PATCH) $(INST)/$(PKGCONF)

$(INST)/prereq: ../configure
	@cd ..; rm -f config.log; ln -s logs/pkgs/config.log config.log; \
	./configure $$PREREQ_OPTIONS || ( \
	    if [ "x$$SAGE_PORT" = x ]; then \
	        echo "If you would like to try to build Sage anyway (to help porting),"; \
	        echo "export the variable 'SAGE_PORT' to something non-empty."; \
	        exit 1; \
	    else \
	        echo "Since 'SAGE_PORT' is set, we will try to build anyway."; \
	    fi; )
	touch $@

###############################################################################
# Building normal packages
###############################################################################

# List all *build-time* dependencies of the Sage library.  These are,
# on the one hand, programs needed for the build/install process of the
# Sage library (e.g. JINJA2), and on the
# other hand all dependencies for Cython files (e.g. PARI, NTL, SAGE_MP_LIBRARY).
$(INST)/sage: \
		 $(INST)/$(ATLAS) \
		 $(INST)/$(CEPHES) \
		 $(INST)/$(CLIQUER) \
		 $(INST)/$(CYTHON) \
		 $(INST)/$(ECL) \
		 $(INST)/$(ECLIB) \
		 $(INST)/$(ECM) \
		 $(INST)/$(FLINT) \
		 $(INST)/$(LIBFPLLL) \
		 $(INST)/$(LIBGD) \
		 $(INST)/$(GIVARO) \
		 $(INST)/$(GLPK) \
		 $(INST)/$(GSL) \
		 $(INST)/$(IML) \
		 $(INST)/$(JINJA2) \
		 $(INST)/$(LCALC) \
		 $(INST)/$(LRCALC) \
		 $(INST)/$(LIBGAP) \
		 $(INST)/$(LIBPNG) \
		 $(INST)/$(LINBOX) \
		 $(INST)/$(M4RI) \
		 $(INST)/$(M4RIE) \
		 $(INST)/$(MPC) \
		 $(INST)/$(MPFI) \
		 $(INST)/$(MPFR) \
		 $(INST)/$(SAGE_MP_LIBRARY) \
		 $(INST)/$(NTL) \
		 $(INST)/$(NUMPY) \
		 $(INST)/$(PARI) \
		 $(INST)/$(PLANARITY) \
		 $(INST)/$(POLYBORI) \
		 $(INST)/$(PPL) \
		 $(INST)/$(PYNAC) \
		 $(INST)/$(PYTHON) \
		 $(INST)/$(RATPOINTS) \
		 $(INST)/$(READLINE) \
		 $(INST)/$(SINGULAR) \
		 $(INST)/$(SIX) \
		 $(INST)/$(SYMMETRICA) \
		 $(INST)/$(ZN_POLY)
	if [ -z "$$SAGE_INSTALL_FETCH_ONLY" ]; then \
		cd $(SAGE_SRC) && source bin/sage-env && \
		$(PIPE) 'time $(MAKE) sage 2>&1' 'tee -a $(SAGE_LOGS)/sage-$(SAGE_VERSION).log' && \
		touch $@; \
	fi

# TODO: remove this once ccache is a new-style package
CCACHE = ccache
$(INST)/ccache: base $(INST)/$(ZLIB)
	+$(PIPE) "$(SAGE_SPKG) ccache 2>&1" "tee -a $(SAGE_LOGS)/ccache.log"
	touch $@
