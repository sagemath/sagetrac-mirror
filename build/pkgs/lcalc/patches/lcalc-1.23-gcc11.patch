diff --git a/include/Lcommon.h b/include/Lcommon.h
index 1b3be43..717fcde 100644
--- a/include/Lcommon.h
+++ b/include/Lcommon.h
@@ -15,7 +15,7 @@ typedef long long Long;
 
 
 // To aid conversion to int value
-inline double lcalc_to_double(const Double& x) {
+inline constexpr double lcalc_to_double(const Double& x) {
 #ifdef USE_MPFR
 	return x.get_d();
 #else
@@ -23,16 +23,16 @@ inline double lcalc_to_double(const Double& x) {
 #endif
 }
 #ifdef USE_MPFR
-inline double lcalc_to_double(const double& x) { return x; }
+inline constexpr double lcalc_to_double(const double& x) { return x; }
 #endif
-//inline double lcalc_to_double(const long double& x) { return x; }
-inline double lcalc_to_double(const int& x) { return x; }
-inline double lcalc_to_double(const long long& x) { return x; }
-inline double lcalc_to_double(const short& x) { return x; }
-inline double lcalc_to_double(const char& x) { return x; }
-inline double lcalc_to_double(const long int& x) { return x; }
-inline double lcalc_to_double(const unsigned int& x) { return x; }
-inline double lcalc_to_double(const long unsigned int& x) { return x; }
+inline constexpr double lcalc_to_double(const long double& x) { return x; }
+inline constexpr double lcalc_to_double(const int& x) { return x; }
+inline constexpr double lcalc_to_double(const long long& x) { return x; }
+inline constexpr double lcalc_to_double(const short& x) { return x; }
+inline constexpr double lcalc_to_double(const char& x) { return x; }
+inline constexpr double lcalc_to_double(const long int& x) { return x; }
+inline constexpr double lcalc_to_double(const unsigned int& x) { return x; }
+inline constexpr double lcalc_to_double(const long unsigned int& x) { return x; }
 #define Int(x) (int)(lcalc_to_double(x))
 #define Long(x) (Long)(lcalc_to_double(x))
 #define double(x) (double)(lcalc_to_double(x))
