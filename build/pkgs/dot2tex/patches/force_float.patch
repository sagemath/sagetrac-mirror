--- a/dot2tex/dot2tex.py	2014-04-01 13:44:30.000000000 +0000
+++ b/dot2tex/dot2tex.py	2014-04-01 13:49:24.182778200 +0000
@@ -838,7 +838,8 @@
         bbstr = self.maingraph.attr.get('bb', '')
         if bbstr:
             bb = bbstr.split(',')
-            vars['<<bbox>>'] = "(%sbp,%sbp)(%sbp,%sbp)\n" % (bb[0], bb[1], bb[2], bb[3])
+            vars['<<bbox>>'] = "(%fbp,%fbp)(%fbp,%fbp)\n" % (
+                float(bb[0]), float(bb[1]), float(bb[2]), float(bb[3]))
             vars['<<bbox.x0>>'] = bb[0]
             vars['<<bbox.y0>>'] = bb[1]
             vars['<<bbox.x1>>'] = bb[2]
@@ -1165,8 +1166,8 @@
         if bbstr:
             bb = bbstr.split(',')
             #fillcolor=black,
-        s = "\\begin{pspicture}[linewidth=1bp](%sbp,%sbp)(%sbp,%sbp)\n" %\
-            (bb[0], bb[1], bb[2], bb[3])
+        s = "\\begin{pspicture}[linewidth=1bp](%fbp,%fbp)(%fbp,%fbp)\n" % (
+                float(bb[0]), float(bb[1]), float(bb[2]), float(bb[3]))
         # Set line style to mitre
         s += "  \pstVerb{2 setlinejoin} % set line join style to 'mitre'\n"
         #return s
@@ -1193,15 +1194,16 @@
             else:
                 stylestr = style
 
-        s += "  \psellipse[%s](%sbp,%sbp)(%sbp,%sbp)\n" % (stylestr, x, y,
+        s += "  \psellipse[%s](%fbp,%fbp)(%fbp,%fbp)\n" % (stylestr,
+                                                           float(x), float(y),
                                                            # w+self.linewidth,h+self.linewidth)
-                                                           w, h)
+                                                           float(w), float(h))
 
         return s
 
     def draw_polygon(self, drawop, style=None):
         op, points = drawop
-        pp = ['(%sbp,%sbp)' % (p[0], p[1]) for p in points]
+        pp = ['(%fbp,%fbp)' % (float(p[0]),float(p[1])) for p in points]
         stylestr = ""
         if op == 'P':
             if style:
@@ -1218,7 +1220,7 @@
 
     def draw_polyline(self, drawop, style=None):
         op, points = drawop
-        pp = ['(%sbp,%sbp)' % (p[0], p[1]) for p in points]
+        pp = ['(%fbp,%fbp)' % (float(p[0]),float(p[1])) for p in points]
         s = "  \psline%s\n" % "".join(pp)
         return s
 
@@ -1226,7 +1228,7 @@
         op, points = drawop
         pp = []
         for point in points:
-            pp.append("(%sbp,%sbp)" % (point[0], point[1]))
+            pp.append("(%fbp,%fbp)" % (float(point[0]),float(point[1])))
 
         #points = ['(%sbp, %sbp)' % (p[0],p[1]) for p in points]
         arrowstyle = ""
@@ -1247,7 +1249,7 @@
             alignstr = ""  # centered (default)
         if alignstr or valign:
             alignstr = '[' + alignstr + valign + ']'
-        s = "  \\rput%s(%sbp,%sbp){%s}\n" % (alignstr, x, y, text)
+        s = "  \\rput%s(%fbp,%fbp){%s}\n" % (alignstr, float(x),float(y),text)
         return s
 
     def set_color(self, drawop):
@@ -1334,7 +1336,7 @@
             pp = []
             for point in points:
                 p = point.split(',')
-                pp.append("(%sbp,%sbp)" % (p[0], p[1]))
+                pp.append("(%fbp,%fbp)" % (float(p[0]),float(p[1])))
 
             edgestyle = edge.attr.get('style', '')
             styles = []
@@ -1623,14 +1625,15 @@
             stylestr = " [%s]" % style
         else:
             stylestr = ''
-        s += "  \%s%s (%sbp,%sbp) ellipse (%sbp and %sbp);\n" % (cmd, stylestr, x, y,
+        s += "  \%s%s (%fbp,%fbp) ellipse (%fbp and %fbp);\n" % (cmd, stylestr,
+                                                                 float(x),float(y),
                                                                  # w+self.linewidth,h+self.linewidth)
-                                                                 w, h)
+                                                                 float(w), float(h))
         return s
 
     def draw_polygon(self, drawop, style=None):
         op, points = drawop
-        pp = ['(%sbp,%sbp)' % (p[0], p[1]) for p in points]
+        pp = ['(%fbp,%fbp)' % (float(p[0]),float(p[1])) for p in points]
         cmd = "draw"
         if op == 'P':
             cmd = "filldraw"
@@ -1644,7 +1647,7 @@
 
     def draw_polyline(self, drawop, style=None):
         op, points = drawop
-        pp = ['(%sbp,%sbp)' % (p[0], p[1]) for p in points]
+        pp = ['(%fbp,%fbp)' % (float(p[0]),float(p[1])) for p in points]
         ##if style:
         ##            stylestr = " [%s]" % style
         ##        else:
@@ -1678,7 +1681,7 @@
         lblstyle = ",".join([i for i in styles if i])
         if lblstyle:
             lblstyle = '[' + lblstyle + ']'
-        s = "  \draw (%sbp,%sbp) node%s {%s};\n" % (x, y, lblstyle, text)
+        s = "  \draw (%fbp,%fbp) node%s {%s};\n" % (float(x), float(y), lblstyle, text)
         return s
 
     def draw_bezier(self, drawop, style=None):
@@ -1688,7 +1691,7 @@
 
         pp = []
         for point in points:
-            pp.append("(%sbp,%sbp)" % (point[0], point[1]))
+            pp.append("(%fbp,%fbp)" % (float(point[0]),float(point[1])))
 
         #points = ['(%sbp, %sbp)' % (p[0],p[1]) for p in points]
         #quadp = nsplit(pp, 4)
@@ -1764,7 +1767,7 @@
             pp = []
             for point in points:
                 p = point.split(',')
-                pp.append("(%sbp,%sbp)" % (p[0], p[1]))
+                pp.append("(%fbp,%fbp)" % (float(p[0]),float(p[1])))
 
             edgestyle = edge.attr.get('style', '')
 
@@ -2063,7 +2066,7 @@
             else:
                 label = ''
 
-            pos = "%sbp,%sbp" % (x, y)
+            pos = "%fbp,%fbp" % (float(x),float(y))
             style = node.attr.get('style') or ""
             if node.attr.get('lblstyle'):
                 if style:
@@ -2158,7 +2161,7 @@
             pp = []
             for point in points:
                 p = point.split(',')
-                pp.append("(%sbp,%sbp)" % (p[0], p[1]))
+                pp.append("(%fbp,%fbp)" % (float(p[0]),float(p[1])))
 
             edgestyle = edge.attr.get('style')
             #print edgestyle

