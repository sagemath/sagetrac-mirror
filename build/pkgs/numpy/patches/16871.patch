From 36d41a6cf76491d4d7066329f3c6483a8428c518 Mon Sep 17 00:00:00 2001
From: Raghuveer Devulapalli <raghuveer.devulapalli@intel.com>
Date: Tue, 14 Jul 2020 13:34:55 -0700
Subject: [PATCH] BUG: Update compiler check for AVX-512F

gcc-4.9 is missing a few AVX-512F intrisics, see
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61878. We use some of these
missing intrinsics to check for compiler support of AVX-512F.
---
 numpy/core/setup_common.py           | 6 +++++-
 numpy/distutils/checks/cpu_avx512f.c | 7 ++++++-
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/numpy/core/setup_common.py b/numpy/core/setup_common.py
index 8c0149497bc..f15425c8763 100644
--- a/numpy/core/setup_common.py
+++ b/numpy/core/setup_common.py
@@ -178,6 +178,9 @@ def check_api_version(apiversion, codegen_dir):
 # gcc 4.8.4 support attributes but not with intrisics
 # tested via "#include<%s> int %s %s(void *){code; return 0;};" % (header, attribute, name, code)
 # function name will be converted to HAVE_<upper-case-name> preprocessor macro
+# The _mm512_castps_si512 instruction is specific check for AVX-512F support
+# in gcc-4.9 which is missing a subset of intrinsics. See
+# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61878
 OPTIONAL_FUNCTION_ATTRIBUTES_WITH_INTRINSICS = [('__attribute__((target("avx2,fma")))',
                                 'attribute_target_avx2_with_intrinsics',
                                 '__m256 temp = _mm256_set1_ps(1.0); temp = \
@@ -185,11 +188,12 @@ def check_api_version(apiversion, codegen_dir):
                                 'immintrin.h'),
                                 ('__attribute__((target("avx512f")))',
                                 'attribute_target_avx512f_with_intrinsics',
-                                '__m512 temp = _mm512_set1_ps(1.0)',
+                                '__m512i temp = _mm512_castps_si512(_mm512_set1_ps(1.0))',
                                 'immintrin.h'),
                                 ('__attribute__((target ("avx512f,avx512dq,avx512bw,avx512vl,avx512cd")))',
                                 'attribute_target_avx512_skx_with_intrinsics',
                                 '__mmask8 temp = _mm512_fpclass_pd_mask(_mm512_set1_pd(1.0), 0x01);\
+                                __m512i temp = _mm512_castps_si512(_mm512_set1_ps(1.0));\
                                 _mm_mask_storeu_epi8(NULL, 0xFF, _mm_broadcastmb_epi64(temp))',
                                 'immintrin.h'),
                                 ]
diff --git a/numpy/distutils/checks/cpu_avx512f.c b/numpy/distutils/checks/cpu_avx512f.c
index f60cc09dd09..a27258236f4 100644
--- a/numpy/distutils/checks/cpu_avx512f.c
+++ b/numpy/distutils/checks/cpu_avx512f.c
@@ -2,6 +2,11 @@
 
 int main(void)
 {
-    __m512i a = _mm512_abs_epi32(_mm512_setzero_si512());
+    /*
+     * We specifically check for instruction _mm512_castps_si512 as a
+     * work-around for a bug in gcc4.9 which is missing a subset of AVX-512F
+     * intrinsics. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61878
+     */
+    __m512i a = _mm512_castps_si512(_mm512_set1_ps(1.0));
     return _mm_cvtsi128_si32(_mm512_castsi512_si128(a));
 }
