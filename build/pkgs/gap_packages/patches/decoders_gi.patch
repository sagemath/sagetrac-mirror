diff --git b/guava-3.12/lib/decoders.gi a/guava-3.12/lib/decoders.gi
index 1ef83da..230ffe2 100644
--- b/guava-3.12/lib/decoders.gi
+++ a/guava-3.12/lib/decoders.gi
@@ -61,7 +61,7 @@ end);
 InstallMethod(Decode, "method for linear code, codeword", true, 
 	[IsLinearCode, IsCodeword], 0, 
 function(C, v) 
-    local c, S, syn, index, corr, Gt, i, x, F;
+    local ok, c, S, syn, index, corr, Gt, i, x, F;
     if v in C then
         return InformationWord(C,v);
     fi;
@@ -72,10 +72,16 @@ function(C, v)
     F := LeftActingDomain(C);
     S := SyndromeTable(C);
     syn := Syndrome(C, c);
-    index := 0;
-    repeat
-        index := index + 1;
-    until S[index][2] = syn;
+    ok := false;
+    for index in [1..Length(S)] do
+        if IsBound(S[index]) and S[index][2] = syn then
+           ok := true;
+           break;
+        fi;
+    od;
+    if not ok then  # this should never happen!
+       Error("In Decodeword: index not found");
+    fi;
 #This is a hack.  The subtraction operation for codewords is causing an error
 #and rather than trying to understand the method selection process, I'm brute-
 #forcing things...
@@ -135,7 +141,7 @@ end);
 InstallMethod(Decodeword, "method for linear code, codeword", true, 
 	[IsLinearCode, IsCodeword], 0, 
 function(C, v) 
-    local c, c0, S, syn, index, corr, Gt, i, x, F;
+    local ok, c, c0, S, syn, index, corr, Gt, i, x, F;
     if v in C then
         return v;
     fi;
@@ -153,10 +159,16 @@ function(C, v)
     F := LeftActingDomain(C);
     S := SyndromeTable(C);
     syn := Syndrome(C, c);
-    index := 0;
-    repeat
-        index := index + 1;
-    until S[index][2] = syn;
+    ok := false;
+    for index in [1..Length(S)] do
+        if IsBound(S[index]) and S[index][2] = syn then
+           ok := true;
+           break;
+        fi;
+    od;
+    if not ok then  # this should never happen!
+       Error("In Decodeword: index not found");
+    fi;
     corr := VectorCodeword(c - S[index][1]);	     # correct codeword
     return Codeword(corr,F);
 end);
