diff --git a/pkg/cohomolo-1.6.8/standalone/progs.d/crp1.c b/pkg/cohomolo-1.6.8/standalone/progs.d/crp1.c
index 3bbdc45..7df699f 100644
--- a/pkg/cohomolo-1.6.8/standalone/progs.d/crp1.c
+++ b/pkg/cohomolo-1.6.8/standalone/progs.d/crp1.c
@@ -8,9 +8,8 @@ extern short sp[],**mat[],*psp[],**imcos[],**cpco[],lorb[],
 short *cst,**cpst,***cdpst,**svptr,*cp,*rel;
 short *spst,**pspst,**pptr,**cpptr,npt,nb,nph,nph2,npg,npg2,
       rno,orno,coh_index,*invg;
-FILE  *ip,*op;
 
-void seeknln (void) { while (getc(ip)!='\n'); }
+void seeknln (FILE *ip) { while (getc(ip)!='\n'); }
 
 /* This program differs from most other permutation programs in that perms are
    all stored in the single array sp. Schreier vectors are stored in the short
@@ -23,13 +22,14 @@ void seeknln (void) { while (getc(ip)!='\n'); }
 int 
 crprog1 (void)
 { short *pc,*qc,ex,neg; int x;
+  FILE  *ip,*op;
   short i,j,k,l,m,n,cl,rl,*p,ocl,im,pt,pt1,pn,ipt;
   if ((ip=fopen(inf2,"r"))== 0)
   { fprintf(stderr,"Cannot open %s.\n",inf2); return(-1);}
   fscanf(ip,"%hd%hd%hd%hd",&npt,&nph,&nb,&k);
   if (nb>=mb) {fprintf(stderr,"nb too big. Increase MB.\n"); return(-1);}
   if (k<=2) {fprintf(stderr,"inf2 has illegal format.\n"); return(-1); }
-  seeknln(); seeknln();
+  seeknln(ip); seeknln(ip);
   for (i=1;i<=nb;i++) fscanf(ip,"%hd",lorb+i);
   pptr=psp-1; pspst=psp+nph; svptr=cpsp-1;  cpst=cpsp+nb;
   invg=sp; nph2=2*nph; spst=sp+nph2;
@@ -37,7 +37,7 @@ crprog1 (void)
   { pptr[i]=spst+(i-1)*npt-1; p=pptr[i];
     for (j=1;j<=npt;j++) {fscanf(ip,"%hd",&k); p[k]=j; }
     invg[2*i-2]=2*i-1; invg[2*i-1]=2*i-2;
-    seeknln();
+    seeknln(ip);
   }
   spst+=(npt*nph);
   for (i=1;i<=nb;i++)
@@ -75,7 +75,7 @@ crprog1 (void)
   strcpy(inf1,inf0); strcat(inf1,".rel");
   if ((ip=fopen(inf1,"r"))==0)
   { fprintf(stderr,"Cannot open %s.\n",inf1); return(-1);}
-  fscanf(ip,"%hd%hd",&k,&rno); seeknln();
+  fscanf(ip,"%hd%hd",&k,&rno); seeknln(ip);
   op=fopen(outft,"w");
 /* Now we have read everything in, and the computation can start */
   orno=0;
diff --git a/pkg/cohomolo-1.6.8/standalone/progs.d/nq+chfns.c b/pkg/cohomolo-1.6.8/standalone/progs.d/nq+chfns.c
index a7396b2..658496f 100644
--- a/pkg/cohomolo-1.6.8/standalone/progs.d/nq+chfns.c
+++ b/pkg/cohomolo-1.6.8/standalone/progs.d/nq+chfns.c
@@ -20,8 +20,6 @@ short  mexp=MEXP,mcl=MCL,no,rel[RSP],wt[MEXP],exp,*rpf,*rpb,
 extern short  prime,dim,*spv,**spm,mspace[],*vec[],**mat[],cp[],pinv[],opmats,
         mm,mv;
 extern int msp;
-FILE *ip,*op;
-
 
 int 
 calcmats (void)
@@ -59,7 +57,7 @@ calcmats (void)
   }
   for (i=1;i<=exp;i++) trans(mat[i+exp],mat[i]);
   if (opmats)
-  { op=fopen(outf,"w");
+  { FILE *op=fopen(outf,"w");
     fprintf(op,"%4d%4d%4d\n",prime,dim,exp);
     for (i=1;i<=exp;i++) printmat(mat[i]); 
     fclose(op);
@@ -71,6 +69,7 @@ int
 rdmats (void)
 /* reads matrices of generators of P */
 { short i; int quot;
+  FILE *ip;
   ip=fopen(inf4,"r");
   if (ip==0)
   { fprintf(stderr,"Cannot open %s\n ",inf4); return(-1); }
@@ -90,12 +89,12 @@ rdmats (void)
   fclose(ip);
   return(0);
 }
-FILE *ip;
 
 int 
 ingp (int inp)
 /* Read in output of respcrun -s */
 { short i,j,k,l,m,*orpf,**pcp;
+  FILE *ip;
   ip=fopen(inf3,"r");
   if (ip==0) { fprintf(stderr,"Cannot open %s\n",inf3); return(-1); }
   fscanf(ip,"%hd%hd%hd%hd%hd%hd",&prime,&exp,&i,&no,&j,&m);
diff --git a/pkg/cohomolo-1.6.8/standalone/progs.d/nqmfns.c b/pkg/cohomolo-1.6.8/standalone/progs.d/nqmfns.c
index 0896551..6841bc8 100644
--- a/pkg/cohomolo-1.6.8/standalone/progs.d/nqmfns.c
+++ b/pkg/cohomolo-1.6.8/standalone/progs.d/nqmfns.c
@@ -9,7 +9,6 @@ extern short  intexp,mexp,mng,wksp,
        spugen[],*tlintg[];
 extern int ptrsp,rsp;
 short  fac;
-FILE *ip,*op;
 
 int 
 ingp (void)
@@ -18,6 +17,7 @@ ingp (void)
    of nqrun, and tails are also read in.
 */
 { short i,j,k,l,m,x,y,no,*orpf,*orpb,**pcp;  char tails;
+  FILE *ip;
   if ((ip=fopen(inf1,"r"))==0)
   { fprintf(stderr,"Cannot open %s.\n",inf1); return(-1); }
   fscanf(ip,"%hd%hd%hd%hd%hd%hd",&prime,&exp,&nng,&no,&class,&m);
@@ -89,6 +89,7 @@ int
 outgp (void)
 /* The PCP is output, together with tails */
 { short i,k,l,**pcp,*b,*e,*c;
+  FILE *op;
   op=fopen(outf,"w");
   fprintf(op,"%4d%4d%4d%4d%4d%4d\n",prime,exp,nng,exp,class,1);
   for (i=1;i<=exp;i++) fprintf(op,"%4d",wt[i]); fprintf(op,"\n");
@@ -379,7 +380,7 @@ restart:
     nng--; mnng--; enexpnt--;
     if (nng==0)
     { if (gap)
-      { op=fopen(outfm,"w"); fprintf(op,"COHOMOLO.Multiplier:=[];\n");
+      { FILE *op=fopen(outfm,"w"); fprintf(op,"COHOMOLO.Multiplier:=[];\n");
         fclose(op);
         printf("All new generators eliminated. Multiplier is trivial.\n");
       }
diff --git a/pkg/cohomolo-1.6.8/standalone/progs.d/nqmp.c b/pkg/cohomolo-1.6.8/standalone/progs.d/nqmp.c
index 01cf914..0144883 100644
--- a/pkg/cohomolo-1.6.8/standalone/progs.d/nqmp.c
+++ b/pkg/cohomolo-1.6.8/standalone/progs.d/nqmp.c
@@ -9,7 +9,6 @@ extern short  intexp,mng,mexp,wksp,
        spugen[],*intg[],*imintg[],*tlintg[];
 extern int ptrsp,rsp;
 short  *wf,*wc; char norm;
-FILE *ip,*op;
 
 /* The data structures for this program and for nqrun are similar.
    d1 and d2 contain definitions of generators. (Def. comes from commutator
@@ -35,6 +34,7 @@ nqmprog (void)
 { short i,j,k,l,m,d,*gi,*gj,*ti,*tj,cl,def,*ps,*pf,**dp,*nrpb,*p,*orpf,*orpb,
         nb,np,k1,*rno,*covrel,**pgen,tdef,sgn;
   char nt;
+  FILE *ip,*op;
   if (ingp() == -1) {fprintf(stderr,"Input error.\n"); return(-1); }
   eexpnt=expnt+exp; enexpnt=nexpnt+nng;
 
