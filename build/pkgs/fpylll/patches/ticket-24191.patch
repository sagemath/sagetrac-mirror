Fix broken declarations in the case of no long double support; see
https://trac.sagemath.org/ticket/24191
diff --git a/src/fpylll/fplll/decl.pxd b/src/fpylll/fplll/decl.pxd
index b430a89..88c2611 100644
--- a/src/fpylll/fplll/decl.pxd
+++ b/src/fpylll/fplll/decl.pxd
@@ -396,9 +396,9 @@ ELSE:
             Enumeration[Z_NR[long], FP_NR[mpfr_t]] *long_mpfr
     ELSE:
         ctypedef union enumeration_core_t:
-            Enumeration[FP_NR[d_t]] *d
-            Enumeration[FP_NR[dpe_t]] *dpe
-            Enumeration[FP_NR[mpfr_t]] *mpfr
+            Enumeration[Z_NR[mpz_t], FP_NR[d_t]] *mpz_d
+            Enumeration[Z_NR[mpz_t], FP_NR[dpe_t]] *mpz_dpe
+            Enumeration[Z_NR[mpz_t], FP_NR[mpfr_t]] *mpz_mpfr
             Enumeration[Z_NR[long], FP_NR[d_t]] *long_d
             Enumeration[Z_NR[long], FP_NR[dpe_t]] *long_dpe
             Enumeration[Z_NR[long], FP_NR[mpfr_t]] *long_mpfr
diff --git a/src/fpylll/fplll/enumeration.pyx b/src/fpylll/fplll/enumeration.pyx
index f587405..a3ca8d5 100644
--- a/src/fpylll/fplll/enumeration.pyx
+++ b/src/fpylll/fplll/enumeration.pyx
@@ -24,11 +24,14 @@ from fplll cimport dpe_t
 from fpylll.mpfr.mpfr cimport mpfr_t
 from decl cimport gso_mpz_d, gso_mpz_ld, gso_mpz_dpe, gso_mpz_mpfr, fp_nr_t
 from decl cimport gso_long_d, gso_long_ld, gso_long_dpe, gso_long_mpfr
-from decl cimport d_t, ld_t
+from decl cimport d_t
 from fplll cimport FT_DOUBLE, FT_LONG_DOUBLE, FT_DPE, FT_MPFR, FloatType
 
 from fplll cimport multimap
 
+IF HAVE_LONG_DOUBLE:
+    from decl cimport ld_t
+
 IF HAVE_QD:
     from decl cimport gso_mpz_dd, gso_mpz_qd, gso_long_dd, gso_long_qd, dd_t, qd_t
     from fplll cimport FT_DD, FT_QD
diff --git a/src/fpylll/fplll/gso.pyx b/src/fpylll/fplll/gso.pyx
index e1110d2..c0737a0 100644
--- a/src/fpylll/fplll/gso.pyx
+++ b/src/fpylll/fplll/gso.pyx
@@ -22,7 +22,7 @@ from cysignals.signals cimport sig_on, sig_off
 
 from decl cimport gso_mpz_d, gso_mpz_ld, gso_mpz_dpe, gso_mpz_mpfr, fp_nr_t, zz_mat_core_t
 from decl cimport gso_long_d, gso_long_ld, gso_long_dpe, gso_long_mpfr
-from decl cimport d_t, ld_t
+from decl cimport d_t
 from fplll cimport FT_DOUBLE, FT_LONG_DOUBLE, FT_DPE, FT_MPFR, FloatType
 from fplll cimport ZT_LONG, ZT_MPZ, IntType
 from fplll cimport GSO_DEFAULT
@@ -37,6 +37,9 @@ from fpylll.mpfr.mpfr cimport mpfr_t
 from fpylll.util cimport preprocess_indices, check_float_type
 from integer_matrix cimport IntegerMatrix
 
+IF HAVE_LONG_DOUBLE:
+    from decl cimport ld_t
+
 IF HAVE_QD:
     from decl cimport gso_mpz_dd, gso_mpz_qd, gso_long_dd, gso_long_qd, dd_t, qd_t
     from fplll cimport FT_DD, FT_QD
diff --git a/src/fpylll/fplll/lll.pyx b/src/fpylll/fplll/lll.pyx
index 9e554d8..fe96d74 100644
--- a/src/fpylll/fplll/lll.pyx
+++ b/src/fpylll/fplll/lll.pyx
@@ -31,10 +31,13 @@ from fplll cimport FloatType
 from fpylll.util cimport check_float_type, check_delta, check_eta, check_precision
 from fpylll.util import ReductionError
 
-from decl cimport d_t, ld_t
+from decl cimport d_t
 from decl cimport gso_mpz_d, gso_mpz_ld, gso_mpz_dpe, gso_mpz_mpfr
 from decl cimport gso_long_d, gso_long_ld, gso_long_dpe, gso_long_mpfr
 
+IF HAVE_LONG_DOUBLE:
+    from decl cimport ld_t
+
 IF HAVE_QD:
     from decl cimport gso_mpz_dd, gso_mpz_qd, gso_long_dd, gso_long_qd, dd_t, qd_t
 
@@ -66,7 +69,8 @@ cdef class LLLReduction:
         check_eta(eta)
 
         cdef MatGSO_c[Z_NR[mpz_t], FP_NR[d_t]]  *m_mpz_double
-        cdef MatGSO_c[Z_NR[mpz_t], FP_NR[ld_t]] *m_mpz_ld
+        IF HAVE_LONG_DOUBLE:
+            cdef MatGSO_c[Z_NR[mpz_t], FP_NR[ld_t]] *m_mpz_ld
         cdef MatGSO_c[Z_NR[mpz_t], FP_NR[dpe_t]] *m_mpz_dpe
         IF HAVE_QD:
             cdef MatGSO_c[Z_NR[mpz_t], FP_NR[dd_t]] *m_mpz_dd
@@ -74,7 +78,8 @@ cdef class LLLReduction:
         cdef MatGSO_c[Z_NR[mpz_t], FP_NR[mpfr_t]]  *m_mpz_mpfr
 
         cdef MatGSO_c[Z_NR[long], FP_NR[d_t]]  *m_long_double
-        cdef MatGSO_c[Z_NR[long], FP_NR[ld_t]] *m_long_ld
+        IF HAVE_LONG_DOUBLE:
+            cdef MatGSO_c[Z_NR[long], FP_NR[ld_t]] *m_long_ld
         cdef MatGSO_c[Z_NR[long], FP_NR[dpe_t]] *m_long_dpe
         IF HAVE_QD:
             cdef MatGSO_c[Z_NR[long], FP_NR[dd_t]] *m_long_dd
diff --git a/src/fpylll/fplll/pruner.pyx b/src/fpylll/fplll/pruner.pyx
index 58e5af0..c4569b8 100644
--- a/src/fpylll/fplll/pruner.pyx
+++ b/src/fpylll/fplll/pruner.pyx
@@ -28,8 +28,8 @@ from cysignals.signals cimport sig_on, sig_off
 from cython.operator cimport dereference as deref, preincrement as inc
 
 from decl cimport fp_nr_t, mpz_t, dpe_t, mpfr_t
-from decl cimport nr_d, nr_dpe, nr_mpfr, pruner_core_t, d_t, ld_t
-from fplll cimport FT_DOUBLE, FT_DPE, FT_MPFR, FloatType
+from decl cimport nr_d, nr_dpe, nr_mpfr, pruner_core_t, d_t
+from fplll cimport FT_DOUBLE, FT_LONG_DOUBLE, FT_DPE, FT_MPFR, FloatType
 from fplll cimport PRUNER_METRIC_PROBABILITY_OF_SHORTEST, PRUNER_METRIC_EXPECTED_SOLUTIONS
 from fplll cimport FP_NR, Z_NR
 from fplll cimport MatGSO as MatGSO_c
@@ -45,12 +45,9 @@ from fpylll.util import adjust_radius_to_gh_bound, precision, get_precision
 from fpylll.util cimport check_float_type, check_precision, check_pruner_metric
 
 IF HAVE_LONG_DOUBLE:
-    from fplll cimport FT_LONG_DOUBLE
-    from decl cimport gso_mpz_ld
-    from decl cimport nr_ld
+    from decl cimport nr_ld, ld_t
 
 IF HAVE_QD:
-    from decl cimport gso_mpz_dd, gso_mpz_qd
     from decl cimport nr_dd, nr_qd, dd_t, qd_t
     from fplll cimport FT_DD, FT_QD
 
