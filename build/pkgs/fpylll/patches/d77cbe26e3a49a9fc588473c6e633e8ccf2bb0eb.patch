From d77cbe26e3a49a9fc588473c6e633e8ccf2bb0eb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Chapoton?= <fchapoton2@gmail.com>
Date: Fri, 24 Feb 2017 13:55:40 +0100
Subject: [PATCH] ascii only, for python3 compatibility

remove 4 non-ascii characters, that broke the build with python3 in sage
---
 README.rst | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/README.rst b/README.rst
index 3a7f6d8..0d67b3b 100644
--- a/README.rst
+++ b/README.rst
@@ -70,7 +70,7 @@ We recommend `virtualenv <https://virtualenv.readthedocs.org/>`__ for isolating
 
    We indicate active virtualenvs by the prefix ``(fpylll)``.
 
-2. Install the required libraries – `GMP <https://gmplib.org>`__ or `MPIR <http://mpir.org>`__ and `MPFR <http://www.mpfr.org>`__  – if not available already. You may also want to install `QD <http://crd-legacy.lbl.gov/~dhbailey/mpdist/>`__.
+2. Install the required libraries - `GMP <https://gmplib.org>`__ or `MPIR <http://mpir.org>`__ and `MPFR <http://www.mpfr.org>`__  - if not available already. You may also want to install `QD <http://crd-legacy.lbl.gov/~dhbailey/mpdist/>`__.
 
 3. Install fplll:
 
@@ -164,7 +164,7 @@ in the ``deactivate`` function in the ``activate`` script.
 Multicore Support
 -----------------
 
-**fpylll** supports parallelisation on multiple cores. For all C++ support to drop the `GIL <https://wiki.python.org/moin/GlobalInterpreterLock>`_ is enabled, allowing the use of threads to parallelise. Note, however, that because fplll’s enumeration is not thread safe, we using `locks <https://docs.python.org/2/library/threading.html#lock-objects>`_ to enforce only one thread calls it at any one point. Also, **fpylll** does not actually drop the GIL in all calls to C++ functions yet. In many scenarios using `multiprocessing <https://docs.python.org/2/library/multiprocessing.html>`_, which sidesteps the GIL and thread safety issues by using processes instead of threads, will be the better choice.
+**fpylll** supports parallelisation on multiple cores. For all C++ support to drop the `GIL <https://wiki.python.org/moin/GlobalInterpreterLock>`_ is enabled, allowing the use of threads to parallelise. Note, however, that because fplll's enumeration is not thread safe, we using `locks <https://docs.python.org/2/library/threading.html#lock-objects>`_ to enforce only one thread calls it at any one point. Also, **fpylll** does not actually drop the GIL in all calls to C++ functions yet. In many scenarios using `multiprocessing <https://docs.python.org/2/library/multiprocessing.html>`_, which sidesteps the GIL and thread safety issues by using processes instead of threads, will be the better choice.
 
 The example below calls ``LLL.reduction`` on 128 matrices of dimension 30 on four worker processes.
 
@@ -216,6 +216,6 @@ The following people have contributed to **fpylll**
 - Leo Ducas
 - Omer Katz
 
-We copied a decent bit of code over from Sage, mostly from it’s fpLLL interface.
+We copied a decent bit of code over from Sage, mostly from it's fpLLL interface.
 
 **fpylll** is licensed under the GPLv2+.  
