commit 3446e6d160c2804d6cd8709099a281011207cd29
Author: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date:   Wed Dec 9 15:12:38 2015 +0100

     #304: Read more bytes in read_nonblocking()

diff --git a/pexpect/pty_spawn.py b/pexpect/pty_spawn.py
index 299016c..c800c7f 100644
--- a/pexpect/pty_spawn.py
+++ b/pexpect/pty_spawn.py
@@ -415,14 +415,36 @@ class spawn(SpawnBase):
         available right away then one character will be returned immediately.
         It will not wait for 30 seconds for another 99 characters to come in.
 
+        On the other hand, if there are bytes available to read immediately,
+        all those bytes will be read (up to the buffer size). So, if the
+        buffer size is 1 megabyte and there is 1 megabyte of data available
+        to read, the buffer will be filled, regardless of timeout.
+
         This is a wrapper around os.read(). It uses select.select() to
         implement the timeout. '''
 
         if self.closed:
             raise ValueError('I/O operation on closed file.')
 
-        if timeout == -1:
-            timeout = self.timeout
+        # If there is data available to read right now, read as much as
+        # we can. We do this to increase performance if there are a lot
+        # of bytes to be read. This also avoids calling isalive() too
+        # often. See also:
+        # * https://github.com/pexpect/pexpect/pull/304
+        # * http://trac.sagemath.org/ticket/10295
+        r, w, e = self.__select([self.child_fd], [], [], 0)
+        if r:
+            incoming = super(spawn, self).read_nonblocking(size)
+            while len(incoming) < size:
+                r, w, e = self.__select([self.child_fd], [], [], 0)
+                if not r:
+                    break
+                try:
+                    incoming += super(spawn, self).read_nonblocking(size - len(incoming))
+                except EOF:
+                    # Ignore EOF, just return the bytes we got so far.
+                    break
+            return incoming
 
         # Note that some systems such as Solaris do not give an EOF when
         # the child dies. In fact, you can still try to read
@@ -430,11 +452,7 @@ class spawn(SpawnBase):
         # For this case, I test isalive() before doing any reading.
         # If isalive() is false, then I pretend that this is the same as EOF.
         if not self.isalive():
-            # timeout of 0 means "poll"
-            r, w, e = self.__select([self.child_fd], [], [], 0)
-            if not r:
-                self.flag_eof = True
-                raise EOF('End Of File (EOF). Braindead platform.')
+            raise EOF('End Of File (EOF). Braindead platform.')
         elif self.__irix_hack:
             # Irix takes a long time before it realizes a child was terminated.
             # FIXME So does this mean Irix systems are forced to always have
@@ -444,7 +462,13 @@ class spawn(SpawnBase):
                 self.flag_eof = True
                 raise EOF('End Of File (EOF). Slow platform.')
 
-        r, w, e = self.__select([self.child_fd], [], [], timeout)
+        # Wait with timeout until data is available to read.
+        # Since we already called select() with timeout=0, we don't
+        # do that again if timeout == 0.
+        if timeout == -1:
+            timeout = self.timeout
+        if timeout != 0:
+            r, w, e = self.__select([self.child_fd], [], [], timeout)
 
         if not r:
             if not self.isalive():
@@ -456,10 +480,7 @@ class spawn(SpawnBase):
             else:
                 raise TIMEOUT('Timeout exceeded.')
 
-        if self.child_fd in r:
-            return super(spawn, self).read_nonblocking(size)
-
-        raise ExceptionPexpect('Reached an unexpected state.')  # pragma: no cover
+        return super(spawn, self).read_nonblocking(size)
 
     def write(self, s):
         '''This is similar to send() except that there is no return value.
