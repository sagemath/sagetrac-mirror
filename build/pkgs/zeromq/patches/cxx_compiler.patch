Compile C++ files with a C++ compiler.

This includes autogenerated changes due to autoreconfiguration of the build system.
diff -druN zeromq-4.0.5.old/tools/curve_keygen.c zeromq-4.0.5.new/tools/curve_keygen.c
--- zeromq-4.0.5.old/tools/curve_keygen.c	2013-11-13 09:57:50.000000000 -0800
+++ zeromq-4.0.5.new/tools/curve_keygen.c	1969-12-31 16:00:00.000000000 -0800
@@ -1,58 +0,0 @@
-/*
-    Copyright (c) 2007-2013 Contributors as noted in the AUTHORS file
-
-    This file is part of 0MQ.
-
-    This tool generates a CurveZMQ keypair, as two printable strings you can 
-    use in configuration files or source code. The encoding uses Z85, which 
-    is a base-85 format that is described in 0MQ RFC 32, and which has an 
-    implementation in the z85_codec.h source used by this tool. The keypair 
-    always works with the secret key held by one party and the public key 
-    distributed (securely!) to peers wishing to connect to it.
-
-    0MQ is free software; you can redistribute it and/or modify it under
-    the terms of the GNU Lesser General Public License as published by
-    the Free Software Foundation; either version 3 of the License, or
-    (at your option) any later version.
-
-    0MQ is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU Lesser General Public License for more details.
-
-    You should have received a copy of the GNU Lesser General Public License
-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include <assert.h>
-#include <platform.hpp>
-#include <zmq.h>
-#include <zmq_utils.h>
-
-int main (void)
-{
-    puts ("This tool generates a CurveZMQ keypair, as two printable strings you can");
-    puts ("use in configuration files or source code. The encoding uses Z85, which");
-    puts ("is a base-85 format that is described in 0MQ RFC 32, and which has an");
-    puts ("implementation in the z85_codec.h source used by this tool. The keypair");
-    puts ("always works with the secret key held by one party and the public key");
-    puts ("distributed (securely!) to peers wishing to connect to it.");
-
-    char public_key [41];
-    char secret_key [41];
-    int rc = zmq_curve_keypair (public_key, secret_key);
-    if (rc != 0) {
-      if (zmq_errno () == ENOTSUP) {
-          puts ("To use curve_keygen, please install libsodium and then rebuild libzmq.");
-      }
-      exit (1);
-    }
-
-    puts ("\n== CURVE PUBLIC KEY ==");
-    puts (public_key);
-    
-    puts ("\n== CURVE SECRET KEY ==");
-    puts (secret_key);
-
-    exit (0);
-}
diff -druN zeromq-4.0.5.old/tools/curve_keygen.cpp zeromq-4.0.5.new/tools/curve_keygen.cpp
--- zeromq-4.0.5.old/tools/curve_keygen.cpp	1969-12-31 16:00:00.000000000 -0800
+++ zeromq-4.0.5.new/tools/curve_keygen.cpp	2014-11-24 07:21:08.389820140 -0800
@@ -0,0 +1,58 @@
+/*
+    Copyright (c) 2007-2013 Contributors as noted in the AUTHORS file
+
+    This file is part of 0MQ.
+
+    This tool generates a CurveZMQ keypair, as two printable strings you can 
+    use in configuration files or source code. The encoding uses Z85, which 
+    is a base-85 format that is described in 0MQ RFC 32, and which has an 
+    implementation in the z85_codec.h source used by this tool. The keypair 
+    always works with the secret key held by one party and the public key 
+    distributed (securely!) to peers wishing to connect to it.
+
+    0MQ is free software; you can redistribute it and/or modify it under
+    the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+
+    0MQ is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include <assert.h>
+#include <platform.hpp>
+#include <zmq.h>
+#include <zmq_utils.h>
+
+int main (void)
+{
+    puts ("This tool generates a CurveZMQ keypair, as two printable strings you can");
+    puts ("use in configuration files or source code. The encoding uses Z85, which");
+    puts ("is a base-85 format that is described in 0MQ RFC 32, and which has an");
+    puts ("implementation in the z85_codec.h source used by this tool. The keypair");
+    puts ("always works with the secret key held by one party and the public key");
+    puts ("distributed (securely!) to peers wishing to connect to it.");
+
+    char public_key [41];
+    char secret_key [41];
+    int rc = zmq_curve_keypair (public_key, secret_key);
+    if (rc != 0) {
+      if (zmq_errno () == ENOTSUP) {
+          puts ("To use curve_keygen, please install libsodium and then rebuild libzmq.");
+      }
+      exit (1);
+    }
+
+    puts ("\n== CURVE PUBLIC KEY ==");
+    puts (public_key);
+    
+    puts ("\n== CURVE SECRET KEY ==");
+    puts (secret_key);
+
+    exit (0);
+}
diff -druN zeromq-4.0.5.old/tools/Makefile.am zeromq-4.0.5.new/tools/Makefile.am
--- zeromq-4.0.5.old/tools/Makefile.am	2013-11-13 09:57:50.000000000 -0800
+++ zeromq-4.0.5.new/tools/Makefile.am	2014-11-24 07:21:08.389820140 -0800
@@ -1,9 +1,9 @@
-EXTRA_DIST = curve_keygen.c 
+EXTRA_DIST = curve_keygen.cpp
 
 INCLUDES = -I$(top_srcdir)/include
 
 bin_PROGRAMS = curve_keygen
 
 curve_keygen_LDADD = $(top_builddir)/src/libzmq.la
-curve_keygen_SOURCES = curve_keygen.c
+curve_keygen_SOURCES = curve_keygen.cpp
 
diff -druN zeromq-4.0.5.old/tools/Makefile.in zeromq-4.0.5.new/tools/Makefile.in
--- zeromq-4.0.5.old/tools/Makefile.in	2014-10-14 01:07:38.000000000 -0700
+++ zeromq-4.0.5.new/tools/Makefile.in	2014-11-24 07:21:35.289859019 -0800
@@ -62,25 +62,25 @@
 depcomp = $(SHELL) $(top_srcdir)/config/depcomp
 am__depfiles_maybe = depfiles
 am__mv = mv -f
-COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
-	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
-LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
-	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
 	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
-	$(AM_CFLAGS) $(CFLAGS)
-AM_V_CC = $(am__v_CC_@AM_V@)
-am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
-am__v_CC_0 = @echo "  CC    " $@;
+	$(AM_CXXFLAGS) $(CXXFLAGS)
+AM_V_CXX = $(am__v_CXX_@AM_V@)
+am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
+am__v_CXX_0 = @echo "  CXX   " $@;
 AM_V_at = $(am__v_at_@AM_V@)
 am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
 am__v_at_0 = @
-CCLD = $(CC)
-LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
-	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
-	$(AM_LDFLAGS) $(LDFLAGS) -o $@
-AM_V_CCLD = $(am__v_CCLD_@AM_V@)
-am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
-am__v_CCLD_0 = @echo "  CCLD  " $@;
+CXXLD = $(CXX)
+CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
+	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
+AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
+am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
+am__v_CXXLD_0 = @echo "  CXXLD " $@;
 AM_V_GEN = $(am__v_GEN_@AM_V@)
 am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
 am__v_GEN_0 = @echo "  GEN   " $@;
@@ -226,14 +221,14 @@
 top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
-EXTRA_DIST = curve_keygen.c 
+EXTRA_DIST = curve_keygen.cpp
 INCLUDES = -I$(top_srcdir)/include
 curve_keygen_LDADD = $(top_builddir)/src/libzmq.la
-curve_keygen_SOURCES = curve_keygen.c
+curve_keygen_SOURCES = curve_keygen.cpp
 all: all-am
 
 .SUFFIXES:
-.SUFFIXES: .c .lo .o .obj
+.SUFFIXES: .cpp .lo .o .obj
 $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
 	@for dep in $?; do \
 	  case '$(am__configure_deps)' in \
@@ -309,7 +304,7 @@
 	rm -f $$list
 curve_keygen$(EXEEXT): $(curve_keygen_OBJECTS) $(curve_keygen_DEPENDENCIES) $(EXTRA_curve_keygen_DEPENDENCIES) 
 	@rm -f curve_keygen$(EXEEXT)
-	$(AM_V_CCLD)$(LINK) $(curve_keygen_OBJECTS) $(curve_keygen_LDADD) $(LIBS)
+	$(AM_V_CXXLD)$(CXXLINK) $(curve_keygen_OBJECTS) $(curve_keygen_LDADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
@@ -319,26 +314,26 @@
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/curve_keygen.Po@am__quote@
 
-.c.o:
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c $<
+.cpp.o:
+@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<
 
-.c.obj:
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c `$(CYGPATH_W) '$<'`
+.cpp.obj:
+@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
 
-.c.lo:
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<
+.cpp.lo:
+@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<
 
 mostlyclean-libtool:
 	-rm -f *.lo
