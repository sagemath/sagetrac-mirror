--- a/include/gc.h	2012-08-09 16:25:13.000000000 -0400
+++ b/include/gc.h	2013-04-22 13:10:01.101686000 -0400
@@ -1385,7 +1385,14 @@
 /* THREAD_LOCAL_ALLOC defined and the initial allocation call is not    */
 /* to GC_malloc() or GC_malloc_atomic().                                */
 
-#ifdef __CYGWIN32__
+#ifdef __CYGWIN__
+#ifdef __x86_64__
+  extern int __data_start__[], __data_end__[], __bss_start__[], __bss_end__[];
+#define GC_DATASTART (__data_start__ < __bss_start__ ?\
+                      (void *)__data_start__ : (void *)__bss_start__)
+#define GC_DATAEND (__data_end__ < __bss_end__ ?\
+                      (void *)__data_end__ : (void *)__bss_end__)
+#else
   /* Similarly gnu-win32 DLLs need explicit initialization from the     */
   /* main program, as does AIX.                                         */
   extern int _data_start__[], _data_end__[], _bss_start__[], _bss_end__[];
@@ -1393,6 +1400,7 @@
                        (void *)_data_start__ : (void *)_bss_start__)
 # define GC_DATAEND (_data_end__ > _bss_end__ ? \
                      (void *)_data_end__ : (void *)_bss_end__)
+#endif
 # define GC_INIT_CONF_ROOTS GC_add_roots(GC_DATASTART, GC_DATAEND); \
                                  GC_gcollect() /* For blacklisting. */
         /* Required at least if GC is in a DLL.  And doesn't hurt. */
--- a/include/private/gcconfig.h	2012-08-09 16:25:13.000000000 -0400
+++ b/include/private/gcconfig.h	2013-04-21 12:52:28.024399600 -0400
@@ -432,10 +432,20 @@
 #   endif
 #   define mach_type_known
 # endif
-# if defined(__CYGWIN32__) || defined(__CYGWIN__)
+# if defined(__CYGWIN32__)
 #   define I386
 #   define CYGWIN32
 #   define mach_type_known
+#if defined(__CYGWIN__)
+#  if defined(__LP64__)
+#    define X86_64
+#    define mach_type_known
+#  else
+#    define I386
+#  endif
+#  define CYGWIN32
+#  define mach_type_known
+#endif
 # endif
 # if defined(__MINGW32__) && !defined(mach_type_known)
 #   define I386
@@ -502,6 +512,16 @@
 #    define mach_type_known
 # endif
 
+#if defined(__CYGWIN__)
+#  if defined(__LP64__)
+#    define X86_64
+#    define mach_type_known
+#  else
+#    define I386
+#  endif
+#  define CYGWIN32
+#  define mach_type_known
+#endif
 /* Feel free to add more clauses here */
 
 /* Or manually define the machine type here.  A machine type is         */
@@ -2259,6 +2279,19 @@
 #       define GWW_VDB
 #       define DATAEND  /* not needed */
 #   endif
+
+#   ifdef CYGWIN32
+#       define OS_TYPE "CYGWIN32"
+#       define DATASTART ((ptr_t)GC_DATASTART)  /* From gc.h */
+#       define DATAEND   ((ptr_t)GC_DATAEND)
+#       define ALIGNMENT 8
+#       undef STACK_GRAN
+#       define STACK_GRAN 0x10000
+#       ifdef USE_MMAP
+#         define NEED_FIND_LIMIT
+#         define USE_MMAP_ANON
+#       endif
+#   endif
 # endif /* X86_64 */
 
 # ifdef HEXAGON
--- a/os_dep.c	2014-06-01 19:00:48.000000000 +0200
+++ b/os_dep.c	2015-12-15 15:22:08.236909098 +0100
@@ -765,9 +765,13 @@
     GC_API int GC_CALL GC_get_stack_base(struct GC_stack_base *sb)
     {
       void * _tlsbase;
-
+#ifdef __x86_64__
+      PNT_TIB pTib = NtCurrentTeb();
+      _tlsbase = pTib->StackBase;
+#else
       __asm__ ("movl %%fs:4, %0"
                : "=r" (_tlsbase));
+#endif
       sb -> mem_base = _tlsbase;
       return GC_SUCCESS;
     }
