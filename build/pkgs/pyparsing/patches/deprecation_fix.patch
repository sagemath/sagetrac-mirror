--- a/pyparsing.py	2013-07-17 10:08:10.000000000 +0100
+++ b/pyparsing.py	2014-03-30 12:56:57.746032995 +0100
@@ -2823,12 +2823,12 @@
 
        Note: take care when assigning to C{Forward} not to overlook precedence of operators.
        Specifically, '|' has a lower precedence than '<<', so that::
-          fwdExpr << a | b | c
+          fwdExpr <<= a | b | c
        will actually be evaluated as::
-          (fwdExpr << a) | b | c
+          (fwdExpr <<= a) | b | c
        thereby leaving b and c out as parseable alternatives.  It is recommended that you
        explicitly group the values inserted into the C{Forward}::
-          fwdExpr << (a | b | c)
+          fwdExpr <<= (a | b | c)
        Converting to use the '<<=' operator instead will avoid this problem.
     """
     def __init__( self, other=None ):
@@ -2892,7 +2895,7 @@
             return super(Forward,self).copy()
         else:
             ret = Forward()
-            ret << self
+            ret <<= self
             return ret
 
 class _ForwardNoRecurse(Forward):
@@ -3063,7 +3066,7 @@
     arrayExpr = Forward()
     def countFieldParseAction(s,l,t):
         n = t[0]
-        arrayExpr << (n and Group(And([expr]*n)) or Group(empty))
+        arrayExpr <<= (n and Group(And([expr]*n)) or Group(empty))
         return []
     if intExpr is None:
         intExpr = Word(nums).setParseAction(lambda t:int(t[0]))
@@ -3098,13 +3101,13 @@
     def copyTokenToRepeater(s,l,t):
         if t:
             if len(t) == 1:
-                rep << t[0]
+                rep <<= t[0]
             else:
                 # flatten t tokens
                 tflat = _flatten(t.asList())
-                rep << And( [ Literal(tt) for tt in tflat ] )
+                rep <<= And( [ Literal(tt) for tt in tflat ] )
         else:
-            rep << Empty()
+            rep <<= Empty()
     expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
     return rep
 
@@ -3123,7 +3126,7 @@
     """
     rep = Forward()
     e2 = expr.copy()
-    rep << e2
+    rep <<= e2
     def copyTokenToRepeater(s,l,t):
         matchTokens = _flatten(t.asList())
         def mustMatchTheseTokens(s,l,t):
@@ -3485,9 +3488,9 @@
             raise ValueError("operator must indicate right or left associativity")
         if pa:
             matchExpr.setParseAction( pa )
-        thisExpr << ( matchExpr | lastExpr )
+        thisExpr <<= ( matchExpr | lastExpr )
         lastExpr = thisExpr
-    ret << lastExpr
+    ret <<= lastExpr
     return ret
 operatorPrecedence = infixNotation
 
@@ -3543,9 +3546,9 @@
             raise ValueError("opening and closing arguments must be strings if no content expression is given")
     ret = Forward()
     if ignoreExpr is not None:
-        ret << Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
+        ret <<= Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
     else:
-        ret << Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
+        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
     return ret
 
 def indentedBlock(blockStatementExpr, indentStack, indent=True):
