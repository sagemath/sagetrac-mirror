commit d30916740f09b76f2f4ffc0e3e3b165b475ba032
Author: Sylvain Corlay <sylvain.corlay@gmail.com>
Date:   Fri May 20 17:18:52 2016 +0200

    Remove deprecated code to support old abbreviations

diff --git a/ipywidgets/widgets/interaction.py b/ipywidgets/widgets/interaction.py
index 2b68317..a58e3e6 100644
--- a/ipywidgets/widgets/interaction.py
+++ b/ipywidgets/widgets/interaction.py
@@ -86,24 +86,9 @@ def _widget_abbrev_single_value(o):
 def _widget_abbrev(o):
     """Make widgets from abbreviations: single values, lists or tuples."""
     if isinstance(o, list):
-        # --------------------------------------------------------------------
-        # Handle deprecated behavior of using lists of length 2 or 3 in place
-        # of tuples to specify slider widget attributes. This will be removed
-        # in ipywidgets 6.0.
-        if len(o) in [2, 3] and all(isinstance(x, Real) for x in o):
-            warn("For Sliders, use a tuple: %s" % (tuple(o),), DeprecationWarning)
-            return _widget_abbrev(tuple(o))
-        # --------------------------------------------------------------------
         return Dropdown(options=[unicode_type(k) for k in o])
 
     elif isinstance(o, tuple):
-        # --------------------------------------------------------------------
-        # Handle deprecated behavior of using tuples for selection widget. This
-        # will be removed in ipywidgets 6.0.
-        if any(not isinstance(x, Real) for x in o):
-            warn("For Selection widgets, use a list %s" %(list(o),), DeprecationWarning)
-            return Dropdown(options=[unicode_type(k) for k in o])
-        # --------------------------------------------------------------------
         if _matches(o, (Real, Real)):
             min, max, value = _get_min_max_value(o[0], o[1])
             if all(isinstance(_, Integral) for _ in o):
diff --git a/ipywidgets/widgets/tests/test_interaction.py b/ipywidgets/widgets/tests/test_interaction.py
index 5616cfc..0685aae 100644
--- a/ipywidgets/widgets/tests/test_interaction.py
+++ b/ipywidgets/widgets/tests/test_interaction.py
@@ -154,87 +154,17 @@ def test_single_value_int():
             readout=True,
         )
 
-def test_list_tuple_2_int():
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,1))
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,-1))
-    for min, max in [ (0,1), (1,10), (1,2), (-5,5), (-20,-19) ]:
-        c = interactive(f, tup=(min, max), lis=[min, max])
-        nt.assert_equal(len(c.children), 2)
-        d = dict(
-            cls=widgets.IntSlider,
-            min=min,
-            max=max,
-            step=1,
-            readout=True,
-        )
-        check_widgets(c, tup=d, lis=d)
-
-def test_list_tuple_3_int():
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,2,0))
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,2,-1))
-    for min, max, step in [ (0,2,1), (1,10,2), (1,100,2), (-5,5,4), (-100,-20,4) ]:
-        c = interactive(f, tup=(min, max, step), lis=[min, max, step])
-        nt.assert_equal(len(c.children), 2)
-        d = dict(
-            cls=widgets.IntSlider,
-            min=min,
-            max=max,
-            step=step,
-            readout=True,
-        )
-        check_widgets(c, tup=d, lis=d)
-
-def test_list_tuple_2_float():
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1.0,1.0))
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(0.5,-0.5))
-    for min, max in [ (0.5, 1.5), (1.1,10.2), (1,2.2), (-5.,5), (-20,-19.) ]:
-        c = interactive(f, tup=(min, max), lis=[min, max])
-        nt.assert_equal(len(c.children), 2)
-        d = dict(
-            cls=widgets.FloatSlider,
-            min=min,
-            max=max,
-            step=.1,
-            readout=True,
-        )
-        check_widgets(c, tup=d, lis=d)
-
-def test_list_tuple_3_float():
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,2,0.0))
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(-1,-2,1.))
-    with nt.assert_raises(ValueError):
-        c = interactive(f, tup=(1,2.,-1.))
-    for min, max, step in [ (0.,2,1), (1,10.,2), (1,100,2.), (-5.,5.,4), (-100,-20.,4.) ]:
-        c = interactive(f, tup=(min, max, step), lis=[min, max, step])
-        nt.assert_equal(len(c.children), 2)
-        d = dict(
-            cls=widgets.FloatSlider,
-            min=min,
-            max=max,
-            step=step,
-            readout=True,
-        )
-        check_widgets(c, tup=d, lis=d)
-
 def test_list_tuple_str():
     values = ['hello', 'there', 'guy']
     first = values[0]
-    c = interactive(f, tup=tuple(values), lis=list(values))
-    nt.assert_equal(len(c.children), 2)
+    c = interactive(f, lis=list(values))
+    nt.assert_equal(len(c.children), 1)
     d = dict(
         cls=widgets.Dropdown,
         value=first,
         options=values
     )
-    check_widgets(c, tup=d, lis=d)
+    check_widgets(c, lis=d)
 
 def test_list_tuple_invalid():
     for bad in [
