Modify tools.c and tools.h to provide an error callback framework
(SetErrorCallbackFunction).

NTL provides its own error callback framework, but it's not suitable
for Sage since we don't want to see the error message printed, we want
the error message to be part of the callback function.
--- ntl.orig/src/tools.c	2014-08-27 05:51:42.000000000 +1200
+++ ntl/src/tools.c	2014-10-09 22:02:59.679703796 +1300
@@ -18,8 +18,35 @@
 NTL_THREAD_LOCAL void (*ErrorCallback)() = 0;
 
 
+/*
+   The following code differs from vanilla NTL.
+
+   We add a SetErrorCallbackFunction(). This sets a global callback function _function_,
+   which gets called with parameter _context_ and an error message string whenever Error()
+   gets called.
+
+   Note that if the custom error handler *returns*, then NTL will dump the error message
+   back to stderr and abort() as it habitually does.
+
+   -- David Harvey (2008-04-12)
+*/
+
+void (*ErrorCallbackFunction)(const char*, void*) = NULL;
+void *ErrorCallbackContext = NULL;
+
+
+void SetErrorCallbackFunction(void (*function)(const char*, void*), void *context)
+{
+   ErrorCallbackFunction = function;
+   ErrorCallbackContext = context;
+}
+
+
 void TerminalError(const char *s)
 {
+   if (ErrorCallbackFunction != NULL)
+      ErrorCallbackFunction(s, ErrorCallbackContext);
+
    cerr << s << "\n";
    _ntl_abort();
 }
--- ntl.orig/include/NTL/tools.h	2014-08-27 05:51:43.000000000 +1200
+++ ntl/include/NTL/tools.h	2014-10-09 22:02:59.679703796 +1300
@@ -10,6 +10,7 @@
 
 #include <cstdlib>
 #include <cmath>
+#include <cstdio>
 
 
 
@@ -487,6 +488,12 @@
 
 
 NTL_THREAD_LOCAL extern void (*ErrorCallback)();
+
+/*
+  This function is not present in vanilla NTL.
+  See tools.c for documentation.
+ */
+void SetErrorCallbackFunction(void (*func)(const char *s, void *context), void *context);
 
 void TerminalError(const char *s);
 
