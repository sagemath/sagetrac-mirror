--- ntl.orig/src/tools.c	2014-08-27 05:51:42.000000000 +1200
+++ ntl/src/tools.c	2014-10-09 22:02:59.679703796 +1300
@@ -18,8 +18,35 @@
 NTL_THREAD_LOCAL void (*ErrorCallback)() = 0;
 
 
+/*
+   The following code differs from vanilla NTL.
+
+   We add a SetErrorCallbackFunction(). This sets a global callback function _function_,
+   which gets called with parameter _context_ and an error message string whenever Error()
+   gets called.
+
+   Note that if the custom error handler *returns*, then NTL will dump the error message
+   back to stderr and abort() as it habitually does.
+
+   -- David Harvey (2008-04-12)
+*/
+
+void (*ErrorCallbackFunction)(const char*, void*) = NULL;
+void *ErrorCallbackContext = NULL;
+
+
+void SetErrorCallbackFunction(void (*function)(const char*, void*), void *context)
+{
+   ErrorCallbackFunction = function;
+   ErrorCallbackContext = context;
+}
+
+
 void Error(const char *s)
 {
+   if (ErrorCallbackFunction != NULL)
+      ErrorCallbackFunction(s, ErrorCallbackContext);
+
    cerr << s << "\n";
    _ntl_abort();
 }
--- ntl.orig/include/NTL/tools.h	2014-08-27 05:51:43.000000000 +1200
+++ ntl/include/NTL/tools.h	2014-10-09 22:02:59.679703796 +1300
@@ -10,6 +10,7 @@
 
 #include <cstdlib>
 #include <cmath>
+#include <cstdio>
 #include <iostream>
 
 #else
@@ -310,6 +311,12 @@
 char IntValToChar(long a);
 
 
+/*
+  This function is not present in vanilla NTL.
+  See tools.c for documentation.
+ */
+void SetErrorCallbackFunction(void (*func)(const char *s, void *context), void *context);
+
 
 void Error(const char *s);
 
