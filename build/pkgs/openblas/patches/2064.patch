Fixes memory leak in Cygwin that occurs when repeatedly shutting down
and re-intializing the the thread pool, e.g. when forking the process.
See https://trac.sagemath.org/ticket/27509

From 4ad694eda1ff79040778648d44cda5b8f774c38d Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Mon, 18 Mar 2019 20:32:48 +0100
Subject: [PATCH 1/2] Fix for #2063: The DllMain used in Cygwin did not run the
 thread memory pool cleanup upon THREAD_DETACH which is needed when compiled
 with USE_TLS=1.

---
 driver/others/memory.c | 11 +++++++++--
 exports/dllinit.c      | 24 +++++++++++++++++-------
 2 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/driver/others/memory.c b/driver/others/memory.c
index ed407a858..ac8545f35 100644
--- a/driver/others/memory.c
+++ b/driver/others/memory.c
@@ -1313,6 +1313,13 @@ void blas_memory_free_nolock(void * map_address) {
   free(map_address);
 }
 
+#ifdef SMP
+void blas_thread_memory_cleanup(void) {
+    blas_memory_cleanup((void*)get_memory_table());
+}
+#endif
+
+
 void blas_shutdown(void){
 #ifdef SMP
   BLASFUNC(blas_thread_shutdown)();
@@ -1322,7 +1329,7 @@ void blas_shutdown(void){
   /* Only cleanupIf we were built for threading and TLS was initialized */
   if (local_storage_key)
 #endif
-    blas_memory_cleanup((void*)get_memory_table());
+    blas_thread_memory_cleanup();
 
 #ifdef SEEK_ADDRESS
   base_address      = 0UL;
@@ -1552,7 +1559,7 @@ BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReser
       break;
     case DLL_THREAD_DETACH:
 #if defined(SMP)
-      blas_memory_cleanup((void*)get_memory_table());
+      blas_thread_memory_cleanup();
 #endif
       break;
     case DLL_PROCESS_DETACH:
diff --git a/exports/dllinit.c b/exports/dllinit.c
index 02ff092e9..0e1bb34e3 100644
--- a/exports/dllinit.c
+++ b/exports/dllinit.c
@@ -40,15 +40,25 @@
 
 void gotoblas_init(void);
 void gotoblas_quit(void);
+#if defined(SMP) && defined(USE_TLS)
+void blas_thread_memory_cleanup(void);
+#endif
 
 BOOL APIENTRY DllMain(HINSTANCE hInst, DWORD reason, LPVOID reserved) {
-
-  if (reason == DLL_PROCESS_ATTACH) {
-    gotoblas_init();
-  }
-
-  if (reason == DLL_PROCESS_DETACH) {
-    gotoblas_quit();
+  switch(reason) {
+      case DLL_PROCESS_ATTACH:
+        gotoblas_init();
+        break;
+      case DLL_PROCESS_DETACH:
+        gotoblas_quit();
+        break;
+      case DLL_THREAD_ATTACH:
+        break;
+      case DLL_THREAD_DETACH:
+#if defined(SMP) && defined(USE_TLS)
+        blas_thread_memory_cleanup(void);
+#endif
+        break;
   }
 
   return TRUE;

From 8ba9e2a61a1cf34e9b2efc5af61f5ebaaf6ab902 Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Tue, 19 Mar 2019 10:22:02 +0100
Subject: [PATCH 2/2] Also call CloseHandle on each thread, as well as on the
 event so as to not leak thread handles.

---
 driver/others/blas_server_win32.c | 5 +++++
 exports/dllinit.c                 | 2 +-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/driver/others/blas_server_win32.c b/driver/others/blas_server_win32.c
index bae344c59..0b38ee365 100644
--- a/driver/others/blas_server_win32.c
+++ b/driver/others/blas_server_win32.c
@@ -461,13 +461,18 @@ int BLASFUNC(blas_thread_shutdown)(void){
     SetEvent(pool.killed);
 
     for(i = 0; i < blas_num_threads - 1; i++){
+      // Could also just use WaitForMultipleObjects
       WaitForSingleObject(blas_threads[i], 5);  //INFINITE);
 #ifndef OS_WINDOWSSTORE
 // TerminateThread is only available with WINAPI_DESKTOP and WINAPI_SYSTEM not WINAPI_APP in UWP
       TerminateThread(blas_threads[i],0);
 #endif
+      CloseHandle(blas_threads[i]);
     }
 
+    CloseHandle(pool.filled);
+    CloseHandle(pool.killed);
+
     blas_server_avail = 0;
   }
 
diff --git a/exports/dllinit.c b/exports/dllinit.c
index 0e1bb34e3..4a05c0e14 100644
--- a/exports/dllinit.c
+++ b/exports/dllinit.c
@@ -56,7 +56,7 @@ BOOL APIENTRY DllMain(HINSTANCE hInst, DWORD reason, LPVOID reserved) {
         break;
       case DLL_THREAD_DETACH:
 #if defined(SMP) && defined(USE_TLS)
-        blas_thread_memory_cleanup(void);
+        blas_thread_memory_cleanup();
 #endif
         break;
   }
