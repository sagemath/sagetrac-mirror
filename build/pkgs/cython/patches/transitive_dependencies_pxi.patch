commit b96529dccc6e6eeb1816a8ccb8862427891804d5
Author: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date:   Tue May 19 22:06:22 2015 +0200

    Transitively traverse .pxi dependencies also

diff --git a/Cython/Build/Dependencies.py b/Cython/Build/Dependencies.py
index 4514493..16de9a7 100644
--- a/Cython/Build/Dependencies.py
+++ b/Cython/Build/Dependencies.py
@@ -516,11 +516,21 @@ class DependencyTree(object):
         return tuple(pxd_list)
 
     @cached_method
+    def referenced_files(self, filename):
+        """
+        Return a list of relative pathnames of all source files
+        directly referenced by the file ``filename``.
+        """
+        files = []
+        for f in self.cimported_files(filename):
+            files.append(os.path.relpath(f))
+        for f in self.included_files(filename):
+            files.append(os.path.relpath(f))
+        return files
+
     def immediate_dependencies(self, filename):
-        all = set([filename])
-        all.update(self.cimported_files(filename))
-        all.update(self.included_files(filename))
-        return all
+        all = [os.path.relpath(filename)] + self.referenced_files(filename)
+        return set(all)
 
     def all_dependencies(self, filename):
         return self.transitive_merge(filename, self.immediate_dependencies, set.union)
@@ -569,7 +579,7 @@ class DependencyTree(object):
         except KeyError:
             seen = self._transitive_cache[extract, merge] = {}
         return self.transitive_merge_helper(
-            node, extract, merge, seen, {}, self.cimported_files)[0]
+            node, extract, merge, seen, {}, self.referenced_files)[0]
 
     def transitive_merge_helper(self, node, extract, merge, seen, stack, outgoing):
         if node in seen:
diff --git a/tests/compile/distutils_libraries_T845.srctree b/tests/compile/distutils_libraries_T845.srctree
index 69c8549..c00b5fe 100644
--- a/tests/compile/distutils_libraries_T845.srctree
+++ b/tests/compile/distutils_libraries_T845.srctree
@@ -9,12 +9,14 @@ ext_modules = [
     Extension("a", ["a.pyx"]),
     Extension("x", ["x.pyx"]),
     Extension("y", ["y.pyx"]),
+    Extension("z", ["z.pyx"]),
 ]
 
 ext_modules = cythonize(ext_modules)
 
 assert ext_modules[1].libraries == ["lib_x"]
 assert ext_modules[2].libraries == ["lib_y"]
+assert ext_modules[3].libraries == ["lib_z"]
 
 ######## libx.pxd ########
 # distutils: libraries = lib_x
@@ -22,12 +24,19 @@ assert ext_modules[2].libraries == ["lib_y"]
 ######## liby.pxd ########
 # distutils: libraries = lib_y
 
+######## libz.pxi ########
+# distutils: libraries = lib_z
+
 ######## a.pyx ########
 cimport libx
 cimport liby
+include 'libz.pxi'
 
 ######## x.pyx ########
 cimport libx
 
 ######## y.pyx ########
 cimport liby
+
+######## z.pyx ########
+include 'libz.pxi'
