--- a/extensions/adj2d/truthbytop/BOUNDARY2D.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/extensions/adj2d/truthbytop/BOUNDARY2D.c	2018-08-29 20:07:50.511232206 -0600
@@ -106,7 +106,7 @@ Step6: /* Split cell list by dimension.
        tc++;
      else
        fc++; }
-   if (tc > 0 && fc > 0 || GVERTEXLABEL(v,G) == TRUE && tc == 0)
+   if ((tc > 0 && fc > 0) || (GVERTEXLABEL(v,G) == TRUE && tc == 0))
      GNEWLABEL(v,TRUE,G);
    else
      GNEWLABEL(v,FALSE,G); }
--- a/extensions/lift2D/IBPRRIOAP.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/extensions/lift2D/IBPRRIOAP.c	2018-08-29 20:07:50.510232207 -0600
@@ -95,7 +95,7 @@ Step3: /* Isolate the roots of B(alpha,y
 	  goto Return; }
 	
 	/* get trend of first root */
-	if (PDEG(B) % 2 == 0 && s == 1 || PDEG(B) % 2 == 1 && s == -1)
+	if ((PDEG(B) % 2 == 0 && s == 1) || (PDEG(B) % 2 == 1 && s == -1))
 	  t1 = -1;
 	else
 	  t1 = 1;
--- a/extensions/lift2D/modIBPRRIOAP.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/extensions/lift2D/modIBPRRIOAP.c	2018-08-29 20:07:50.510232207 -0600
@@ -97,7 +97,7 @@ Step3: /* Isolate the roots of B(alpha,y
 	  goto Return; }
 	
 	/* get trend of first root */
-	if (PDEG(B) % 2 == 0 && s == 1 || PDEG(B) % 2 == 1 && s == -1)
+	if ((PDEG(B) % 2 == 0 && s == 1) || (PDEG(B) % 2 == 1 && s == -1))
 	  t1 = -1;
 	else
 	  t1 = 1;
--- a/source/db/convenientstreams.h.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/db/convenientstreams.h	2018-08-29 20:07:50.511232206 -0600
@@ -31,7 +31,7 @@ public:
     string s = "";
     char c = in.get(); 
     if (opt == skipleadingws) 
-      while(c != EOF && (isspace(c) || c == '\\' && isspace(in.peek()))) c = in.get();
+      while(c != EOF && (isspace(c) || (c == '\\' && isspace(in.peek())))) c = in.get();
     // States  : 0 = normal, 1 = in comment, 2 = just read a backslash
     int state = 0;
     do {
--- a/source/db/SINGULAR.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/db/SINGULAR.c	2018-08-29 20:07:50.511232206 -0600
@@ -58,7 +58,7 @@ void SingularServer::reportStats(ostream
 
 char peekNonWS(istream &in) 
 { 
-  char c; while((c = in.peek()) && c == ' ' || c == '\t' || c == '\n') in.get(); return c; 
+  char c; while(c = in.peek() && (c == ' ' || c == '\t' || c == '\n')) in.get(); return c; 
 }
 
 
--- a/source/proj/GROUPSAMEPJ.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/proj/GROUPSAMEPJ.c	2018-08-29 20:07:50.511232206 -0600
@@ -46,7 +46,7 @@ BDigit PRJPNTEQUAL(Word A, Word B)
     Word KR = LIST2(SECOND(aK),LIST2(1,1));
     Word sL = AFSIGN(aM,aI,AFPEMV(1,aM,G,KL));
     Word sR = AFSIGN(aM,aI,AFPEMV(1,aM,G,KR));
-    return EQUAL(KL,KR) && sL == 0 || sL == 1 && sR == -1 || sL == -1 && sR == 1;
+    return (EQUAL(KL,KR) && sL == 0) || (sL == 1 && sR == -1) || (sL == -1 && sR == 1);
   }
 
   /* One primitive, the other not */
@@ -75,10 +75,10 @@ Step1: /* Group. */
 	 {
            ADV(Jt,&J2,&Jt);
            Jt2 = LELTI(J2,PO_POLY);
-           if (LELTI(J1,PO_TYPE) == PO_POINT && LELTI(J2,PO_TYPE) == PO_POINT
-	       && PRJPNTEQUAL(Js1,Jt2) || 
-	       LELTI(J1,PO_TYPE) != PO_POINT && LELTI(J2,PO_TYPE) != PO_POINT
-	       && EQUAL(Js1,Jt2))
+           if ((LELTI(J1,PO_TYPE) == PO_POINT && LELTI(J2,PO_TYPE) == PO_POINT
+		&& PRJPNTEQUAL(Js1,Jt2)) || 
+	       (LELTI(J1,PO_TYPE) != PO_POINT && LELTI(J2,PO_TYPE) != PO_POINT
+		&& EQUAL(Js1,Jt2)))
 	   {
              SLELTI(J2,PO_PARENT,CONC(LELTI(J2,PO_PARENT),LELTI(J1,PO_PARENT)));
              t = 1;
--- a/source/proj/PROJMCECmod.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/proj/PROJMCECmod.c	2018-08-29 20:07:50.511232206 -0600
@@ -67,7 +67,7 @@ Step1: /* Obtain coefficients. */
 	   t = 1; }
 	 
 	 /* If r = 2 OR r-1 is in free variable space, the leading coefficient is always enough! */
-	 if (t && (r == 2 || (PCMZERROR && r-1 <= GVNFV)) 
+	 if ((t && (r == 2 || (PCMZERROR && r-1 <= GVNFV)))
 	     || (experimentalExtensionFlag && qfrCheckNonNullified(r,Ap1,GVNA.W,GVNQFF.W,GVVL.W))
 	     )
 	   t = 0;
@@ -101,7 +101,7 @@ Step1: /* Obtain coefficients. */
 	     tf = tf || (Q == FULLDE || Q == FULLDA);
 	     
 	     /* Test 3: in free variable space when the PCMZERROR option is used */
-	     tf = tf || PCMZERROR && rp <= GVNFV;
+	     tf = tf || (PCMZERROR && rp <= GVNFV);
 
 	     /* Test 4: has no common zero with the system of all other coefficients */
 	     if (!tf)
--- a/source/proj/PROJMCmod.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/proj/PROJMCmod.c	2018-08-29 20:07:50.511232206 -0600
@@ -57,7 +57,7 @@ Step1: /* Obtain coefficients. */
 	   t = 1; }
 	 
 	 /* If r = 2 OR r-1 is in free variable space, the leading coefficient is always enough! */
-	 if (t && (r == 2 || (PCMZERROR && r-1 <= GVNFV))
+	 if ((t && (r == 2 || (PCMZERROR && r-1 <= GVNFV)))
 	     || (experimentalExtensionFlag && qfrCheckNonNullified(r,Ap1,GVNA.W,GVNQFF.W,GVVL.W))
 	     )
 	   t = 0;
@@ -91,7 +91,7 @@ Step1: /* Obtain coefficients. */
 	     tf = tf || (Q == FULLDE || Q == FULLDA);
 	     
 	     /* Test 3: in free variable space when the PCMZERROR option is used */
-	     tf = tf || PCMZERROR && rp <= GVNFV;
+	     tf = tf || (PCMZERROR && rp <= GVNFV);
 
 	     /* Test 4: has no common zero with the system of all other coefficients */
 	     if (!tf)
--- a/source/ticad/INITPCAD.c.orig	2018-01-25 14:25:22.000000000 -0700
+++ b/source/ticad/INITPCAD.c	2018-08-29 20:07:50.511232206 -0600
@@ -14,7 +14,7 @@ Word QepcadCls::INITPCAD()
        Word D, tv;
 
 Step0: /* Determine truth value! */
-       if (GVNA == FALSE || GVNA != NIL && LELTI(GVNA,1) == NEOP && LELTI(GVNA,2) == 0) tv = NA;
+       if (GVNA == FALSE || (GVNA != NIL && LELTI(GVNA,1) == NEOP && LELTI(GVNA,2) == 0)) tv = NA;
        else if (LELTI(GVNQFF,1) == NEOP && LELTI(GVNQFF,2) == 0) tv = FALSE;
        else if (LELTI(GVNQFF,1) == EQOP && LELTI(GVNQFF,2) == 0) tv = TRUE;
        else tv = UNDET;
