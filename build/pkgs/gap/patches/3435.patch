Patch for https://trac.sagemath.org/ticket/27724
Can be removed when updating to GAP >= 4.11
From abd23b1360bc569fca9bbb36e2fc167d55c7a872 Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Thu, 2 May 2019 16:03:15 +0200
Subject: [PATCH 1/5] Initial fix for #3434: Add ENSURE_BAG helper which
 ensures memory is really committed by the OS for a new bag.

Call ENSURE_BAG on new bags created in integer.c if they might be
passed as an argument to a GMP function.
---
 src/gasman.h  | 12 ++++++++++++
 src/integer.c |  9 +++++++++
 2 files changed, 21 insertions(+)

diff --git a/src/gasman.h b/src/gasman.h
index 62d637baa9..e8c3d9eca1 100644
--- a/src/gasman.h
+++ b/src/gasman.h
@@ -553,6 +553,18 @@ EXPORT_INLINE UInt ResizeWordSizedBag(Bag bag, UInt size)
 }
 
 
+#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT)
+EXPORT_INLINE void ENSURE_BAG(Bag bag)
+{
+    memset(PTR_BAG(bag), 0, SIZE_BAG(bag));
+}
+#else
+EXPORT_INLINE void ENSURE_BAG(Bag bag)
+{
+}
+#endif
+
+
 /****************************************************************************
 **
 *F  CollectBags(<size>,<full>)  . . . . . . . . . . . . . . collect dead bags
diff --git a/src/integer.c b/src/integer.c
index c15acdb415..ed740684ca 100644
--- a/src/integer.c
+++ b/src/integer.c
@@ -274,6 +274,7 @@ static void NEW_FAKEMPZ( fake_mpz_t fake, UInt size )
   }
   else {
     fake->obj = NewBag( T_INTPOS, size * sizeof(mp_limb_t) );
+    ENSURE_BAG(fake->obj);
   }
 }
 
@@ -1789,9 +1790,11 @@ Obj ModInt(Obj opL, Obj opR)
     }
     
     mod = NewBag( TNUM_OBJ(opL), (SIZE_INT(opL)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(mod);
 
     quo = NewBag( T_INTPOS,
                    (SIZE_INT(opL)-SIZE_INT(opR)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(quo);
 
     /* and let gmp do the work                                             */
     mpn_tdiv_qr( (mp_ptr)ADDR_INT(quo), (mp_ptr)ADDR_INT(mod), 0,
@@ -1888,6 +1891,8 @@ Obj QuoInt(Obj opL, Obj opR)
       quo = NewBag( T_INTPOS, SIZE_OBJ(opL) );
     else
       quo = NewBag( T_INTNEG, SIZE_OBJ(opL) );
+
+    ENSURE_BAG(quo);
     
     if ( k < 0 ) k = -k;
 
@@ -1906,6 +1911,7 @@ Obj QuoInt(Obj opL, Obj opR)
     
     /* create a new bag for the remainder                                  */
     rem = NewBag( TNUM_OBJ(opL), (SIZE_INT(opL)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(rem);
 
     /* allocate a bag for the quotient                                     */
     if ( TNUM_OBJ(opL) == TNUM_OBJ(opR) )
@@ -1914,6 +1920,7 @@ Obj QuoInt(Obj opL, Obj opR)
     else
       quo = NewBag( T_INTNEG,
                     (SIZE_INT(opL)-SIZE_INT(opR)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(quo);
 
     mpn_tdiv_qr( (mp_ptr)ADDR_INT(quo), (mp_ptr)ADDR_INT(rem), 0,
                  (mp_srcptr)CONST_ADDR_INT(opL), SIZE_INT(opL),
@@ -2035,9 +2042,11 @@ Obj RemInt(Obj opL, Obj opR)
       return opL;
     
     rem = NewBag( TNUM_OBJ(opL), (SIZE_INT(opL)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(rem);
     
     quo = NewBag( T_INTPOS,
                   (SIZE_INT(opL)-SIZE_INT(opR)+1)*sizeof(mp_limb_t) );
+    ENSURE_BAG(quo);
     
     /* and let gmp do the work                                             */
     mpn_tdiv_qr( (mp_ptr)ADDR_INT(quo),  (mp_ptr)ADDR_INT(rem), 0,

From 95324a2b978444ccd783b16cf50625b390107d97 Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Fri, 3 May 2019 14:19:57 +0200
Subject: [PATCH 2/5] Just limit the scope of ENSURE_BAG to integer.c for now
 since it's the only known use case.

---
 src/gasman.h  | 12 ------------
 src/integer.c | 10 +++++++++-
 2 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/src/gasman.h b/src/gasman.h
index e8c3d9eca1..62d637baa9 100644
--- a/src/gasman.h
+++ b/src/gasman.h
@@ -553,18 +553,6 @@ EXPORT_INLINE UInt ResizeWordSizedBag(Bag bag, UInt size)
 }
 
 
-#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT)
-EXPORT_INLINE void ENSURE_BAG(Bag bag)
-{
-    memset(PTR_BAG(bag), 0, SIZE_BAG(bag));
-}
-#else
-EXPORT_INLINE void ENSURE_BAG(Bag bag)
-{
-}
-#endif
-
-
 /****************************************************************************
 **
 *F  CollectBags(<size>,<full>)  . . . . . . . . . . . . . . collect dead bags
diff --git a/src/integer.c b/src/integer.c
index ed740684ca..8120bd44c9 100644
--- a/src/integer.c
+++ b/src/integer.c
@@ -141,7 +141,15 @@ static Obj ObjInt_UIntInv( UInt i );
 
 GAP_STATIC_ASSERT( sizeof(mp_limb_t) == sizeof(UInt), "gmp limb size incompatible with GAP word size");
 
-    
+
+static inline void ENSURE_BAG(Bag bag)
+{
+#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT)
+    memset(PTR_BAG(bag), 0, SIZE_BAG(bag));
+#endif
+}
+
+
 /* for fallbacks to library */
 static Obj String;
 static Obj OneAttr;

From f29a42c60e81732aabda0d0ab11fffdd26da059d Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Fri, 3 May 2019 14:32:36 +0200
Subject: [PATCH 3/5] Add inline documentation for ENSURE_BAG and when/how it
 should be used.

---
 src/integer.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/integer.c b/src/integer.c
index 8120bd44c9..4c5cf683d8 100644
--- a/src/integer.c
+++ b/src/integer.c
@@ -142,6 +142,23 @@ static Obj ObjInt_UIntInv( UInt i );
 GAP_STATIC_ASSERT( sizeof(mp_limb_t) == sizeof(UInt), "gmp limb size incompatible with GAP word size");
 
 
+/* This ensures that all memory underlying a bag is actually committed
+** to physical memory and can be written to.
+** This is a workaround to a bug specific to Cygwin 64-bit and bad
+** interaction with GMP, so this is only needed specifically for new
+** bags created in this module to hold the outputs of GMP routines.
+**
+** Thus, any time NewBag is called, it is also necessary to call
+** ENSURE_BAG(bag) on the newly created bag if some GMP function will be
+** the first place that bag's data is written to.
+**
+** To give a counter-example, ENSURE_BAG is *not* needed in ObjInt_Int,
+** because it just creates a bag to hold a single mp_limb_t, and
+** immediately assigns it a value.
+**
+** The bug this works around is explained more in
+** https://github.com/gap-system/gap/issues/3434
+*/
 static inline void ENSURE_BAG(Bag bag)
 {
 #if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT)

From 1a6eb168f005ddd1fe6d5591be310112aa4de393 Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Fri, 3 May 2019 14:36:19 +0200
Subject: [PATCH 4/5] Disable the workaround if gmp.h comes from MPIR, in which
 case __MPIR_VERSION should be defined.

---
 src/integer.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/integer.c b/src/integer.c
index 4c5cf683d8..b31c5f3d65 100644
--- a/src/integer.c
+++ b/src/integer.c
@@ -161,7 +161,8 @@ GAP_STATIC_ASSERT( sizeof(mp_limb_t) == sizeof(UInt), "gmp limb size incompatibl
 */
 static inline void ENSURE_BAG(Bag bag)
 {
-#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT)
+// Note: This workaround is only required with the original GMP and not with MPIR
+#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT) && !defined(__MPIR_VERSION)
     memset(PTR_BAG(bag), 0, SIZE_BAG(bag));
 #endif
 }

From 95a011a793a326f14a0b63d5f53044d9f8d330bb Mon Sep 17 00:00:00 2001
From: "Erik M. Bray" <erik.bray@lri.fr>
Date: Fri, 3 May 2019 12:33:03 +0000
Subject: [PATCH 5/5] clang-format tweaks

---
 src/integer.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/integer.c b/src/integer.c
index b31c5f3d65..b34d6c382b 100644
--- a/src/integer.c
+++ b/src/integer.c
@@ -161,8 +161,10 @@ GAP_STATIC_ASSERT( sizeof(mp_limb_t) == sizeof(UInt), "gmp limb size incompatibl
 */
 static inline void ENSURE_BAG(Bag bag)
 {
-// Note: This workaround is only required with the original GMP and not with MPIR
-#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT) && !defined(__MPIR_VERSION)
+// Note: This workaround is only required with the original GMP and not with
+// MPIR
+#if defined(SYS_IS_CYGWIN32) && defined(SYS_IS_64_BIT) &&                    \
+    !defined(__MPIR_VERSION)
     memset(PTR_BAG(bag), 0, SIZE_BAG(bag));
 #endif
 }
