diff --git a/ginac/power.cpp b/ginac/power.cpp
index 5c07324..8f2c179 100644
--- a/ginac/power.cpp
+++ b/ginac/power.cpp
@@ -790,7 +790,9 @@ ex power::conjugate() const
 
 ex power::real_part() const
 {
-	if (exponent.is_integer()) {
+	if (is_exactly_a<numeric>(exponent)
+	            and ((ex_to<numeric>(exponent).t == LONG) or (ex_to<numeric>(exponent).t == MPZ))) {
+	        numeric nexp = ex_to<numeric>(exponent);
 		ex basis_real = basis.real_part();
 		if (basis_real == basis)
 			return *this;
@@ -798,10 +800,10 @@ ex power::real_part() const
                 a.set_domain(domain::real);
                 b.set_domain(domain::real);
 		ex result;
-		if (exponent.info(info_flags::posint))
-			result = power(a+I*b,exponent);
+		if (nexp >= 0)
+			result = power(a+I*b, nexp);
 		else
-			result = power(a/(a*a+b*b)-I*b/(a*a+b*b),-exponent);
+			result = power(a/(a*a+b*b)-I*b/(a*a+b*b), -nexp);
 		result = result.expand();
 		result = result.real_part();
 		result = result.subs(lst( a==basis_real, b==basis.imag_part() ));
@@ -817,7 +819,9 @@ ex power::real_part() const
 
 ex power::imag_part() const
 {
-	if (exponent.info(info_flags::integer)) {
+	if (is_exactly_a<numeric>(exponent)
+	            and ((ex_to<numeric>(exponent).t == LONG) or (ex_to<numeric>(exponent).t == MPZ))) {
+	        numeric nexp = ex_to<numeric>(exponent);
 		ex basis_real = basis.real_part();
 		if (basis_real == basis)
 			return 0;
@@ -825,10 +829,10 @@ ex power::imag_part() const
                 a.set_domain(domain::real);
                 b.set_domain(domain::real);
 		ex result;
-		if (exponent.info(info_flags::posint))
-			result = power(a+I*b,exponent);
+		if (nexp >= 0)
+			result = power(a+I*b, nexp);
 		else
-			result = power(a/(a*a+b*b)-I*b/(a*a+b*b),-exponent);
+			result = power(a/(a*a+b*b)-I*b/(a*a+b*b), -nexp);
 		result = result.expand();
 		result = result.imag_part();
 		result = result.subs(lst( a==basis_real, b==basis.imag_part() ));
