From d72a7643b7f8a1dedd12eadf89690c07ff6eed6e Mon Sep 17 00:00:00 2001
From: Matthias Koeppe <mkoeppe@math.ucdavis.edu>
Date: Mon, 1 Mar 2021 09:23:50 -0800
Subject: [PATCH] Do not use variable names B0, B1 to avoid clash with
 sys/termio.h macros (again)

---
 .../fflas/fflas_igemm/igemm_kernels.inl       | 50 +++++++++----------
 1 file changed, 25 insertions(+), 25 deletions(-)

diff --git a/fflas-ffpack/fflas/fflas_igemm/igemm_kernels.inl b/fflas-ffpack/fflas/fflas_igemm/igemm_kernels.inl
index c69d32c6..0ca12110 100644
--- a/fflas-ffpack/fflas/fflas_igemm/igemm_kernels.inl
+++ b/fflas-ffpack/fflas/fflas_igemm/igemm_kernels.inl
@@ -403,21 +403,21 @@ namespace FFLAS { namespace details { /*  kernels */
         vect_t R0;
         R0 = simd::set(r0[0], r1[0], r2[0], r3[0]); // could be done with a gather (marginally faster?)
         for(k=0;k<depth;k++){
-            vect_t A0;
-            vect_t B0;
-            B0 = simd::load(blB);
+            vect_t A_0;
+            vect_t B_0;
+            B_0 = simd::load(blB);
             if (K == number_kind::one) {
-                A0 = simd::set1(blA[0]);
-                simd::fmaddxin(R0, A0, B0);
+                A_0 = simd::set1(blA[0]);
+                simd::fmaddxin(R0, A_0, B_0);
             }
             if (K == number_kind::mone) {
-                A0 = simd::set1(blA[0]);
-                simd::subin(R0,simd::mulx(A0, B0));
+                A_0 = simd::set1(blA[0]);
+                simd::subin(R0,simd::mulx(A_0, B_0));
             }
             if (K == number_kind::other) {
                 int64_t abla = alpha*blA[0];
-                A0 = simd::set1(abla);
-                simd::fmaddxin(R0, A0, B0);
+                A_0 = simd::set1(abla);
+                simd::fmaddxin(R0, A_0, B_0);
             }
 
             blA++;
@@ -432,28 +432,28 @@ namespace FFLAS { namespace details { /*  kernels */
         R0 = simd::set(r0[0], r1[0]);
         R1 = simd::set(r2[0], r3[0]);
         for(k=0;k<depth;k++){
-            vect_t A0,A1;
-            vect_t B0,B1;
-            B0 = simd::load(blB+0*StepB);
-            B1 = simd::load(blB+1*StepB);
+            vect_t A_0,A_1;
+            vect_t B_0,B_1;
+            B_0 = simd::load(blB+0*StepB);
+            B_1 = simd::load(blB+1*StepB);
             if (K == number_kind::one) {
-                A0 = simd::set1(blA[0]);
-                A1 = simd::set1(blA[0]);
-                simd::fmaddxin(R0, A0, B0);
-                simd::fmaddxin(R1, A1, B1);
+                A_0 = simd::set1(blA[0]);
+                A_1 = simd::set1(blA[0]);
+                simd::fmaddxin(R0, A_0, B_0);
+                simd::fmaddxin(R1, A_1, B_1);
             }
             if (K == number_kind::mone) {
-                A0 = simd::set1(blA[0]);
-                A1 = simd::set1(blA[0]);
-                simd::subin(R0,simd::mulx(A0, B0));
-                simd::subin(R1,simd::mulx(A1, B1));
+                A_0 = simd::set1(blA[0]);
+                A_1 = simd::set1(blA[0]);
+                simd::subin(R0,simd::mulx(A_0, B_0));
+                simd::subin(R1,simd::mulx(A_1, B_1));
             }
             if (K == number_kind::other) {
                 int64_t abla = alpha*blA[0];
-                A0 = simd::set1(abla);
-                A1 = simd::set1(abla);
-                simd::fmaddxin(R0, A0, B0);
-                simd::fmaddxin(R1, A1, B1);
+                A_0 = simd::set1(abla);
+                A_1 = simd::set1(abla);
+                simd::fmaddxin(R0, A_0, B_0);
+                simd::fmaddxin(R1, A_1, B_1);
             }
 
             blA++;
-- 
2.28.0

