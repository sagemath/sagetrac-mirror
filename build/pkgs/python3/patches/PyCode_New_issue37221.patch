commit 089287344797737b6e780e632e4aef12532b8f39
Author: Pablo Galindo <pablogsal@gmail.com>
Date:   Tue Jun 11 02:47:55 2019 +0100

    bpo-37221: Add PyCode_NewEx to be used internally and set PyCode_New as a compatibility wrapper

diff --git a/Doc/c-api/code.rst b/Doc/c-api/code.rst
index 4842810..c33becd 100644
--- a/Doc/c-api/code.rst
+++ b/Doc/c-api/code.rst
@@ -33,20 +33,25 @@ bound into a function.
 
    Return the number of free variables in *co*.
 
-.. c:function:: PyCodeObject* PyCode_New(int argcount, int posonlyargcount, int kwonlyargcount, int nlocals, int stacksize, int flags, PyObject *code, PyObject *consts, PyObject *names, PyObject *varnames, PyObject *freevars, PyObject *cellvars, PyObject *filename, PyObject *name, int firstlineno, PyObject *lnotab)
+.. c:function:: PyCodeObject* PyCode_NewEx(int argcount, int posonlyargcount, int kwonlyargcount, int nlocals, int stacksize, int flags, PyObject *code, PyObject *consts, PyObject *names, PyObject *varnames, PyObject *freevars, PyObject *cellvars, PyObject *filename, PyObject *name, int firstlineno, PyObject *lnotab)
 
    Return a new code object.  If you need a dummy code object to
    create a frame, use :c:func:`PyCode_NewEmpty` instead.  Calling
    :c:func:`PyCode_New` directly can bind you to a precise Python
    version since the definition of the bytecode changes often.
 
-   .. versionchanged:: 3.8
+   .. versionadded:: 3.8
       An extra parameter is required (*posonlyargcount*) to support :PEP:`570`.
       The first parameter (*argcount*) now represents the total number of positional arguments,
       including positional-only.
 
    .. audit-event:: code.__new__ "code filename name argcount posonlyargcount kwonlyargcount nlocals stacksize flags"
 
+.. c:function:: PyCodeObject* PyCode_New(int argcount, int kwonlyargcount, int nlocals, int stacksize, int flags, PyObject *code, PyObject *consts, PyObject *names, PyObject *varnames, PyObject *freevars, PyObject *cellvars, PyObject *filename, PyObject *name, int firstlineno, PyObject *lnotab)
+
+   Same as :c:func:`PyCode_NewEx` but kept for backward compatibility reasons. Calling :c:func:`PyCode_New` will call
+   :c:func:`PyCode_NewEx` with the value of **posonlyargcount** set to 0.
+
 .. c:function:: PyCodeObject* PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno)
 
    Return a new empty code object with the specified filename,
diff --git a/Doc/data/refcounts.dat b/Doc/data/refcounts.dat
index aca57a1..6b212d6 100644
--- a/Doc/data/refcounts.dat
+++ b/Doc/data/refcounts.dat
@@ -234,9 +234,26 @@ PyCode_Check:PyObject*:co:0:
 PyCode_GetNumFree:int:::
 PyCode_GetNumFree:PyCodeObject*:co:0:
 
+PyCode_NewEx:PyCodeObject*::+1:
+PyCode_NewEx:int:argcount::
+PyCode_NewEx:int:posonlyargcount::
+PyCode_NewEx:int:kwonlyargcount::
+PyCode_NewEx:int:nlocals::
+PyCode_NewEx:int:stacksize::
+PyCode_NewEx:int:flags::
+PyCode_NewEx:PyObject*:code:0:
+PyCode_NewEx:PyObject*:consts:0:
+PyCode_NewEx:PyObject*:names:0:
+PyCode_NewEx:PyObject*:varnames:0:
+PyCode_NewEx:PyObject*:freevars:0:
+PyCode_NewEx:PyObject*:cellvars:0:
+PyCode_NewEx:PyObject*:filename:0:
+PyCode_NewEx:PyObject*:name:0:
+PyCode_NewEx:int:firstlineno::
+PyCode_NewEx:PyObject*:lnotab:0:
+
 PyCode_New:PyCodeObject*::+1:
 PyCode_New:int:argcount::
-PyCode_New:int:posonlyargcount::
 PyCode_New:int:kwonlyargcount::
 PyCode_New:int:nlocals::
 PyCode_New:int:stacksize::
diff --git a/Doc/whatsnew/3.8.rst b/Doc/whatsnew/3.8.rst
index e2f9ce8..26d8169 100644
--- a/Doc/whatsnew/3.8.rst
+++ b/Doc/whatsnew/3.8.rst
@@ -952,6 +952,12 @@ Build and C API Changes
   allocation or deallocation may need to be adjusted.
   (Contributed by Eddie Elizondo in :issue:`35810`.)
 
+* The new function :c:func:`PyCode_NewEx` substitutes :c:func:`PyCode_New`
+  as the prefered way to create code objects, having an extra parameter
+  representing the number of positional only parameters (**posonlyargcount**).
+  The old function is kept for backward compatibility reasons and will set
+  the number os positional only parameters to 0.
+
 
 Deprecated
 ==========
@@ -1360,9 +1366,6 @@ Changes in the C API
 
   (Contributed by Antoine Pitrou in :issue:`32388`.)
 
-* The :c:func:`PyCode_New` has a new parameter in the second position (*posonlyargcount*)
-  to support :pep:`570`, indicating the number of positional-only arguments.
-
 
 CPython bytecode changes
 ------------------------
diff --git a/Include/code.h b/Include/code.h
index b79d977..96e83d0 100644
--- a/Include/code.h
+++ b/Include/code.h
@@ -119,7 +119,14 @@ PyAPI_DATA(PyTypeObject) PyCode_Type;
 #define PyCode_GetNumFree(op) (PyTuple_GET_SIZE((op)->co_freevars))
 
 /* Public interface */
+
+/* For backwards compatibility after adding posonlyargcount */
 PyAPI_FUNC(PyCodeObject *) PyCode_New(
+        int, int, int, int, int, PyObject *, PyObject *,
+        PyObject *, PyObject *, PyObject *, PyObject *,
+        PyObject *, PyObject *, int, PyObject *);
+
+PyAPI_FUNC(PyCodeObject *) PyCode_NewEx(
         int, int, int, int, int, int, PyObject *, PyObject *,
         PyObject *, PyObject *, PyObject *, PyObject *,
         PyObject *, PyObject *, int, PyObject *);
diff --git a/Objects/codeobject.c b/Objects/codeobject.c
index 63ce479..bdd84d0 100644
--- a/Objects/codeobject.c
+++ b/Objects/codeobject.c
@@ -102,15 +102,27 @@ intern_string_constants(PyObject *tuple)
     return modified;
 }
 
-
 PyCodeObject *
-PyCode_New(int argcount, int posonlyargcount, int kwonlyargcount,
+PyCode_New(int argcount, int kwonlyargcount,
            int nlocals, int stacksize, int flags,
            PyObject *code, PyObject *consts, PyObject *names,
            PyObject *varnames, PyObject *freevars, PyObject *cellvars,
            PyObject *filename, PyObject *name, int firstlineno,
            PyObject *lnotab)
 {
+    return PyCode_NewEx(argcount, 0, kwonlyargcount, nlocals, stacksize,
+                        flags, code, consts, names, varnames, freevars,
+                        cellvars, filename, name, firstlineno, lnotab);
+}
+
+PyCodeObject *
+PyCode_NewEx(int argcount, int posonlyargcount, int kwonlyargcount,
+             int nlocals, int stacksize, int flags,
+             PyObject *code, PyObject *consts, PyObject *names,
+             PyObject *varnames, PyObject *freevars, PyObject *cellvars,
+             PyObject *filename, PyObject *name, int firstlineno,
+             PyObject *lnotab)
+{
     PyCodeObject *co;
     Py_ssize_t *cell2arg = NULL;
     Py_ssize_t i, n_cellvars, n_varnames, total_args;
@@ -311,7 +323,7 @@ PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno)
     if (filename_ob == NULL)
         goto failed;
 
-    result = PyCode_New(0,                      /* argcount */
+    result = PyCode_NewEx(0,                    /* argcount */
                 0,                              /* posonlyargcount */
                 0,                              /* kwonlyargcount */
                 0,                              /* nlocals */
@@ -492,11 +504,11 @@ code_new(PyTypeObject *type, PyObject *args, PyObject *kw)
     if (ourcellvars == NULL)
         goto cleanup;
 
-    co = (PyObject *)PyCode_New(argcount, posonlyargcount, kwonlyargcount,
-                                nlocals, stacksize, flags,
-                                code, consts, ournames, ourvarnames,
-                                ourfreevars, ourcellvars, filename,
-                                name, firstlineno, lnotab);
+    co = (PyObject *)PyCode_NewEx(argcount, posonlyargcount, kwonlyargcount,
+                                  nlocals, stacksize, flags,
+                                  code, consts, ournames, ourvarnames,
+                                  ourfreevars, ourcellvars, filename,
+                                  name, firstlineno, lnotab);
   cleanup:
     Py_XDECREF(ournames);
     Py_XDECREF(ourvarnames);
@@ -625,7 +637,7 @@ code_replace_impl(PyCodeObject *self, int co_argcount,
 
 #undef CHECK_INT_ARG
 
-    return (PyObject *)PyCode_New(
+    return (PyObject *)PyCode_NewEx(
         co_argcount, co_posonlyargcount, co_kwonlyargcount, co_nlocals,
         co_stacksize, co_flags, (PyObject*)co_code, co_consts, co_names,
         co_varnames, co_freevars, co_cellvars, co_filename, co_name,
diff --git a/Python/compile.c b/Python/compile.c
index 9e4a209..9828007 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -5815,13 +5815,13 @@ makecode(struct compiler *c, struct assembler *a)
     if (maxdepth < 0) {
         goto error;
     }
-    co = PyCode_New(posonlyargcount+posorkeywordargcount, posonlyargcount,
-                    kwonlyargcount, nlocals_int, maxdepth, flags,
-                    bytecode, consts, names, varnames,
-                    freevars, cellvars,
-                    c->c_filename, c->u->u_name,
-                    c->u->u_firstlineno,
-                    a->a_lnotab);
+    co = PyCode_NewEx(posonlyargcount+posorkeywordargcount, posonlyargcount,
+                      kwonlyargcount, nlocals_int, maxdepth, flags,
+                      bytecode, consts, names, varnames,
+                      freevars, cellvars,
+                      c->c_filename, c->u->u_name,
+                      c->u->u_firstlineno,
+                      a->a_lnotab);
  error:
     Py_XDECREF(consts);
     Py_XDECREF(names);
diff --git a/Python/marshal.c b/Python/marshal.c
index caaddfe..6532e32 100644
--- a/Python/marshal.c
+++ b/Python/marshal.c
@@ -1396,7 +1396,7 @@ r_object(RFILE *p)
             if (lnotab == NULL)
                 goto code_error;
 
-            v = (PyObject *) PyCode_New(
+            v = (PyObject *) PyCode_NewEx(
                             argcount, posonlyargcount, kwonlyargcount,
                             nlocals, stacksize, flags,
                             code, consts, names, varnames,
