commit d8860249697b8f75d74e627e4daf408d7b976cb4
Author: Jeroen Demeyer <J.Demeyer@UGent.be>
Date:   Wed Jun 12 11:41:19 2019 +0200

    [3.8] bpo-37250: put back tp_print for backwards compatibility

diff --git a/Include/cpython/object.h b/Include/cpython/object.h
index a65aaf6..3d98d33 100644
--- a/Include/cpython/object.h
+++ b/Include/cpython/object.h
@@ -256,6 +256,9 @@ typedef struct _typeobject {
     destructor tp_finalize;
     vectorcallfunc tp_vectorcall;
 
+    /* Unused, kept for backwards compatibility in CPython 3.8 only */
+    int (*tp_print)(PyObject *, FILE *, int);
+
 #ifdef COUNT_ALLOCS
     /* these must be last and never explicitly initialized */
     Py_ssize_t tp_allocs;
diff --git a/Misc/NEWS.d/next/C API/2019-06-12-11-45-36.bpo-37221.RhP1E7.rst b/Misc/NEWS.d/next/C API/2019-06-12-11-45-36.bpo-37221.RhP1E7.rst
new file mode 100644
index 0000000..46abfde
--- /dev/null
+++ b/Misc/NEWS.d/next/C API/2019-06-12-11-45-36.bpo-37221.RhP1E7.rst	
@@ -0,0 +1,3 @@
+``tp_print`` is put back at the end of the ``PyTypeObject`` structure
+to restore support for old code (in particular generated by Cython)
+setting ``tp_print = 0``.
diff --git a/Modules/_testcapimodule.c b/Modules/_testcapimodule.c
index 07aadea..bbf6122 100644
--- a/Modules/_testcapimodule.c
+++ b/Modules/_testcapimodule.c
@@ -6008,6 +6008,10 @@ PyInit__testcapi(void)
     Py_INCREF(&MyList_Type);
     PyModule_AddObject(m, "MyList", (PyObject *)&MyList_Type);
 
+    /* Old Cython code sets tp_print to 0, we check that
+     * this doesn't break anything. */
+    MyList_Type.tp_print = 0;
+
     if (PyType_Ready(&MethodDescriptorBase_Type) < 0)
         return NULL;
     Py_INCREF(&MethodDescriptorBase_Type);
