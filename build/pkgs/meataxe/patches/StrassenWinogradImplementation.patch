Implement Strassen-Winograd multiplication in MeatAxe.

We use the schedule from Douglas-Heroux-Slishman-Smith;
see also Boyer-Pernet-Zhou, "Memory efficient scheduling of
Strassen-Winograd's matrix multiplication algorithm",
Table 1 (ISSAC 2009).

AUTHOR: Simon King 2015-09-19, simon.king@uni-jena.de

diff --git a/Makefile b/Makefile
index b78e244..2ada31e 100644
--- a/Makefile
+++ b/Makefile
@@ -88,6 +88,7 @@ LIB_OBJS=\
 	temap \
 	tkinfo vec2mat \
 	wgen \
+	window \
 	zcleanrow zcmprow zgap zpermrow \
 	zzz2 \
 	version
diff --git a/src/kernel-0.c b/src/kernel-0.c
index 4f0a973..178b6cb 100644
--- a/src/kernel-0.c
+++ b/src/kernel-0.c
@@ -24,8 +24,8 @@
 MTX_DEFINE_FILE_INFO
 
 typedef unsigned char BYTE;
-static int MPB = 0;		/* No. of marks per byte */
-static int LPR = 0;		/* Long ints per row */
+int MPB = 0;		/* No. of marks per byte */
+int LPR = 0;		/* Long ints per row */
 
 
 
@@ -646,7 +646,7 @@ PTR FfAddRow(PTR dest, PTR src)
 
 
 /**
- ** Add a part two rows.
+ ** Add a part of two rows.
  ** This works like FfAddRow(), but the operation is performed only on a given range of
  ** columns. Note that the working range is not specified as column indexes but in units of
  ** long integers!
@@ -707,7 +707,217 @@ PTR FfAddRowPartial(PTR dest, PTR src, int first, int len)
     return dest;
 }
 
+/**
+ ** Subtract two rows.
+ ** This function subtracts src from dest. Field order and row size must have been set before.
+ ** @param dest The row to subtract from.
+ ** @param src The row to subtract.
+ ** @return Always returns dest.
+ **/
+
+PTR FfSubRow(PTR dest, PTR src)
+{
+    register int i;
+
+    if (FfChar == 2)	/* characteristic 2 is simple... */
+    {	
+#ifdef ASM_MMX
+    /* This assumes Intel with 4 bytes per long, but MMX implies Intel anyway.*/
+	__asm__(
+	"    pushl %ebx\n"
+	"    pushl %ecx\n"
+	"    pushl %edx\n"
 
+	"    movl 8(%ebp),%ecx\n"
+        "    movl 12(%ebp),%ebx\n"
+        "    movl LPR,%edx\n"
+        "    sarl $1,%edx\n"
+        "    je .SUBROW2\n"
+        "    .align 16\n"
+	".SUBROW1:\n"
+        "    movq (%ebx),%mm0\n"
+        "    addl $8,%ebx\n"
+        "    pxor (%ecx),%mm0\n"
+        "    movq %mm0,(%ecx)\n"
+        "    addl $8,%ecx\n"
+        "    decl %edx\n"
+        "    jne .SUBROW1\n"
+	".SUBROW2:\n"
+	"    popl %edx\n"
+	"    popl %ecx\n"
+	"    popl %ebx\n"
+	);
+#else
+	register long *l1 = (long *) dest;
+	register long *l2 = (long *) src;
+	for (i = LPR; i != 0; --i)
+	{
+	    register long x = *l2++;
+	    if (x != 0) *l1 ^= x;
+	    l1++;
+	}
+#endif
+    }
+    else		/* any other characteristic */
+    {
+        FEL *table_inv = mtx_tmult[mtx_taddinv[FF_ONE]];
+#ifdef ASM_MMX
+        register BYTE *p1 = dest;
+        register unsigned long *p2 = (unsigned long *) src;
+        for (i = LPR; i != 0; --i)
+        {
+            register unsigned long a;
+            if ((a = *p2++) != 0) {
+                *p1++ = mtx_tadd[*p1][table_inv[a & 0xffL]];
+                a >>= 8;
+                *p1++ = mtx_tadd[*p1][table_inv[a & 0xffL]];
+                a >>= 8;
+                *p1++ = mtx_tadd[*p1][table_inv[a & 0xffL]];
+                a >>= 8;
+                *p1++ = mtx_tadd[*p1][table_inv[a & 0xffL]];
+            } else
+              p1 += 4;
+        }
+#else
+        register FEL *p1 = dest;
+        register FEL *p2 = src;
+        for (i = FfTrueRowSize(FfNoc); i != 0; --i)
+        {
+            register int x = *p2++;
+            if (x != 0) *p1 = mtx_tadd[*p1][table_inv[x]];
+            p1++;
+        }
+#endif
+    }
+    return dest;
+}
+
+
+/**
+ ** Subtract a part of two rows.
+ ** This works like FfSubRow(), but the operation is performed only on a given range of
+ ** columns. Note that the working range is not specified as column indexes but in units of
+ ** long integers!
+ ** @param dest The row to subtract from.
+ ** @param src The row to subtract.
+ ** @param first Number of long integers to skip.
+ ** @param len Number of long integers to add.
+ ** @return Always returns dest.
+ **/
+
+PTR FfSubRowPartial(PTR dest, PTR src, int first, int len)
+{
+    register long i;
+
+    if (FfChar == 2)	/* characteristic 2 is simple... */
+#ifdef ASM_MMX
+	__asm__("\n	movl 8(%ebp),%ecx\n"
+		"	movl 12(%ebp),%ebx\n"
+		"	movl 16(%ebp),%edx\n"
+		"       sall $2,%edx\n"
+		"       addl %edx,%ecx\n"
+		"       addl %edx,%ebx\n"
+		"       movl 20(%ebp),%edx\n"
+		"	sarl $1,%edx\n"
+		"	je .SUBROWPART_1\n"
+		"	.align 16\n"
+		".SUBROWPART_2:\n"
+		"	movq (%ebx),%mm0\n"
+		"	addl $8,%ebx\n"
+		"	pxor (%ecx),%mm0\n"
+		"	movq %mm0,(%ecx)\n"
+		"	addl $8,%ecx\n"
+		"	decl %edx\n"
+		"	jne .SUBROWPART_2\n"
+		".SUBROWPART_1:\n"
+	       );
+#else
+    {	register long *l1 = (long *) dest + first;
+	register long *l2 = (long *) src + first;
+	for (i = len; i != 0; --i)
+	{
+	    register long x = *l2++;
+	    *l1 ^= x;
+	    l1++;
+	}
+    }
+#endif
+    else		/* any other characteristic */
+    {   FEL *table_inv = mtx_tmult[mtx_taddinv[FF_ONE]];
+        register BYTE *p1 = dest + first * sizeof(long);
+        register BYTE *p2 = src + first * sizeof(long);
+        for (i = len*sizeof(long); i != 0; --i)
+        {
+            register int x = *p2++;
+            *p1 = mtx_tadd[*p1][table_inv[x]];
+            p1++;
+        }
+    }
+    return dest;
+}
+
+
+/**
+ ** Subtract a part of two rows.
+ ** The difference to FfSubRowPartial is that dest is replaced
+ ** by src-dest, not by dest-src.
+ ** @param dest The row to subtract.
+ ** @param src The row to subtract from.
+ ** @param first Number of long integers to skip.
+ ** @param len Number of long integers to add.
+ ** @return Always returns dest.
+ **/
+
+PTR FfSubRowPartialReverse(PTR dest, PTR src, int first, int len)
+{
+    register long i;
+
+    if (FfChar == 2)	/* characteristic 2 is simple... */
+#ifdef ASM_MMX
+	__asm__("\n	movl 8(%ebp),%ecx\n"
+		"	movl 12(%ebp),%ebx\n"
+		"	movl 16(%ebp),%edx\n"
+		"       sall $2,%edx\n"
+		"       addl %edx,%ecx\n"
+		"       addl %edx,%ebx\n"
+		"       movl 20(%ebp),%edx\n"
+		"	sarl $1,%edx\n"
+		"	je .SUBROWPART_1\n"
+		"	.align 16\n"
+		".SUBROWPART_2:\n"
+		"	movq (%ebx),%mm0\n"
+		"	addl $8,%ebx\n"
+		"	pxor (%ecx),%mm0\n"
+		"	movq %mm0,(%ecx)\n"
+		"	addl $8,%ecx\n"
+		"	decl %edx\n"
+		"	jne .SUBROWPART_2\n"
+		".SUBROWPART_1:\n"
+	       );
+#else
+    {	register long *l1 = (long *) dest + first;
+	register long *l2 = (long *) src + first;
+	for (i = len; i != 0; --i)
+	{
+	    register long x = *l2++;
+	    *l1 ^= x;
+	    l1++;
+	}
+    }
+#endif
+    else		/* any other characteristic */
+    {   FEL *table_inv = mtx_tmult[mtx_taddinv[FF_ONE]];
+        register BYTE *p1 = dest + first * sizeof(long);
+        register BYTE *p2 = src + first * sizeof(long);
+        for (i = len*sizeof(long); i != 0; --i)
+        {
+            register int x = *p2++;
+            *p1 = mtx_tadd[table_inv[*p1]][x];
+            p1++;
+        }
+    }
+    return dest;
+}
 
 
 /**
diff --git a/src/meataxe.h b/src/meataxe.h
index 819e88e..e2f5a84 100644
--- a/src/meataxe.h
+++ b/src/meataxe.h
@@ -107,6 +107,9 @@ extern int FfChar;		/**< Current characteristic */
 extern FEL FfGen;		/**< Generator */
 extern int FfNoc;		/**< Number of columns for row ops */
 extern size_t FfCurrentRowSize;
+extern int FfCurrentRowSizeIo;
+extern int MPB;         /** No. of marks per byte */
+extern int LPR;         /** Long ints per row */
 
 
 /* Arithmetic */
@@ -125,6 +128,9 @@ int FfSetNoc(int noc);
 void FfAddMulRow(PTR dest, PTR src, FEL f);
 PTR FfAddRow(PTR dest, PTR src);
 PTR FfAddRowPartial(PTR dest, PTR src, int first, int len);
+PTR FfSubRow(PTR dest, PTR src);
+PTR FfSubRowPartial(PTR dest, PTR src, int first, int len);
+PTR FfSubRowPartialReverse(PTR dest, PTR src, int first, int len);
 PTR FfAlloc(int nor);
 int FfCmpRows(PTR p1, PTR p2);
 void FfCleanRow(PTR row, PTR matrix, int nor, const int *piv);
@@ -519,6 +525,8 @@ int MatIsValid(const Matrix_t *m);
 Matrix_t *MatLoad(const char *fn);
 Matrix_t *MatMul(Matrix_t *dest, const Matrix_t *src);
 Matrix_t *MatMulScalar(Matrix_t *dest, FEL coeff);
+Matrix_t *MatMulStrassen(Matrix_t *dest, const Matrix_t *A, const Matrix_t *B);
+void StrassenSetCutoff(size_t size);
 long MatNullity(const Matrix_t *mat);
 long MatNullity__(Matrix_t *mat);
 Matrix_t *MatNullSpace(const Matrix_t *mat);
diff --git a/src/window.c b/src/window.c
new file mode 100644
index 0000000..f374028
--- /dev/null
+++ b/src/window.c
@@ -0,0 +1,944 @@
+/* ========================== C MeatAxe =============================
+   window.c -  Matrix window operations and Strassen-Winograd multiplication
+
+   (C) Copyright 2015 Simon King, Institut fuer Mathematik,
+   FSU Jena, Germany  <simon.king@uni-jena.de>
+   This program is free software; see the file COPYING for details.
+   ================================================================== */
+
+#include <string.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include "meataxe.h"
+
+/* --------------------------------------------------------------------------
+   Local data
+   -------------------------------------------------------------------------- */
+
+MTX_DEFINE_FILE_INFO
+
+typedef unsigned char BYTE;
+
+typedef struct
+{
+  int Nor;                      /* #rows of the window */
+  size_t RowSize;               /* size of window rows in long integers */
+  Matrix_t *Matrix;             /* ambient matrix containing the window */
+  PTR ULCorner;                 /* Pointer to the upper left window corner */
+}
+    MatrixWindow_t;
+
+size_t cutoff = sizeof(long)/2;
+
+/** The divide-and-conquer approach is only done for
+ * matrices with at least "cutoff*MPB*sizeof(long)" rows which
+ * are formed by at least "cutoff" longs.
+ *
+ * The above rule means that the "critical matrices" are square.
+ **/
+void StrassenSetCutoff(size_t size)
+{   if (size)
+        cutoff = size;
+    else
+        cutoff = sizeof(long)/2;
+}
+
+/* ------------------------------------------------------------------
+
+   Allocation and deallocation of a matrix window
+
+   ------------------------------------------------------------------ */
+/**
+ * Note that the rowsize is given in long, not in byte. The reason is
+ * functions such as FfAddRowPartial or FfAddMapRowWindow internally
+ * operating on longs. By consequence, in the Strassen-Winograd
+ * multiplication algorithm, we have to divide our matrix rows
+ * into longs, not into bytes.
+ **/
+
+/* Allocation with initialisation */
+/* Create an empty matrix that is identical with the window. */
+/* fl is the field size, nor is the number of rows. rowsize is */
+/* the size of a row in longs. */
+MatrixWindow_t *WindowAlloc(int fl, int nor, size_t rowsize)
+{
+    MatrixWindow_t *out;
+    out = ALLOC(MatrixWindow_t);
+    if (out == NULL)
+    {
+        MTX_ERROR1("%E",MTX_ERR_NOMEM);
+        return NULL;
+    }
+    FfSetField(fl);
+    out->Matrix = MatAlloc(fl, nor, rowsize*sizeof(long)*MPB);
+    if (out->Matrix == NULL)
+    {
+        free(out);
+        MTX_ERROR1("%E",MTX_ERR_NOMEM);
+        return NULL;
+    }
+    out->ULCorner = out->Matrix->Data;
+    out->Nor = nor;
+    out->RowSize = rowsize;
+    return out;
+}
+
+/** WARNING: Only to be used if the surrounding matrix can be destroyed
+    Otherwise, just do free(m)! **/
+void WindowFree(MatrixWindow_t *m)
+{
+    if (m->Matrix != NULL)
+      {
+    MatFree(m->Matrix);
+      }
+    free(m);
+}
+
+/* ------------------------------------------------------------------
+ * Auxiliary / Debugging
+ ----------------------------------------------------------------- */
+
+void WindowShow(MatrixWindow_t *A)
+{
+long i,j;
+PTR p = A->ULCorner;
+FfSetNoc(A->Matrix->Noc);
+for (i=A->Nor; i>0; i--, FfStepPtr(&p))
+  {
+  for (j=0; j< (A->RowSize)*sizeof(long); j++)
+    printf("%3.3d ", (unsigned char)p[j]);
+  printf("\n");
+  }
+}
+
+/**
+ ** Overwrite the window by zeroes, but let the
+ ** rest of the ambient matrix untouched
+ **/
+
+void WindowClear(MatrixWindow_t *A)
+{
+register long i;
+register size_t rowsize = A->RowSize*sizeof(long);
+PTR p = A->ULCorner;
+FfSetNoc(A->Matrix->Noc);
+for (i=A->Nor; i>0; i--, FfStepPtr(&p))
+{ memset(p, FF_ZERO, rowsize); }
+}
+
+/**
+ ** Multiply a vector by a matrix window.
+ ** This function multiplies the vector @em row from the right by the matrix window
+ ** @em mat and adds the result into @em result.
+ ** The number of columns in both @em mat and @em result is determined by @em rowsize.
+ ** @attention @em result and @em row must not overlap. Otherwise the result is
+ ** undefined.
+ ** @param row The source vector (nor columns).
+ ** @param matrix A matrix window (nor by (rowsize*sizeof(long)*MPB)) of a matrix whose rowsize is FfCurrRowSize.
+ ** @param nor number of rows in the matrix window.
+ ** @param[out] result The resulting vector ((rowsize*sizeof(long)*MPB) columns).
+ ** @param rowsize number of longs forming a row of @em mat.
+ **/
+
+void FfAddMapRowWindow(PTR row, PTR matrix, int nor, PTR result, size_t rowsize)
+
+{
+    register int i;
+    register FEL f;
+    BYTE *m = (BYTE *) matrix;
+
+#ifdef DEBUG
+    if (result >= row && result < row + FfRowSize(nor))
+    MTX_ERROR("row and result overlap: undefined result!");
+    if (row >= result && row < result + (rowsize*sizeof(long)))
+    MTX_ERROR("row and result overlap: undefined result!");
+#endif
+
+    if (FfOrder == 2)       /* GF(2) is a special case */
+    {
+        register long *x1 = (long *) matrix;
+        register BYTE *r = (BYTE *) row;
+
+        for (i = nor; i > 0; ++r)
+        {
+            register BYTE mask;
+            if (*r == 0)
+            {
+                i -= 8;
+                x1 += 8 * LPR;  /* Skip 8 rows of the matrix window in the ambient matrix*/
+                continue;
+            }
+            for (mask = 0x80; mask != 0 && i > 0; mask >>= 1, --i)
+            {
+                if ((mask & *r) == 0)
+                {
+                    x1 += LPR;  /* Skip a single row */
+                    continue;
+                }
+
+#ifdef ASM_MMX
+__asm__("    pushl %ebx\n");
+__asm__("    movl %0,%%ebx" : : "g" (x1) );
+__asm__("    pushl %ecx\n"
+    "    pushl %edx\n"
+    "    movl 20(%ebp),%ecx\n"  /* result */
+    );
+__asm__ (
+        "    movl 24(%ebp),%edx\n"   /* this time, it is rowsize, not LPR */
+        "    sarl $1,%edx\n"
+        "    je .FASTXOR_1\n"
+        "    .align 16\n"
+    ".FASTXOR_2:\n"
+        "    movq (%ebx),%mm0\n"
+        "    addl $8,%ebx\n"
+        "    pxor (%ecx),%mm0\n"
+        "    movq %mm0,(%ecx)\n"
+        "    addl $8,%ecx\n"
+        "    decl %edx\n"
+        "    jne .FASTXOR_2\n"
+    ".FASTXOR_1:\n"
+    "    popl %edx\n"
+    "    popl %ecx\n");
+__asm__("    movl %%ebx,%0" : : "g" (x1) );
+__asm__("    popl %ebx\n"
+    );
+#else
+                {
+                    register long *x2 = (long *)result;
+                    register int k;
+                    for (k = rowsize; k; --k)
+                        *x2++ ^= *x1++;
+                    /* Now, x1 points to the first item
+                     * after the current line of the window.
+                     * We need to move it to the first position
+                     * of the next line of the window.
+                     */
+                    x1 += (LPR-rowsize);
+                }
+#endif
+            }
+        }
+    }
+    else                /* Any other field */
+    {
+        register BYTE *brow = (BYTE *) row;
+        register int pos = 0;
+        size_t l_rowsize = rowsize*sizeof(long);
+        for (i = nor; i > 0; --i)
+        {
+            f = mtx_textract[pos][*brow];
+            if (++pos == (int) MPB)
+            {
+                pos = 0;
+                ++brow;
+            }
+            if (f != FF_ZERO)
+            {
+                register BYTE *v = m;
+                register BYTE *r = result;
+                if (f == FF_ONE)
+                {
+                    register size_t k = l_rowsize;
+                    for (; k != 0; --k)
+                    {
+                        *r = mtx_tadd[*r][*v++];
+                        ++r;
+                    }
+                }
+                else
+                {
+                    register BYTE *multab = mtx_tmult[f];
+                    register size_t k = l_rowsize;
+                    for (; k != 0; --k)
+                    {
+                        if (*v != 0)
+                            *r = mtx_tadd[multab[*v]][*r];
+                        ++v;
+                        ++r;
+                    }
+                }
+            }
+            m += FfCurrentRowSize;  /* next row of window in the ambient matrix */
+        }
+    }
+}
+
+/** dest := left+right
+   left and right must be distinct, but one of them may coincide with dest -- under the assumption
+   that, in that case, the ambient matrices coincide as well. **/
+MatrixWindow_t *WindowSum(MatrixWindow_t *dest, MatrixWindow_t *left, MatrixWindow_t *right)
+{
+  PTR x, result, tmp;
+  int i;
+
+  int lnoc, rnoc, dnoc;
+
+  FfSetField(left->Matrix->Field);
+  if (left->Matrix->Field != right->Matrix->Field || (left->Nor != right->Nor) || (left->RowSize != right->RowSize))
+    {
+      MTX_ERROR1("Windows cannot be added: %E", MTX_ERR_INCOMPAT);
+      return NULL;
+    }
+  size_t rowsize = left->RowSize;
+
+  lnoc = left->Matrix->Noc;
+  rnoc = right->Matrix->Noc;
+  dnoc = dest->Matrix->Noc;
+  /* We have to distinguish cases as to whether dest
+     is equal to either left or right */
+  result = dest->ULCorner;
+  if (left->ULCorner == dest->ULCorner)
+    {   /* we write into left */
+        x = right->ULCorner;
+        for (i = left->Nor; i != 0; --i)
+        {
+            FfAddRowPartial(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(rnoc);
+            FfStepPtr(&x);
+        }
+    }
+  else if (right->ULCorner == dest->ULCorner)
+    {   /* we write into right */
+        x = left->ULCorner;
+        for (i = left->Nor; i != 0; --i)
+        {
+            FfAddRowPartial(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(lnoc);
+            FfStepPtr(&x);
+        }
+    }
+  else
+    {   /* we need to copy left into dest first */
+        x = right->ULCorner;
+        tmp = left->ULCorner;
+        size_t l_rowsize = rowsize * sizeof(long);
+        for (i = left->Nor; i != 0; --i)
+        {
+            memcpy(result, tmp, l_rowsize);
+            FfSetNoc(lnoc);
+            FfStepPtr(&tmp);
+            FfAddRowPartial(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(rnoc);
+            FfStepPtr(&x);
+        }
+    }
+  return dest;
+}
+
+/** dest := left-right
+   left and right must be distinct, but one of them may coincide with dest -- under the assumption
+   that, in that case, the ambient matrices coincide as well.
+**/
+MatrixWindow_t *WindowDif(MatrixWindow_t *dest, MatrixWindow_t *left, MatrixWindow_t *right)
+{
+  PTR x, result, tmp;
+  int i;
+  int lnoc, rnoc, dnoc;
+
+  FfSetField(left->Matrix->Field);
+  if (left->Matrix->Field != right->Matrix->Field || (left->Nor != right->Nor) || (left->RowSize != right->RowSize))
+    {
+      MTX_ERROR1("Windows cannot be subtracted: %E", MTX_ERR_INCOMPAT);
+      return NULL;
+    }
+  size_t rowsize = left->RowSize;
+
+  lnoc = left->Matrix->Noc;
+  rnoc = right->Matrix->Noc;
+  dnoc = dest->Matrix->Noc;
+  /* We have to distinguish cases as to whether dest
+     is equal to either left or right */
+  result = dest->ULCorner;
+  if (left->ULCorner == dest->ULCorner)
+    {   /* we write into left */
+        x = right->ULCorner;
+        for (i = left->Nor; i != 0; --i)
+        {
+            FfSubRowPartial(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(rnoc);
+            FfStepPtr(&x);
+        }
+    }
+  else if (right->ULCorner == dest->ULCorner)
+    {   /* we write into right */
+        x = left->ULCorner;
+        for (i = left->Nor; i != 0; --i)
+        {
+            FfSubRowPartialReverse(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(lnoc);
+            FfStepPtr(&x);
+        }
+    }
+  else
+    {   /* we need to copy left into dest first */
+        x = right->ULCorner;
+        tmp = left->ULCorner;
+        size_t l_rowsize = rowsize * sizeof(long);
+        for (i = left->Nor; i != 0; --i)
+        {
+            memcpy(result, tmp, l_rowsize);
+            FfSetNoc(lnoc);
+            FfStepPtr(&tmp);
+            FfSubRowPartial(result, x, 0, rowsize);
+            FfSetNoc(dnoc);
+            FfStepPtr(&result);
+            FfSetNoc(rnoc);
+            FfStepPtr(&x);
+        }
+    }
+  return dest;
+}
+
+/**
+   Add left*right to dest.
+
+   It is assumed that "dest->Matrix" is allocated (with the correct field and dimensions as well), so that we
+   can write the result into it. Moreover, the chunk of memory pointed at by dest MUST be disjoint
+   from the chunks for left and right!
+
+   Dimensions are not tested!
+**/
+MatrixWindow_t *WindowAddMul(MatrixWindow_t *dest, MatrixWindow_t *left, MatrixWindow_t *right)
+{
+    PTR x, y, result;
+    long i;
+
+    FfSetField(left->Matrix->Field);
+    x = left->ULCorner;
+    y = right->ULCorner;
+    result = dest->ULCorner;
+
+    for (i = dest->Nor; i != 0; --i)
+    {
+      /* Set the noc of the surrounding matrix of the right factor,
+     which is assumed by zmaprow_window */
+      FfSetNoc(right->Matrix->Noc);
+      FfAddMapRowWindow(x, y, right->Nor, result, right->RowSize);
+      /* We want to step to the next line of the left factor */
+      FfSetNoc(left->Matrix->Noc);
+      FfStepPtr(&x);
+      /* We want to step to the next line of the result */
+      FfSetNoc(dest->Matrix->Noc);
+      FfStepPtr(&result);
+    }
+    /*
+      dest->RowSize = right->RowSize;
+      dest->Nor = left->Nor;
+    */
+    return dest;
+}
+
+inline void MatrixToWindow (MatrixWindow_t *out, const Matrix_t *M, long nor, long rowsize, PTR p)
+/* presumably M will be freed separately. Hence, use free(...) to free
+   the result of this function
+*/
+{
+  out->Matrix = M;
+  out->Nor = nor;
+  out->RowSize = rowsize;
+  out->ULCorner = p;
+}
+
+/**
+ ** Multiply matrix windows
+ ** This function multiplies @em A_win from the right by @em B_win and writes
+ ** the result into @em dest_win.
+ ** The matrix windows must be compatible for multiplication, i.e. they must be over
+ ** the same field, and the number of columns of @em A_win must be equal to the
+ ** number of rows of @em B_win.
+ ** Moreover, it is assumed that @em dest_win is allocated in the right dimensions.
+ ** Since parts of @em dest_win are used to store temporary results, it is essential
+ ** that @em dest_win initially is zero!
+ ** @param[out] dest_win Result.
+ ** @param A_win Left factor.
+ ** @param B_win Right factor
+ ** @return The function returns 0 on success and a nonzero value on error.
+ **/
+
+int StrassenStep(MatrixWindow_t *dest_win, MatrixWindow_t *A_win, MatrixWindow_t *B_win)
+{
+  FfSetField(A_win->Matrix->Field);
+  int MPL = MPB*sizeof(long);
+  int full_nrow_cutoff = cutoff*MPL;
+  /* Determine the size of submatrices in divide-and-conquer */
+  /**
+   * Note that the rowsize is given in the unit "long".
+   * Generally we have trailing padding empty bytes. We have to cut
+   * so that two full blocks fit into the non-padded area. This is what we do:
+   * - We halve the number of rows of A (rounded down).
+   * - We halve the rowsize of B (rounded down) , since padding doesn't matter here.
+   * - We determine how many FULL longs fit into a *row* (of A) of B->Nor items.
+   *   Half of it (rounded down) gives the rowsize of A's submatrices.
+   * - From that rowsize, we obtain the corresponding number of rows of
+   *   B's submatrices.
+   **/
+  /*
+  printf("we start with A_win\n");
+  WindowShow(A_win);
+  */
+  int A_sub_nrows = A_win->Nor/2;
+  size_t B_sub_rowsize = B_win->RowSize/2;
+  size_t A_sub_rowsize = (B_win->Nor/MPL)/2;
+  int B_sub_nrows = A_sub_rowsize*MPL;
+  /*printf("A_sub_nrows %d\nA_subrowsize %d\nB_sub_nrows %d\nB_sub_rowsize %d\n", A_sub_nrows,A_sub_rowsize,B_sub_nrows,B_sub_rowsize);*/
+
+  /* If the submatrices were too small, we use school book multiplication */
+  if ((A_sub_nrows < full_nrow_cutoff) ||
+      (B_sub_nrows < full_nrow_cutoff) ||
+      (A_sub_rowsize < cutoff) ||
+      (B_sub_rowsize < cutoff))
+    {
+      /* The ambient matrix of dest_win is supposed to be empty. Thus, we add rather than overwrite */
+      /* printf("Classical for %d x %d and %d x %d\n", A_win->Nor, A_win->RowSize*MPB*sizeof(long), B_win->Nor, B_win->RowSize*MPB*sizeof(long));*/
+      WindowAddMul(dest_win, A_win, B_win);
+      return 0;
+    }
+  /* printf("Strassen step for %d x %d and %d x %d\n", A_win->Nor, A_win->RowSize*MPB*sizeof(long), B_win->Nor, B_win->RowSize*MPB*sizeof(long));*/
+  size_t B_sub_rowsize2 = B_sub_rowsize + B_sub_rowsize;
+  size_t A_sub_rowsize2 = A_sub_rowsize + A_sub_rowsize;
+  size_t B_sub_rowsize2b = B_sub_rowsize2*sizeof(long); /* size in byte */
+  size_t A_sub_rowsize2b = A_sub_rowsize2*sizeof(long);
+  int B_sub_nrows2 = B_sub_nrows + B_sub_nrows;
+  int A_sub_nrows2 = A_sub_nrows + A_sub_nrows;
+
+  Matrix_t *A, *B, *dest;
+  A = A_win->Matrix;
+  B = B_win->Matrix;
+  dest = dest_win->Matrix;
+
+  /* Because of rounding, there are stripes on the right
+   * and the lower boundary that are not part of the
+   * clean divide-and-conquer algorithm.
+   * */
+  int A_nrows_rem = A_win->Nor - A_sub_nrows2;
+  size_t A_rowsize_rem = A_win->RowSize - A_sub_rowsize2;
+
+  int B_nrows_rem = B_win->Nor - B_sub_nrows2;
+  size_t B_rowsize_rem = B_win->RowSize - B_sub_rowsize2;
+
+  /* ----------------------------------------------------
+   * Allocate temporary space.
+   * We use a schedule introduced by Douglas-Heroux-Slishman-Smith
+   * (see also Boyer-Pernet-Zhou, "Memory efficient scheduling of
+   * Strassen-Winograd's matrix multiplication algorithm", Table 1).
+     ---------------------------------------------------- */
+
+  MatrixWindow_t *X, *Y;
+  if (A_sub_rowsize>B_sub_rowsize)
+    {
+      X = WindowAlloc(A->Field, A_sub_nrows, A_sub_rowsize); }
+  else
+    {
+      X = WindowAlloc(A->Field, A_sub_nrows, B_sub_rowsize); }
+  if (X == NULL)
+  {  MTX_ERROR1("Error allocating a temporary window: %E",MTX_ERR_NOMEM);
+     return 1;
+  }
+  Y = WindowAlloc(A->Field, B_sub_nrows, B_sub_rowsize);
+  if (Y == NULL)
+    {
+      WindowFree(X);
+      MTX_ERROR1("Error allocating a temporary window: %E",MTX_ERR_NOMEM);
+      return 1;
+    }
+
+  /* Define the sub-windows of A, B and dest */
+  /*
+  printf("original windows\n");
+  printf("A\n");
+  WindowShow(A_win);
+  printf("B\n");
+  WindowShow(B_win);
+  printf("dest\n");
+  WindowShow(dest_win);
+  printf("scratch X\n");
+  WindowShow(X);
+  printf("scratch Y\n");
+  WindowShow(Y);
+  */
+  FfSetNoc(A->Noc);
+  MatrixWindow_t A00[1], A01[1], A10[1], A11[1], B00[1], B01[1], B10[1], B11[1];
+  MatrixWindow_t A_last_col[1], A_last_row[1];
+  MatrixWindow_t B_last_col[1], B_last_row[1], B_bulk[1];
+  MatrixWindow_t dest_last_col[1], dest_last_row[1], dest_bulk[1];
+  MatrixToWindow(A00, A, A_sub_nrows, A_sub_rowsize, A_win->ULCorner);
+  MatrixToWindow(A01, A, A_sub_nrows, A_sub_rowsize, (PTR)((char*)(A_win->ULCorner)+A_sub_rowsize*sizeof(long)));
+  MatrixToWindow(A10, A, A_sub_nrows, A_sub_rowsize, FfGetPtr(A_win->ULCorner, A_sub_nrows));
+  MatrixToWindow(A11, A, A_sub_nrows, A_sub_rowsize,
+          (PTR)((char*)(A_win->ULCorner)+(A_sub_nrows*FfCurrentRowSize+A_sub_rowsize*sizeof(long))));
+  /*
+  printf("A00\n");
+  WindowShow(A00);
+  printf("A01\n");
+  WindowShow(A01);
+  printf("A10\n");
+  WindowShow(A10);
+  printf("A11\n");
+  WindowShow(A11);
+  */
+  FfSetNoc(B->Noc);
+  MatrixToWindow(B00, B, B_sub_nrows, B_sub_rowsize, B_win->ULCorner);
+  MatrixToWindow(B01, B, B_sub_nrows, B_sub_rowsize, (PTR)((char*)(B_win->ULCorner)+B_sub_rowsize*sizeof(long)));
+  MatrixToWindow(B10, B, B_sub_nrows, B_sub_rowsize, FfGetPtr(B_win->ULCorner, B_sub_nrows));
+  MatrixToWindow(B11, B, B_sub_nrows, B_sub_rowsize,
+          (PTR)((char*)(B_win->ULCorner)+(B_sub_nrows*FfCurrentRowSize+B_sub_rowsize*sizeof(long))));
+  /*
+  printf("B00\n");
+  WindowShow(B00);
+  printf("B01\n");
+  WindowShow(B01);
+  printf("B10\n");
+  WindowShow(B10);
+  printf("B11\n");
+  WindowShow(B11);
+  */
+  FfSetNoc(dest->Noc);  // since we may multiply into X, the size is not necessarily the same as for B.
+  PTR dest00 = dest_win->ULCorner;
+  PTR dest01 = (PTR)((char*)(dest_win->ULCorner)+B_sub_rowsize*sizeof(long));
+  PTR dest10 = FfGetPtr(dest_win->ULCorner,A_sub_nrows);
+  PTR dest11 = (PTR)((char*)(dest_win->ULCorner)+(A_sub_nrows*FfCurrentRowSize)+B_sub_rowsize*sizeof(long));
+
+  /* Matrix windows containing temporary results */
+  MatrixWindow_t S0[1], S1[1], S2[1], S3[1], T0[1], T1[1], T2[1], T3[1], P0[1], P1[1], P2[1], P3[1], P4[1], P5[1], P6[1], U0[1], U1[1], U2[1], U3[1], U4[1], U5[1], U6[1];
+
+  /* 1.  S2 = A00-A10 in X */
+  S2->Nor = A_sub_nrows;
+  S2->RowSize = A_sub_rowsize;
+  S2->Matrix = X->Matrix;
+  S2->ULCorner = X->ULCorner;
+  WindowDif(S2, A00, A10);
+  /*
+  printf("1.  S2 = A00-A10 in X\n");
+  WindowShow(X);
+  printf("resp.\n");
+  WindowShow(S2);
+  */
+
+  /* 2.  T2 = B11-B01 in Y */
+  T2->Nor = B_sub_nrows;
+  T2->RowSize = B_sub_rowsize;
+  T2->Matrix = Y->Matrix;
+  T2->ULCorner = Y->ULCorner;
+  WindowDif(T2, B11, B01);
+  /*
+  printf("2.  T2 = B11-B01 in Y\n");
+  WindowShow(Y);
+  */
+
+  /* 3.  P6 = S2*T2 in dest10 */
+  P6->Nor = A_sub_nrows;
+  P6->RowSize = B_sub_rowsize;
+  P6->Matrix = dest;
+  P6->ULCorner = dest10;
+  /* dest is supposed to be empty */
+  if (StrassenStep(P6, S2, T2)) return 1;
+  /*
+  printf("3.  P6 = S2*T2 in dest10\n");
+  WindowShow(dest_win);
+  */
+
+  /* 4.  S0 = A10+A11 in X */
+  S0->Nor = A_sub_nrows;
+  S0->RowSize = A_sub_rowsize;
+  S0->Matrix = X->Matrix;
+  S0->ULCorner = X->ULCorner;
+  WindowSum(S0, A10, A11);
+  /*
+  printf("4.  S0 = A10+A11 in X\n");
+  WindowShow(X);
+  */
+
+  /* 5.  T0 = B01-B00 in Y */
+  T0->Nor = B_sub_nrows;
+  T0->RowSize = B_sub_rowsize;
+  T0->Matrix = Y->Matrix;
+  T0->ULCorner = Y->ULCorner;
+  WindowDif(T0, B01, B00);
+  /*
+  printf("5.  T0 = B01-B00 in Y\n");
+  WindowShow(Y);
+  */
+
+  /* 6.  P4 = S0*T0 in dest11 */
+  P4->Nor = A_sub_nrows;
+  P4->RowSize = B_sub_rowsize;
+  P4->Matrix = dest;
+  P4->ULCorner = dest11;
+  /* dest is supposed to be empty */
+  if (StrassenStep(P4, S0, T0)) return 1;
+  /*
+  printf("6.  P4 = S0*T0 in dest11\n");
+  WindowShow(dest_win);
+  */
+
+  /* 7.  S1 = S0-A00 in X */
+  S1->Nor = A_sub_nrows;
+  S1->RowSize = A_sub_rowsize;
+  S1->Matrix = X->Matrix;
+  S1->ULCorner = X->ULCorner;
+  WindowDif(S1, S0, A00);
+  /*
+  printf("7.  S1 = S0-A00 in X\n");
+  WindowShow(X);
+  */
+
+  /* 8.  T1 = B11-T0 in Y */
+  T1->Nor = B_sub_nrows;
+  T1->RowSize = B_sub_rowsize;
+  T1->Matrix = Y->Matrix;
+  T1->ULCorner = Y->ULCorner;
+  WindowDif(T1, B11, T0);
+  /*
+  printf("8.  T1 = B11-T0 in Y\n");
+  WindowShow(Y);
+  */
+
+  /* 9.  P5 = S1*T1 in dest01 */
+  P5->Nor = A_sub_nrows;
+  P5->RowSize = B_sub_rowsize;
+  P5->Matrix = dest;
+  P5->ULCorner = dest01;
+  /* dest is supposed to be empty */
+  if (StrassenStep(P5, S1, T1)) return 1;
+  /*
+  printf("9.  P5 = S1*T1 in dest01\n");
+  WindowShow(dest_win);
+  */
+
+  /*10.  S3 = A01-S1 in X */
+  S3->Nor = A_sub_nrows;
+  S3->RowSize = A_sub_rowsize;
+  S3->Matrix = X->Matrix;
+  S3->ULCorner = X->ULCorner;
+  WindowDif(S3, A01, S1);
+  /*
+  printf("10.  S3 = A01-S1 in X\n");
+  WindowShow(X);
+  */
+
+  /*11.  P2 = S3*B11 in dest00 */
+  P2->Nor = A_sub_nrows;
+  P2->RowSize = B_sub_rowsize;
+  P2->Matrix = dest;
+  P2->ULCorner = dest00;
+  /* That part of dest is still supposed to be empty */
+  if (StrassenStep(P2, S3, B11)) return 1;
+  /*
+  printf("11.  P2 = S3*B11 in dest00\n");
+  WindowShow(dest_win);
+  */
+
+  /*12.  P0 = A00*B00 in X */
+  P0->Nor = A_sub_nrows;
+  P0->RowSize = B_sub_rowsize;
+  P0->Matrix = X->Matrix;
+  P0->ULCorner = X->ULCorner;
+  /*
+     This time, the matrix we write our product to may be non-empty.
+     Hence, we clear the destination first.
+  */
+  WindowClear(P0);
+  if (StrassenStep(P0, A00, B00)) return 1;
+  /*
+  printf("12. P0 = A00*B00 in X\n");
+  WindowShow(X);
+  */
+
+  /*13.  U1 = P0+P5 in dest01 */
+  U1->Nor = A_sub_nrows;
+  U1->RowSize = B_sub_rowsize;
+  U1->Matrix = dest;
+  U1->ULCorner = dest01;
+  WindowSum(U1, P0, P5);
+  /*
+  printf("13.  U1 = P0+P5 in dest01\n");
+  WindowShow(dest_win);
+  */
+
+  /*14.  U2 = U1+P6 in dest10 */
+  U2->Nor = A_sub_nrows;
+  U2->RowSize = B_sub_rowsize;
+  U2->Matrix = dest;
+  U2->ULCorner = dest10;
+  WindowSum(U2, U1, P6);
+  /*
+  printf("14.  U2 = U1+P6 in dest10\n");
+  WindowShow(dest_win);
+  */
+
+  /*15.  U3 = U1+P4 in dest01 */
+  U3->Nor = A_sub_nrows;
+  U3->RowSize = B_sub_rowsize;
+  U3->Matrix = dest;
+  U3->ULCorner = dest01;
+  WindowSum(U3, U1, P4);
+  /*
+  printf("15.  U3 = U1+P4 in dest01\n");
+  WindowShow(dest_win);
+  */
+
+  /*16.  U6 = U2+P4 in dest11 (final) */
+  U6->Nor = A_sub_nrows;
+  U6->RowSize = B_sub_rowsize;
+  U6->Matrix = dest;
+  U6->ULCorner = dest11;
+  WindowSum(U6, U2, P4);
+  /*
+  printf("16.  U6 = U2+P4 in dest11 (final)\n");
+  WindowShow(dest_win);
+  */
+
+  /*17.  U4 = U3+P2 in dest01 (final) */
+  U4->Nor = A_sub_nrows;
+  U4->RowSize = B_sub_rowsize;
+  U4->Matrix = dest;
+  U4->ULCorner = dest01;
+  WindowSum(U4, U3, P2);
+  /*
+  printf("17.  U4 = U3+P2 in dest01 (final)\n");
+  WindowShow(dest_win);
+  */
+
+  /*18.  T3 = T1-B10 in Y */
+  T3->Nor = B_sub_nrows;
+  T3->RowSize = B_sub_rowsize;
+  T3->Matrix = Y->Matrix;
+  T3->ULCorner = Y->ULCorner;
+  WindowDif(T3, T1, B10);
+  /*
+  printf("18.  T3 = T1-B10 in Y\n");
+  WindowShow(Y);
+  */
+
+  /*19.  P3 = A11*T3 in dest00 */
+  P3->Nor = A_sub_nrows;
+  P3->RowSize = B_sub_rowsize;
+  P3->Matrix = dest;
+  P3->ULCorner = dest00;
+  /* Meanwhile dest00 is non-empty. Hence, overwrite */
+  WindowClear(P3);
+  if (StrassenStep(P3, A11, T3)) return 1;
+  /*
+  printf("19.  P3 = A11*T3 in dest00\n");
+  WindowShow(dest_win);
+  */
+
+  /*20.  U5 = U2-P3 in dest10 (final) */
+  U5->Nor = A_sub_nrows;
+  U5->RowSize = B_sub_rowsize;
+  U5->Matrix = dest;
+  U5->ULCorner = dest10;
+  WindowDif(U5, U2, P3);
+  /*
+  printf("20.  U5 = U2-P3 in dest10 (final)\n");
+  WindowShow(dest_win);
+  */
+
+  /*21.  P1 = A01*B10 in dest00 */
+  P1->Nor = A_sub_nrows;
+  P1->RowSize = B_sub_rowsize;
+  P1->Matrix = dest;
+  P1->ULCorner = dest00;
+  /* Again, we need to overwrite */
+  WindowClear(P1);
+  if (StrassenStep(P1, A01, B10)) return 1;
+  /*
+  printf("21.  P1 = A01*B10 in dest00\n");
+  WindowShow(dest_win);
+  */
+
+  /*22.  U0 = P0+P1 in dest00 (final) */
+  U0->Nor = A_sub_nrows;
+  U0->RowSize = B_sub_rowsize;
+  U0->Matrix = dest;
+  U0->ULCorner = dest00;
+  WindowSum(U0, P0, P1);
+  /*
+  printf("22.  U0 = P0+P1 in dest00 (final)\n");
+  WindowShow(dest_win);
+  */
+  WindowFree(X);
+  WindowFree(Y);
+
+  /* ---------------------------------------------------------
+     Deal with the leftovers on the bottom and the right wing
+     --------------------------------------------------------- */
+
+  if (B_rowsize_rem)
+    {
+      MatrixToWindow(B_last_col, B, B_win->Nor, B_rowsize_rem, (PTR)((char*)(B_win->ULCorner) + B_sub_rowsize2b));
+      MatrixToWindow(dest_last_col, dest, A_win->Nor, B_rowsize_rem, (PTR)((char*)(dest_win->ULCorner) + B_sub_rowsize2b));
+      /* that part of dest is still supposed to be empty, so we can add the product */
+      WindowAddMul(dest_last_col, A_win, B_last_col);
+    }
+  if (A_nrows_rem)
+    {
+      FfSetNoc(A->Noc);
+      MatrixToWindow(A_last_row, A, A_nrows_rem, A_win->RowSize, (PTR)((char*)(A_win->ULCorner) + (A_sub_nrows2*FfCurrentRowSize)));
+      if (B_rowsize_rem) /* We have already considered the lower right corner in the previous if-clause */
+      {
+          MatrixToWindow(B_bulk, B, B_win->Nor, B_sub_rowsize2, B_win->ULCorner);
+          FfSetNoc(dest->Noc);
+          MatrixToWindow(dest_last_row, dest, A_nrows_rem, B_sub_rowsize2, (PTR)((char*)(dest_win->ULCorner) + (A_sub_nrows2*FfCurrentRowSize)));
+          /* that part of dest is still supposed to be empty, so we can add the product */
+          WindowAddMul(dest_last_row, A_last_row, B_bulk);
+      }
+      else
+      {
+          FfSetNoc(dest->Noc);
+          MatrixToWindow(dest_last_row, dest, A_nrows_rem, B_win->RowSize, (PTR)((char*)(dest_win->ULCorner) + (A_sub_nrows2*FfCurrentRowSize)));
+          /* that part of dest is still supposed to be empty, so we can add the product */
+          WindowAddMul(dest_last_row, A_last_row, B_win);
+      }
+    }
+  if (A_rowsize_rem)
+    { /* By the above operations, we don't need to consider the lower right corner of either A or B. */
+      MatrixToWindow(A_last_col, A, A_sub_nrows2, A_rowsize_rem, (PTR)((char*)(A_win->ULCorner) + A_sub_rowsize2b));
+      FfSetNoc(B->Noc);
+      MatrixToWindow(B_last_row, B, B_nrows_rem, B_sub_rowsize2, (PTR)((char*)(B_win->ULCorner) + (B_sub_nrows2*FfCurrentRowSize)));
+      FfSetNoc(dest->Noc);
+      MatrixToWindow(dest_bulk, dest, A_sub_nrows2, B_sub_rowsize2, dest_win->ULCorner);
+      /* now we are supposed to add the product to the result obtained so far */
+      WindowAddMul(dest_bulk, A_last_col, B_last_row);
+    }
+  return 0;
+}
+
+/**
+ ** Multiply matrices
+ ** This function multiplies @em A from the right by @em B and writes
+ ** the result into @em dest.
+ ** The matrices must be compatible for multiplication, i.e. they must be over
+ ** the same field, and the number of columns of @em A must be equal to the
+ ** number of rows of @em B.
+ ** Moreover, it is assumed that @em dest is allocated in the right dimensions.
+ ** Since parts of @em dest are used to store temporary results, it is essential
+ ** that @em dest initially is zero!
+ ** @param[out] dest Result.
+ ** @param A Left factor.
+ ** @param B Right factor
+ ** @return The function returns @em dest, or NULL on error.
+ **/
+Matrix_t *MatMulStrassen(Matrix_t *dest, const Matrix_t *A, const Matrix_t *B)
+{
+  FfSetField(A->Field);
+  MatrixWindow_t A_win[1], B_win[1], dest_win[1];
+  FfSetNoc(A->Noc);
+  MatrixToWindow(A_win, A, A->Nor, LPR, A->Data);
+  FfSetNoc(B->Noc);
+  MatrixToWindow(B_win, B, B->Nor, LPR, B->Data);
+  FfSetNoc(dest->Noc);
+  MatrixToWindow(dest_win, dest, A->Nor, LPR, dest->Data);
+  if (StrassenStep(dest_win, A_win, B_win)) return NULL;
+  return dest;
+}
