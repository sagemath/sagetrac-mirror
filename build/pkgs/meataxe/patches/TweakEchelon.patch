Improve echelon computation by restricting FfAddMulRow to the
nonzero part of the to-be-added row.

Also remove some compiler warnings.

AUTHOR:

- Simon King, 2015-09-22
diff --git a/src/c-kernel.c b/src/c-kernel.c
index f74e97e..d4355bc 100644
--- a/src/c-kernel.c
+++ b/src/c-kernel.c
@@ -311,13 +311,10 @@ void TestFelToInt(unsigned flags)
 static void TestSubfield1(int fld, int sub)
 
 {
-    FEL tabfld[256], tabsub[256];
+    FEL tabsub[256];
     FEL tabemb[256];
     int i;
 
-    FfSetField(fld);
-    for (i = 0; i < fld; ++i) 
-	tabfld[i] = FfFromInt(i);
     FfSetField(sub);
     for (i = 0; i < sub; ++i) 
 	tabsub[i] = FfFromInt(i);
diff --git a/src/cfcomp.c b/src/cfcomp.c
index 7434549..fa739d6 100644
--- a/src/cfcomp.c
+++ b/src/cfcomp.c
@@ -131,7 +131,7 @@ static void Compare(const char *name)
 {
     ReadGens(name);
     FindEquiv(name);
-    FreeGens(name);
+    FreeGens();
 }
 
 
diff --git a/src/kernel-0.c b/src/kernel-0.c
index 178b6cb..6ef2f72 100644
--- a/src/kernel-0.c
+++ b/src/kernel-0.c
@@ -919,6 +919,54 @@ PTR FfSubRowPartialReverse(PTR dest, PTR src, int first, int len)
     return dest;
 }
 
+/**
+ ** Add a multiple of a part of a row.
+ ** This function adds a multiple of @em src to @em dest.
+ ** This works like FfAddRow(), but the operation is performed only on a given range of
+ ** columns.
+ ** @param dest The row to add to.
+ ** @param src The row to add.
+ ** @param first Number of bytes to skip.
+ ** @param len Number of bytes to add.
+**/
+/* Warning!! Let L be the long integer to which the first byte of the a row
+ * belongs. It is assumed that all previous bytes in L are zero!
+ * Moreover, it is assumed that either the part of the rows ends at the
+ * end of the row, or that it ends with a full long.
+ */
+void FfAddMulRowPartial(PTR dest, PTR src, FEL f, int first, int len)
+{
+    register int i;
+    register BYTE *p1, *p2, *multab;
+
+    CHECKFEL(f);
+    if (f == FF_ZERO)
+    return;
+    int lfirst;
+    if (f == FF_ONE)
+    {
+        lfirst = first/sizeof(long);
+        if (first+len>=FfCurrentRowSizeIo)
+        {
+            FfAddRowPartial(dest,src,lfirst,FfCurrentRowSize/sizeof(long)-lfirst);
+            return;
+        }
+        FfAddRowPartial(dest,src,lfirst,(first+len)/sizeof(long)-lfirst);
+        return;
+    }
+    multab = mtx_tmult[f];
+    p1 = dest + first;
+    p2 = src + first;
+    int rem = FfCurrentRowSizeIo - first;
+    if (rem > len) rem = len;
+    for (i = rem; i != 0; --i)
+    {
+        register BYTE x = *p2++;
+        if (x!=0)
+            *p1 = mtx_tadd[*p1][multab[x]];
+        ++p1;
+    }
+}
 
 /**
  ** Multiply a row by a coefficient.
@@ -977,10 +1025,12 @@ void FfAddMulRow(PTR dest, PTR src, FEL f)
     multab = mtx_tmult[f];
     p1 = dest;
     p2 = src;
-    for (i = FfTrueRowSize(FfNoc); i != 0; --i)
+    for (i = FfCurrentRowSizeIo; i != 0; --i)
     {
-	*p1 = mtx_tadd[*p1][multab[*p2++]];
-	++p1;
+        register BYTE x = *p2++;
+        if (x!=0)
+            *p1 = mtx_tadd[*p1][multab[x]];
+        ++p1;
     }
 }
 
@@ -1131,7 +1181,9 @@ __asm__("    popl %ebx\n"
                 {
                     for (; k != 0; --k)
                     {
-                        *r = mtx_tadd[*r][*v++];
+                        register BYTE x = *v++;
+                        if (x!=0)
+                            *r = mtx_tadd[*r][x];
                         ++r;
                     }
                 }
@@ -1140,9 +1192,9 @@ __asm__("    popl %ebx\n"
                     register BYTE *multab = mtx_tmult[f];
                     for (; k != 0; --k)
                     {
-		 	if (*v != 0)
-			    *r = mtx_tadd[multab[*v]][*r];
-			++v;
+                        if (*v != 0)
+                            *r = mtx_tadd[multab[*v]][*r];
+                        ++v;
                         ++r;
                     }
                 }
diff --git a/src/matcopy.c b/src/matcopy.c
index 75b29c0..457dfeb 100644
--- a/src/matcopy.c
+++ b/src/matcopy.c
@@ -57,7 +57,10 @@ int MatCopyRegion(Matrix_t *dest, int destrow, int destcol,
     if (!MatIsValid(src) || !MatIsValid(dest))
 	return -1;
     if (src->Field != dest->Field)
-	return MTX_ERROR1("%E",MTX_ERR_INCOMPAT), -1;
+    {
+        MTX_ERROR1("%E",MTX_ERR_INCOMPAT);
+        return -1;
+    }
     if (nrows == -1)
 	nrows = src->Nor - row1;
     if (ncols == -1)
diff --git a/src/meataxe.h b/src/meataxe.h
index 5123f1c..368b37b 100644
--- a/src/meataxe.h
+++ b/src/meataxe.h
@@ -126,6 +126,7 @@ int FfSetNoc(int noc);
 
 
 void FfAddMulRow(PTR dest, PTR src, FEL f);
+void FfAddMulRowPartial(PTR dest, PTR src, FEL f, int first, int len);
 PTR FfAddRow(PTR dest, PTR src);
 PTR FfAddRowPartial(PTR dest, PTR src, int first, int len);
 PTR FfSubRow(PTR dest, PTR src);
diff --git a/src/window.c b/src/window.c
index f374028..9c87694 100644
--- a/src/window.c
+++ b/src/window.c
@@ -236,12 +236,14 @@ __asm__("    popl %ebx\n"
             {
                 register BYTE *v = m;
                 register BYTE *r = result;
+                register BYTE x;
                 if (f == FF_ONE)
                 {
                     register size_t k = l_rowsize;
                     for (; k != 0; --k)
                     {
-                        *r = mtx_tadd[*r][*v++];
+                        x=*v++;
+                        if (x) *r = mtx_tadd[*r][x];
                         ++r;
                     }
                 }
@@ -251,9 +253,8 @@ __asm__("    popl %ebx\n"
                     register size_t k = l_rowsize;
                     for (; k != 0; --k)
                     {
-                        if (*v != 0)
-                            *r = mtx_tadd[multab[*v]][*r];
-                        ++v;
+                        x=*v++;
+                        if (x) *r = mtx_tadd[multab[x]][*r];
                         ++r;
                     }
                 }
diff --git a/src/zcleanrow.c b/src/zcleanrow.c
index 649e551..b4dcb30 100644
--- a/src/zcleanrow.c
+++ b/src/zcleanrow.c
@@ -35,18 +35,21 @@ MTX_DEFINE_FILE_INFO
 
 void FfCleanRow(PTR row, PTR matrix, int nor, const int *piv)
 {
-    int i;
+    register int i, pivi, first;
     PTR x;
 
     for (i=0, x=matrix; i < nor; ++i, FfStepPtr(&x))
     {
-        FEL f = FfExtract(row,piv[i]);
+        pivi = piv[i];
+        FEL f = FfExtract(row,pivi);
         if (f != FF_ZERO)
-	    FfAddMulRow(row,x,FfNeg(FfDiv(f,FfExtract(x,piv[i]))));
+        {
+            first = pivi/MPB;
+            FfAddMulRowPartial(row,x,FfNeg(FfDiv(f,FfExtract(x,pivi))),first,FfCurrentRowSizeIo-first);
+        }
     }
 }
 
-
 /**
  ** Clean Row and Record Operations.
  ** This function works like FfCleanRow(), but it stores a record of the operations performed
