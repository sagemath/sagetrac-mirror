Use Strassen-Winograd multiplication in some MeatAxe functions.

AUTHOR: Simon King 2015-09-18, simon.king@uni-jena.de 

diff --git a/src/chbasis.c b/src/chbasis.c
index 1ea9c9f..34cf886 100644
--- a/src/chbasis.c
+++ b/src/chbasis.c
@@ -9,6 +9,8 @@
 
 
 #include "meataxe.h"
+#include <stdlib.h>
+#include <string.h>
 
 MTX_DEFINE_FILE_INFO
 
@@ -36,9 +38,6 @@ MTX_DEFINE_FILE_INFO
 int MrChangeBasis(MatRep_t *rep, const Matrix_t *trans)
 
 {
-    Matrix_t *bi;
-    int i;
-
     /* Check arguments
        --------------- */
     if (!MrIsValid(rep))
@@ -46,11 +45,6 @@ int MrChangeBasis(MatRep_t *rep, const Matrix_t *trans)
 	MTX_ERROR1("rep: %E",MTX_ERR_BADARG);
 	return -1;
     }
-    if (!MatIsValid(trans))
-    {
-	MTX_ERROR1("trans: %E",MTX_ERR_BADARG);
-	return -1;
-    }
     if (rep->NGen <= 0)
 	return 0;
     if (trans->Field != rep->Gen[0]->Field || 
@@ -60,54 +54,50 @@ int MrChangeBasis(MatRep_t *rep, const Matrix_t *trans)
 	MTX_ERROR1("%E",MTX_ERR_INCOMPAT);
 	return -1;
     }
-
-
-    /* Basis transformation
-       -------------------- */
-    if ((bi = MatInverse(trans)) == NULL) 
-    {
-	MTX_ERROR("Basis transformation is singular");
-	return -1;
-    }
-    for (i = 0; i < rep->NGen; ++i)
-    {
-	Matrix_t *tmp = MatDup(trans);
-	MatMul(tmp,rep->Gen[i]);
-	MatMul(tmp,bi);
-        MatFree(rep->Gen[i]);
-	rep->Gen[i] = tmp;
-    }
-    MatFree(bi);
-    return 0;
+    return ChangeBasis(trans, rep->NGen, (const Matrix_t **)(rep->Gen), rep->Gen);
 }
 
 
-
-int ChangeBasisOLD(const Matrix_t *M, int ngen, const Matrix_t *gen[],
+/** Conjugate a list @em gen of @em ngen square matrices over the same
+ *  field and of the same dimensions by a mattrix @em trans
+ *  and write the result into @em newgen. If @em gen == @em newgen, then
+ *  the previous content of @em newgen will be overridden. **/
+int ChangeBasis(const Matrix_t *trans, int ngen, const Matrix_t *gen[],
 	Matrix_t *newgen[])
 
 {
-    Matrix_t *bi, *tmp;
+    Matrix_t *bi;
     int i;
 
     MTX_VERIFY(ngen >= 0);
-    if (!MatIsValid(M))
+    if (!MatIsValid(trans))
+    {
+	MTX_ERROR1("trans: %E",MTX_ERR_BADARG);
 	return -1;
-    if ((bi = MatInverse(M)) == NULL) 
+    }
+
+    if ((bi = MatInverse(trans)) == NULL)
     {
-	MTX_ERROR("Matrix is singular");
+	MTX_ERROR("Basis transformation is singular");
 	return -1;
     }
+
+    Matrix_t *tmp = MatAlloc(trans->Field, trans->Nor, trans->Noc);
+    size_t tmpsize = FfCurrentRowSize*trans->Nor;
     for (i = 0; i < ngen; ++i)
     {
-	tmp = MatDup(M);
-	MatMul(tmp,gen[i]);
-	MatMul(tmp,bi);
-	if ((const Matrix_t **)newgen == gen)
-	    MatFree(newgen[i]);
-	newgen[i] = tmp;
+        MTX_VERIFY(gen[i]->Nor==trans->Nor);
+        MTX_VERIFY(gen[i]->Noc==trans->Noc);
+        memset(tmp->Data, FF_ZERO, tmpsize);
+        MatMulStrassen(tmp, trans, gen[i]);
+        if ((const Matrix_t **)newgen == gen)
+            memset(newgen[i]->Data, FF_ZERO, tmpsize);
+        else
+            newgen[i] = MatAlloc(trans->Field, trans->Nor, trans->Noc);
+        MatMulStrassen(newgen[i], tmp, bi);
     }
     MatFree(bi);
+    MatFree(tmp);
     return 0;
 }
 
diff --git a/src/chop.c b/src/chop.c
index 65a2a98..0f3f38f 100644
--- a/src/chop.c
+++ b/src/chop.c
@@ -538,7 +538,7 @@ static int checkspl(const MatRep_t *rep, Matrix_t *nsp)
        ------------------------------------------------------------ */
     sb1 = SpinUp(nsp,rep,SF_FIRST|SF_CYCLIC|SF_STD,NULL,NULL);
     MTX_VERIFY(sb1 != NULL && sb1->Nor == sb1->Noc);
-    ChangeBasisOLD(sb1,LI.NGen,(const Matrix_t **)rep->Gen,g1);
+    ChangeBasis(sb1,LI.NGen,(const Matrix_t **)rep->Gen,g1);
     endo = MrAlloc(0,NULL,0);
 
     sb2 = NULL;	/* Mark as unused */
@@ -576,7 +576,7 @@ static int checkspl(const MatRep_t *rep, Matrix_t *nsp)
 	sb2 = SpinUp(v2,rep,SF_FIRST|SF_CYCLIC|SF_STD,NULL,NULL);
 	MTX_VERIFY(sb2 != NULL && sb2->Nor == sb2->Noc);
 	MatFree(v2);
-	ChangeBasisOLD(sb2,rep->NGen,(const Matrix_t **)rep->Gen,g2);
+	ChangeBasis(sb2,rep->NGen,(const Matrix_t **)rep->Gen,g2);
 
 	/* Compare the two representations. If they are different,
 	   we know that the splitting field degree must be smaller
@@ -762,7 +762,7 @@ static void newirred(node_t *n)
     LI.Cf[i].spl = n->spl = n->nsp->Nor;
     b = SpinUp(n->nsp,n->Rep,SF_FIRST|SF_CYCLIC|SF_STD,NULL,NULL);
     MTX_VERIFY(b != NULL && b->Nor == b->Noc);
-    ChangeBasisOLD(b,LI.NGen,(const Matrix_t **)n->Rep->Gen,n->Rep->Gen);
+    ChangeBasis(b,LI.NGen,(const Matrix_t **)n->Rep->Gen,n->Rep->Gen);
     MatFree(b);
 
     /* Write out the generators
diff --git a/src/homcomp.c b/src/homcomp.c
index a808089..351af2b 100644
--- a/src/homcomp.c
+++ b/src/homcomp.c
@@ -112,10 +112,10 @@ Matrix_t *HomogeneousPart(MatRep_t *m, MatRep_t *s, Matrix_t *npw,
 	{
 	    PTR matptr = MatGetPtr(A,j);
 	    int u;
-	    a = MatDup(V[j]);
-	    b = MatDup(s->Gen[i]);
-	    MatMul(a,m->Gen[i]);		/* the equations that describe  */
-	    MatMul(b,V[j]);			/* that a vector in the null-   */
+	    a = MatAlloc(V[j]->Field, V[j]->Nor, m->Gen[i]->Noc);
+	    b = MatAlloc(s->Gen[i]->Field, s->Gen[i]->Nor, V[j]->Noc);
+	    MatMulStrassen(a, V[j], m->Gen[i]);		/* the equations that describe  */
+	    MatMulStrassen(b,s->Gen[i], V[j]);			/* that a vector in the null-   */
 	    MatMulScalar(b,FfNeg(FF_ONE));	/* space is the first element   */
 	    MatAdd(a, b);			/* of a standard basis of a     */ 
 					/* module isomorphic to S       */
diff --git a/src/isisom.c b/src/isisom.c
index 790d2b0..e2b7f07 100644
--- a/src/isisom.c
+++ b/src/isisom.c
@@ -9,7 +9,7 @@
 
 
 #include "meataxe.h"
-
+#include <string.h>
 
 MTX_DEFINE_FILE_INFO
 
@@ -114,7 +114,7 @@ int IsIsomorphic(const MatRep_t *rep1, const CfInfo *info1,
 {
     int j;
     WgData_t *wg;
-    Matrix_t  *word, *m, *seed, *b, *bi;
+    Matrix_t  *word, *m, *seed, *b, *g1, *g2;
     int result;
 
     if (CheckArgs(rep1->NGen,rep1->Gen,info1,rep2->Gen,use_pw) != 0)
@@ -148,27 +148,35 @@ int IsIsomorphic(const MatRep_t *rep1, const CfInfo *info1,
 	MatFree(b);
 	return 0;
     }
-    bi = MatInverse(b);
 
     /* Compare generators
        ------------------ */
+    /**
+     * We test whether b*rep2_j*b^-1 == rep1_j
+     * by testing whether b*rep2_j == rep1_j*b
+     * */
+    g1 = MatAlloc(b->Field, b->Nor, b->Noc);
+    g2 = MatAlloc(b->Field, b->Nor, b->Noc);
+    size_t memsize = FfCurrentRowSize*b->Nor;
     for (j = 0, result = 0; result == 0 && j < rep2->NGen; ++j)
     {
-	Matrix_t *g = MatDup(b);
-	MatMul(g,rep2->Gen[j]);
-	MatMul(g,bi);
-	if (MatCompare(g,rep1->Gen[j]) != 0)
-	    result = 1;
-	MatFree(g);
+	MatMulStrassen(g2, b, rep2->Gen[j]);
+	MatMulStrassen(g1, rep1->Gen[j], b);
+	if (MatCompare(g1, g2) != 0)
+	    {   result = 1;
+            break;
+        }
+	memset(g1->Data, FF_ZERO, memsize);
+    memset(g2->Data, FF_ZERO, memsize);
     }
 
     /* Clean up 
        -------- */
     if (trans != NULL && result == 0)
-	*trans = b;
+        *trans = b;
     else
-	MatFree(b);
-    MatFree(bi);
-
+        MatFree(b);
+    MatFree(g1);
+    MatFree(g2);
     return (result == 0);
 }
diff --git a/src/meataxe.h b/src/meataxe.h
index e2f5a84..5123f1c 100644
--- a/src/meataxe.h
+++ b/src/meataxe.h
@@ -1096,11 +1096,7 @@ int LdFree(LdLattice_t *l);
 int LdAddIncidence(LdLattice_t *lat, int sub, int sup);
 int LdSetPositions(LdLattice_t *l);
 
-
-
-
-/* OLD STUFF */
-int ChangeBasisOLD(const Matrix_t *M, int ngen, const Matrix_t *gen[],
+int ChangeBasis(const Matrix_t *M, int ngen, const Matrix_t *gen[],
 	Matrix_t *newgen[]);
 
 
diff --git a/src/mktree.c b/src/mktree.c
index ede7881..3e99489 100644
--- a/src/mktree.c
+++ b/src/mktree.c
@@ -213,8 +213,8 @@ static int MakeTree()
 	{
 	    /* Calculate next element
 	       ---------------------- */
-	    Matrix_t *newelem = MatDup(Elms[src].Matrix);
-	    MatMul(newelem,Rep->Gen[g]);
+	    Matrix_t *newelem = MatAlloc(Elms[src].Matrix->Field, Elms[src].Matrix->Nor, Rep->Gen[g]->Noc);
+	    MatMulStrassen(newelem, Elms[src].Matrix, Rep->Gen[g]);
 
 	    /* If it is new, add to tree, else discard
 	       --------------------------------------- */
diff --git a/src/precond.c b/src/precond.c
index f144716..efc2f3d 100644
--- a/src/precond.c
+++ b/src/precond.c
@@ -391,8 +391,8 @@ static void MakePQ(int n, int mj, int nj)
 	for (k = 0; k < spl; ++k)
 	{
 	    FEL f;
-	    Matrix_t *x = MatDup(endo[i]);  
-	    MatMul(x,endo[k]);
+	    Matrix_t *x = MatAlloc(endo[i]->Field, endo[i]->Nor, endo[k]->Noc);  
+	    MatMulStrassen(x,endo[i],endo[k]);
 	    f = MatTrace(x);
 	    FfInsert(pptr,k,f);
 	    MatFree(x);
diff --git a/src/pseudochop.c b/src/pseudochop.c
index 68cadae..3f1fa97 100644
--- a/src/pseudochop.c
+++ b/src/pseudochop.c
@@ -105,8 +105,8 @@ int main(int argc, const char *argv[])
         {
 	    Matrix_t *newmat;
             oldnul = newnul;
-            newmat = MatDup(old);
-            MatMul(newmat,old);
+            newmat = MatAlloc(old->Field, old->Nor, old->Noc);
+            MatMulStrassen(newmat, old, old);
             MatFree(old);
             MatFree(nulsp);
             old = MatDup(newmat);
diff --git a/src/pwkond.c b/src/pwkond.c
index c14c20e..5eaa5de 100644
--- a/src/pwkond.c
+++ b/src/pwkond.c
@@ -309,8 +309,8 @@ static void gkond(const Lat_Info *li, int i, Matrix_t *b, Matrix_t *k,
     char fn[LAT_MAXBASENAME+10];
     Matrix_t *x1, *x2;
 
-    x1 = MatDup(k);
-    MatMul(x1,w);
+    x1 = MatAlloc(k->Field, k->Nor, w->Noc);
+    MatMulStrassen(x1, k, w);
     x2 = QProjection(b,x1);
     sprintf(fn,"%s%s.%s",li->BaseName,Lat_CfName(li,i),name);
     MatSave(x2,fn);
@@ -340,7 +340,7 @@ static void Standardize(int cf)
     MESSAGE(0,("  Transforming to standard basis\n"));
     sb = SpinUp(CfList[cf].PWNullSpace,CfList[cf].Gen,
 	SF_FIRST|SF_CYCLIC|SF_STD,&script,NULL);
-    ChangeBasisOLD(sb,CfList[cf].Gen->NGen,
+    ChangeBasis(sb,CfList[cf].Gen->NGen,
 	(const Matrix_t **)CfList[cf].Gen->Gen,std);
     MatFree(sb);
 
@@ -782,7 +782,7 @@ static int try2(long w, FEL f)
 	    	MESSAGE(3,("failed\n"));
 		return -1;  /* Nullity should be 0 */
 	    }
-	    nul = MatNullity__(MatMul(MatDup(word),word));
+	    nul = MatNullity__(MatMulStrassen(MatAlloc(word->Field, word->Nor, word->Noc), word, word));
 	    if (nul != CfList[i].Info->spl)
 	    {
 		MatFree(word);
@@ -915,7 +915,7 @@ static int try_p(long w)
 	       /* Check if the nullity is stable
 	          ------------------------------ */
 	       wp = MatInsert(word,mp->Factor[k]);
-	       wp2 = MatMul(MatDup(wp),wp);
+	       wp2 = MatMulStrassen(MatAlloc(wp->Field, wp->Nor, wp->Noc), wp, wp);
 	       MatFree(wp);
 	       nul = MatNullity__(wp2);
 	       if (nul != CfList[i].Info->spl) 
diff --git a/src/soc.c b/src/soc.c
index 789a02b..199a2e0 100644
--- a/src/soc.c
+++ b/src/soc.c
@@ -294,8 +294,8 @@ static int NextLayer()
 	Matrix_t *mat, *stgen;
 
 	mat = MatCutRows(basis,basis->Nor - Dimension,Dimension);
-	stgen = MatDup(bas);
-	MatMul(stgen, mat);
+	stgen = MatAlloc(bas->Field, bas->Nor, mat->Noc);
+	MatMulStrassen(stgen, bas, mat);
 	MatCopyRegion(basis,basis->Nor - Dimension,0,stgen,0,0,Dimension,-1);
 	MatFree(mat);
 	MatFree(stgen);
