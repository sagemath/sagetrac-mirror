From b8954de28676b09f4df1a0993d87d551b611fbc2 Mon Sep 17 00:00:00 2001
From: Vincent Delecroix <vincent.delecroix@labri.fr>
Date: Thu, 22 Jun 2017 17:42:02 +0200
Subject: [PATCH] fix dmp_ff_div by simplifying gmpy rationals divisions

---
 sympy/polys/domains/gmpyrationalfield.py |  6 +++---
 sympy/polys/tests/test_densearith.py     | 16 ++++++++++++++++
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/sympy/polys/domains/gmpyrationalfield.py b/sympy/polys/domains/gmpyrationalfield.py
index c5db7821f..8b3bac624 100644
--- a/sympy/polys/domains/gmpyrationalfield.py
+++ b/sympy/polys/domains/gmpyrationalfield.py
@@ -66,11 +66,11 @@ def from_RealField(K1, a, K0):
 
     def exquo(self, a, b):
         """Exact quotient of `a` and `b`, implies `__div__`.  """
-        return GMPYRational(gmpy_qdiv(a, b))
+        return GMPYRational(a) / GMPYRational(b)
 
     def quo(self, a, b):
         """Quotient of `a` and `b`, implies `__div__`. """
-        return GMPYRational(gmpy_qdiv(GMPYRational(a), GMPYRational(b)))
+        return GMPYRational(a) / GMPYRational(b)
 
     def rem(self, a, b):
         """Remainder of `a` and `b`, implies nothing.  """
@@ -78,7 +78,7 @@ def rem(self, a, b):
 
     def div(self, a, b):
         """Division of `a` and `b`, implies `__div__`. """
-        return GMPYRational(gmpy_qdiv(a, b)), self.zero
+        return GMPYRational(a) / GMPYRational(b), self.zero
 
     def numer(self, a):
         """Returns numerator of `a`. """
diff --git a/sympy/polys/tests/test_densearith.py b/sympy/polys/tests/test_densearith.py
index f938acaab..753ba20c9 100644
--- a/sympy/polys/tests/test_densearith.py
+++ b/sympy/polys/tests/test_densearith.py
@@ -862,6 +862,22 @@ def test_dup_ff_div():
 
     assert dup_ff_div(f, g, QQ) == (q, r)
 
+def test_dup_ff_div_gmpy2():
+    try:
+        from gmpy2 import mpq
+    except ImportError:
+        return
+
+    from sympy.polys.domains import GMPYRationalField
+    K = GMPYRationalField()
+
+    f = [mpq(1,3), mpq(3,2)]
+    g = [mpq(2,1)]
+    assert dmp_ff_div(f, g, 0, K) == ([mpq(1,6), mpq(3,4)], [])
+
+    f = [mpq(1,2), mpq(1,3), mpq(1,4), mpq(1,5)]
+    g = [mpq(-1,1), mpq(1,1), mpq(-1,1)]
+    assert dmp_ff_div(f, g, 0, K) == ([mpq(-1,2), mpq(-5,6)], [mpq(7,12), mpq(-19,30)])
 
 def test_dmp_ff_div():
     raises(ZeroDivisionError, lambda: dmp_ff_div([[1, 2], [3]], [[]], 1, QQ))
-- 
2.13.0

