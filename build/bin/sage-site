#!/usr/bin/env bash
# Handle options of the src/bin/sage script that pertain to SAGE_ROOT or sage-the-distribution.

usage() {
    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Sage-the-distribution options:"
    echo "  --optional          -- list all optional packages that can be installed"
    echo "  --experimental      -- list all experimental packages that can be installed"
    echo "  --info [packages]   -- print the SPKG.txt or SPKG.rst of the given packages,"
    echo "                         and some additional information."
    echo "  -i [packages]       -- install the given Sage packages"
    echo "  --upgrade [version] -- download, build and install the given version. Here,"
    echo "                         'version' is a git branch or tag name. Useful values"
    echo "                         are 'master' (the current development version, this"
    echo "                         is the default) or a version number like '5.13'."
}

usage_advanced() {
    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Building the Sage library:"
    echo
    echo "  -b                  -- build Sage library -- do this if you have"
    echo "                         modified any source code files in SAGE_ROOT/src/sage/"
    echo "  -ba                 -- same as -b, but rebuild *all* Cython"
    echo "                         code.  This could take a while, so you will be asked"
    echo "                         if you want to proceed."
    echo "  --ba-force          -- same as -ba, but don't query before rebuilding"
    echo "  -br                 -- build and run Sage"
    echo "  -bt [...]           -- build Sage and test; same options as -t"
    echo "  -btp <N> [...]      -- build Sage and test in parallel; same options as -tp"
    echo "  -btnew [...]        -- build Sage and test modified files, as in -t --new"
    echo "  --coverage <files>  -- give information about doctest coverage of files"
    echo "  --coverageall       -- give summary info about doctest coverage of"
    echo "                         all files in the Sage library"
    echo
    echo "Package handling:"
    echo
    echo "  --package [args]    -- call the package manager with given arguments."
    echo "                         Run without arguments for help."
    echo "  --experimental      -- list all experimental packages that can be installed"
    echo "  -i [opts] [pkgs]    -- install the given Sage packages.  Options:"
    echo "                           -c -- run the packages' test suites,"
    echo "                                 overriding the settings of"
    echo "                                 SAGE_CHECK and SAGE_CHECK_PACKAGES"
    echo "                           -d -- only download, do not install packages"
    echo "                           -f -- force build: install the packages even"
    echo "                                 if they are already installed"
    echo "                           -s -- do not delete the temporary build directories"
    echo "                                 after a successful build"
    echo "                           -y -- reply yes to prompts about experimental"
    echo "                                 and old-style packages; warning: there"
    echo "                                 is no guarantee that these packages will"
    echo "                                 build correctly; use at your own risk"
    echo "                           -n -- reply no to prompts about experimental"
    echo "                                 and old-style packages"
    echo "  -f [opts] [pkgs]    -- shortcut for -i -f: force build of the given Sage"
    echo "                         packages"
    echo "  -p [opts] [packages]-- install the given Sage packages, without dependency"
    echo "                         checking. Options are the same as for the -i command."
    echo "  --location          -- if needed, fix paths to make Sage relocatable"
    echo "  --optional          -- list all optional packages that can be installed"
    echo "  --standard          -- list all standard packages that can be installed"
    echo "  --installed         -- list all installed packages"
    echo
    echo "Upgrading:"
    echo
    echo "  --upgrade [version] -- download, build and install the given version. Here,"
    echo "                         'version' is a git branch or tag name. Useful values"
    echo "                         are 'master' (the current development version, this"
    echo "                         is the default) or a version number like '5.13'."

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Making Sage distributions:"
    echo
    echo "  --sdist             -- build a source distribution of Sage"
    echo
    echo "Building the documentation:"
    echo
    echo "  --docbuild [lang/]<document> <html|pdf|...> -- Build the Sage documentation"
    echo
    echo "Other developer tools:"
    echo
    echo "  --root              -- print the Sage root directory"
    echo "  --git-branch        -- print the current git branch"
    echo "  --buildsh [...]     -- run a shell with Sage environment variables"
    echo "                         as they are set while building Sage and its packages"
    echo
    echo "Running external programs, continued:"
    echo
    echo "  --cython [...]      -- run Cython with the given arguments"
    echo "  --ecl [...], --lisp [...]  -- run Sage's copy of ECL (Embeddable"
    echo "                                Common Lisp) with the given arguments"
    echo "  --gap [...]         -- run Sage's Gap with the given arguments"
    echo "  --gap3 [...]        -- run Sage's Gap3 with the given arguments"
    command -v gap3 &>/dev/null || \
    echo "                         (not installed currently, run sage -i gap3)"
    echo "  --git [...]         -- run Sage's Git with the given arguments"
    echo "  --gp [...]          -- run Sage's PARI/GP calculator with the"
    echo "                         given arguments"
    echo "  --kash [...]        -- run Sage's Kash with the given arguments"
    command -v kash &>/dev/null || \
    echo "                         (not installed currently, run sage -i kash)"
    echo "  --M2 [...]          -- run Sage's Macaulay2 with the given arguments"
    command -v M2 &>/dev/null || \
    echo "                         (not installed currently, run sage -i macaulay2)"
    echo "  --maxima [...]      -- run Sage's Maxima with the given arguments"
    echo "  --mwrank [...]      -- run Sage's mwrank with the given arguments"
    echo "  --polymake [...]    -- run Sage's Polymake with given arguments"
    command -v polymake &>/dev/null || \
    echo "                         (not installed currently, run sage -i polymake)"
    echo "  -R [...]            -- run Sage's R with the given arguments"
    echo "  --scons [...]       -- run Sage's scons"
    echo "  --singular [...]    -- run Sage's singular with the given arguments"
    echo "  --sqlite3 [...]     -- run Sage's sqlite3 with given arguments"
    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
}

if [ "$1" = '-h' -o "$1" = '-?' -o "$1" = '-help' -o "$1" = '--help' ]; then
    usage
    exit 0
fi
if [ "$1" = "-advanced" -o "$1" = "--advanced" ]; then
    usage_advanced
    exit 0
fi

if [ "$1" = '-package' -o "$1" = "--package" ]; then
    shift
    exec sage-package $@
fi

if [ "$1" = '-optional' -o "$1" = "--optional" ]; then
    shift
    exec sage-list-packages optional $@
fi

if [ "$1" = '-experimental' -o "$1" = "--experimental" ]; then
    shift
    exec sage-list-packages experimental $@
fi

if [ "$1" = '-standard' -o "$1" = "--standard" ]; then
    shift
    exec sage-list-packages standard $@
fi

if [ "$1" = '-installed' -o "$1" = "--installed" ]; then
    shift
    exec sage-list-packages all --installed-only $@
fi

if [ "$1" = '-p' ]; then
    echo "Error: Installing old-style SPKGs is no longer supported."
    exit 1
fi

if [ "$1" = '-info' -o "$1" = '--info' ]; then
    shift
    for PKG in "$@"
    do
        sage-spkg --info "$PKG" || exit $?
    done
    exit 0
fi

if [ "$1" = '-fix-pkg-checksums' -o "$1" = '--fix-pkg-checksums' ]; then
    shift
    exec sage-fix-pkg-checksums "$@"
fi

echo "Error: Unknown option: $1"
exit 1
