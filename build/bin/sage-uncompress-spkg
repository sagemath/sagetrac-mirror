#!/usr/bin/env python

# USAGE:
#
#   sage-uncompress-spkg PKG [FILE]
#
# With a single argument, unpack the file PKG to the current directory.
#
# If FILE is specified, extract FILE from PKG and send it to
# stdout. (This option is present only for backwards compatibility:
# printing the SPKG.txt file from an old-style spkg.)

import sys
import tarfile
import zipfile


class IgnoreDirModeTarFile(tarfile.TarFile):
    """
    Sage as tarfile.TarFile, but ignores directory permissions stored in the
    tar file.

    This preserves file permissions stored in tarballs, but creates all
    directories with mode 700.
    """

    def chmod(self, tarinfo, target):
        # The method TarFile uses to apply permissions stored in tar files to
        # the extracted paths. Changing it to a no-op for directories preserves
        # the behavior that directories are created with 700 by default.
        #
        # See http://trac.sagemath.org/ticket/20218#comment:16
        if not tarinfo.isdir():
            return super(IgnoreDirModeTarFile, self).chmod(tarinfo, target)


if __name__ == '__main__':
    filename = sys.argv[1]
    if tarfile.is_tarfile(filename):
        # tar file, possibly compressed:
        archive = IgnoreDirModeTarFile.open(filename, 'r:*')
        if len(sys.argv) == 2:
            archive.extractall()
        else:
            member = sys.argv[2]
            if member in archive.getnames():
                SPKG_TXT = archive.extractfile(member)
                sys.stdout.write(SPKG_TXT.read())
                exit(1)
        archive.close()
        exit(0)
    if zipfile.is_zipfile(filename):
        # zip file:
        archive = zipfile.ZipFile(filename, 'r')
        if len(sys.argv) == 2:
            archive.extractall()
        else:
            member = sys.argv[2]
            if member in archive.namelist():
                sys.stdout.write(archive.read(member))
            else:
                exit(1)
        archive.close()
        exit(0)
    else:
        print ('Error: Unknown file type: {}'.format(filename))
        exit(1)
