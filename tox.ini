# Run a specific environemnt:
#   tox -e docker-fedora-31
# Run all in parallel:
#   tox -p auto
# with local squid:
#   EXTRA_DOCKER_BUILD_ARGS="--build-arg http_proxy=http://host.docker.internal:3128 --build-arg https_proxy=http://host.docker.internal:3128" tox -p auto
[tox]
### Test that the system packages listed in debian.txt/fedora.txt files of standard spkg exist
### and satisfy the requirements tested by spkg-configure.m4, then compile a few packages.
###
envlist =
    check_configure,
    {
    {
    ### "docker" toxenvs copy sources from the source tree subject to the exclusions in
    ### the file ".dockerignore".  This should work out of non-clean source trees, and all
    ### "docker" toxenvs can be run in parallel.
    docker-{ubuntu-{trusty,xenial,bionic,latest,eoan,rolling,focal,devel},
            debian-{jessie,stretch,buster,bullseye,sid},
            fedora-{26,27,28,29,30,31,32},
            centos-{7,8},
            arch-latest,
            conda-forge,conda-anaconda3
            }
           -{# https://github.com/docker-library/official-images#architectures-other-than-amd64
             # architectures officially supported by Docker, Inc. for running Docker
             amd64,arm32v6,arm32v7,arm64v8,
             # windows-amd64  #  https://hub.docker.com/u/winamd64/
             # Other architectures built by official images:
             # (but not officially supported by Docker, Inc.)
             arm32v5,ppc64le,s390x,i386},
    ### "local" targets should be run from a source tree that is freshly checked out
    ### (for example, by 'git worktree add ...') or has been cleaned by 'make bdist-clean' --
    ### because they build within the source tree (because we have no VPATH support).
    ### Only one "local" target can be run at a time.
    ### However, "local" targets install in a separate prefix (SAGE_LOCAL=.tox/TOXENV/local)
    ### rather than "local/" and also place log files into .tox/TOXENV/log, where TOXENV
    ### is the name of the environment.
    #
    # The "local-homebrew" toxenvs create an "isolated" homebrew installation (not in /usr/local).
    # (However, many configure scripts still look for stuff in /usr/local.)
    #
    # By default, it runs "make build" (after bootstrapping and configuring)
    # with SAGE_CHECK=yes and SAGE_CHECK_PACKAGES set to a good default,
    # and V=0 so that screen output is limited.
    #
    #   $ tox -e local-homebrew-macos-standard
    #
    # The value of MAKE is picked up from the environment, so you can do:
    #
    #   $ MAKE="make -j8" tox -e local-homebrew-macos-standard
    #
    # Build targets can be passed as positional arguments (separated from tox options by "--"):
    #
    #   $ tox -e local-homebrew-macos-standard -- ppl
    #   $ tox -e local-homebrew-macos-standard -- build ptest
    #
    # Also make variables can be passed as positional arguments; for example, to run the
    # test suite:
    #
    #   $ tox -e local-homebrew-macos-standard -- SAGE_CHECK=no build ptest SAGE_NUM_THREADS=4
    #
    # Or to rebuild a package with verbose output:
    #
    #   $ tox -e local-homebrew-macos-standard -- ppl-clean ppl V=1
    #
    local-homebrew-macos
   }
   -{###
     ### Package factors:
     ###
     minimal,      # Install a minimal set of system packages that supports bootstrapping and compiling Sage.
     standard,     # Install all known system packages equivalent to standard packages that have spkg-configure.m4
     maximal       # Install all known system packages equivalent to standard/optional packages that have spkg-configure.m4
    },
   ###
   ### The "local-direct" toxenv passes the whole environment on to the sage build.
   ### Whatever is in PATH etc. will be used.
   ###
   local-direct
   }
   -{###
     ### Configuration factors:
     ###
     python2       # configure Sage to use Python 2 instead of the default (Python 3)
    }

skipsdist = true

[testenv]
passenv =
                  EXTRA_CONFIGURE_ARGS
    docker:       EXTRA_DOCKER_BUILD_ARGS
    local:        MAKE
    local-direct: *
setenv =
    # Set this to 'force' instead of 'yes' to make it an error if an spkg with spkg-configure and system package
    # is not recognized.
    WITH_SYSTEM_SPKG=yes
    # Set this to 'yes' instead of 'no' to ignore missing system packages - by installing them one by one
    # and ignoring errors.  We use that to take care of old versions of distributions.
    IGNORE_MISSING_SYSTEM_PACKAGES=no
    # What system packages should be installed. Default: All standard packages with spkg-configure.
    # These are bash extglob patterns.
    TYPE_PATTERN=standard
    minimal: TYPE_PATTERN=minimal
    maximal: TYPE_PATTERN=@(standard|optional)
    #
    # default tag is "latest"
    #
    docker:           BASE_TAG=latest
    #
    # https://hub.docker.com/_/ubuntu?tab=description
    # as of 2020-01, latest=bionic=18.04, eoan=rolling=19.10, focal=devel=20.04
    #
    ubuntu:         SYSTEM=debian
    ubuntu:         BASE_IMAGE=ubuntu
    ubuntu-trusty:    BASE_TAG=trusty
    ubuntu-trusty:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-xenial:    BASE_TAG=xenial
    ubuntu-xenial:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-bionic:    BASE_TAG=bionic
    ubuntu-latest:    BASE_TAG=latest
    ubuntu-eoan:      BASE_TAG=eoan
    ubuntu-rolling:   BASE_TAG=rolling
    ubuntu-focal:     BASE_TAG=focal
    # ubuntu-focal does not have libpython3.7-dev any more
    ubuntu-focal:                              IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-devel:     BASE_TAG=devel
    #
    # https://hub.docker.com/_/debian
    #
    debian:         SYSTEM=debian
    debian:         BASE_IMAGE=debian
    debian-jessie:    BASE_TAG=jessie
    debian-jessie:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    debian-stretch:   BASE_TAG=stretch
    debian-buster:    BASE_TAG=buster
    debian-bullseye:  BASE_TAG=bullseye
    debian-sid:       BASE_TAG=sid
    #
    # https://hub.docker.com/u/linuxmintd
    #
    linuxmint:      SYSTEM=debian
    linuxmint-19.3: BASE_IMAGE=linuxmintd/mint19.3-amd64
    #
    # https://hub.docker.com/_/fedora
    # as of 2020, latest=31, rawhide=32
    fedora:         SYSTEM=fedora
    fedora:         BASE_IMAGE=fedora
    fedora-26:        BASE_TAG=26
    fedora-26:                                 IGNORE_MISSING_SYSTEM_PACKAGES=yes
    fedora-27:        BASE_TAG=27
    fedora-28:        BASE_TAG=28
    fedora-29:        BASE_TAG=29
    fedora-30:        BASE_TAG=30
    fedora-31:        BASE_TAG=31
    fedora-32:        BASE_TAG=32
    #
    # https://hub.docker.com/_/centos
    #
    centos:         SYSTEM=fedora
    centos:         BASE_IMAGE=centos
    centos:                                    IGNORE_MISSING_SYSTEM_PACKAGES=yes
    #centos-6:        BASE_TAG=centos6    # only has autoconf 2.63 -- too old for bootstrap
    centos-7:         BASE_TAG=centos7
    centos-8:         BASE_TAG=centos8
    #
    # https://hub.docker.com/_/archlinux/
    #
    archlinux:      SYSTEM=arch
    archlinux:      BASE_IMAGE=archlinux
    #
    # https://hub.docker.com/r/vbatts/slackware
    #
    slackware:      SYSTEM=slackware
    slackware:      BASE_IMAGE=vbatts/slackware
    slackware-14.2:  BASE_TAG=14.2
    #
    # https://hub.docker.com/r/continuumio
    #
    conda:            SYSTEM=conda
    conda-forge:        BASE_IMAGE=continuumio/miniconda3
    conda-forge:                                                CONDARC=condarc.yml
    conda-anaconda3:    BASE_IMAGE=continuumio/anaconda3
    conda-anaconda3:                                            CONDARC=/dev/null
    conda-anaconda3:                                                                  IGNORE_MISSING_SYSTEM_PACKAGES=yes
    #
    # Other architectures:
    #
    # Many docker images for another architecture are named the same, in the arch prefix.
    # All work for Docker on Mac; but only i386 works for Linux Docker.
    #
    arm32v5:          ARCH_IMAGE_PREFIX=arm32v5/
    arm32v6:          ARCH_IMAGE_PREFIX=arm32v6/
    arm32v7:          ARCH_IMAGE_PREFIX=arm32v7/
    arm64v8:          ARCH_IMAGE_PREFIX=arm64v8/
    i386:             ARCH_IMAGE_PREFIX=i386/
    ppc64le:          ARCH_IMAGE_PREFIX=ppc64le/
    s390x:            ARCH_IMAGE_PREFIX=s390x/
    #
    # For Linux Docker, we need to work with known multiarch images.
    # https://www.ecliptik.com/Cross-Building-and-Running-Multi-Arch-Docker-Images/
    # (or we would need to change our tests from "docker build" to "docker run")
    #
    # https://hub.docker.com/r/multiarch/ubuntu-core:
    # multiarch/ubuntu-core:arm64-bionic, multiarch/ubuntu-core:armhf-bionic
    ubuntu-arm64:     BASE_IMAGE=ubuntu-core
    ubuntu-arm64:     ARCH_IMAGE_PREFIX=multiarch/
    ubuntu-arm64:       ARCH_TAG_PREFIX=arm64-
    ubuntu-armhf:     BASE_IMAGE=ubuntu-core
    ubuntu-armhf:     ARCH_IMAGE_PREFIX=multiarch/
    ubuntu-armhf:       ARCH_TAG_PREFIX=armhf-
    #
    # https://hub.docker.com/u/raspbian
    #
    raspbian:         SYSTEM=debian
    raspbian:         ARCH_IMAGE_PREFIX=
    raspbian-jessie:  BASE_IMAGE=raspbian/jessie
    raspbian-stretch: BASE_IMAGE=raspbian/stretch
    #
    # Resulting full image:tag name
    #
    docker:           FULL_BASE_IMAGE_AND_TAG={env:ARCH_IMAGE_PREFIX:}{env:BASE_IMAGE}:{env:ARCH_TAG_PREFIX:}{env:BASE_TAG}
    ###
    ### "local" envs
    ###
    homebrew:         SYSTEM=homebrew
    local:            HOME={envdir}
    local:            SETENV=:
    local-!direct:    PATH=/usr/bin:/bin:/usr/sbin:/sbin
    # brew caches downloaded files in ${HOME}/Library/Caches. We share it between different toxenvs.
    local-homebrew:   HOMEBREW={envdir}/homebrew
    local-homebrew:   PATH={env:HOMEBREW}/bin:/usr/bin:/bin:/usr/sbin:/sbin
    local-homebrew:   SETENV=. .homebrew-build-env

    #
    # Configuration factors
    #
    python2:          CONFIG_CONFIGURE_ARGS_1=--with-python=2

    #
    # Resulting full configuration args, including EXTRA_CONFIGURE_ARGS from the user environment
    #
                      CONFIGURE_ARGS={env:CONFIG_CONFIGURE_ARGS_1:} {env:CONFIG_CONFIGURE_ARGS_2:} {env:EXTRA_CONFIGURE_ARGS:}

# environment will be skipped if regular expression does not match against the sys.platform string
platform =
    local-macos:   darwin

whitelist_externals =
                   bash
    docker:        docker
    homebrew:      brew

commands_pre =
    # https://docs.brew.sh/Installation
    homebrew:      bash -c 'if [ ! -d {env:HOME}/Library/Caches ]; then mkdir -p {toxworkdir}/Caches && mkdir -p {env:HOME}/Library && ln -sf {toxworkdir}/Caches {env:HOME}/Library/; fi'
    homebrew:      bash -c 'if [ ! -x {env:HOMEBREW}/bin/brew ]; then mkdir -p {envdir}/homebrew && cd {envdir}/homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 ; fi'
    # homebrew-mininmal: Minimal for bootstrapping and build.
    # gettext and pkg-config are needed so that their aclocal macros are available.
    homebrew:      bash -c 'PACKAGES=`sed "s/#.*//;" build/pkgs/homebrew*.txt`; {env:HOMEBREW}/bin/brew install $PACKAGES; {env:HOMEBREW}/bin/brew upgrade $PACKAGES'
    homebrew-standard:   bash -c 'PACKAGES=`sed "s/#.*//;" build/pkgs/*/distros/homebrew.txt`; {env:HOMEBREW}/bin/brew install $PACKAGES; {env:HOMEBREW}/bin/brew upgrade $PACKAGES'
    # Install symbolic links "config.log" and "logs" in SAGE_ROOT so that log files are written into the tox log directory.
    local:         bash -c 'touch {envlogdir}/config.log; ln -sf {envlogdir}/config.log .; if [ ! -d logs -o -L logs ]; then rm -f logs; ln -sf {envlogdir} logs; fi'
    # Install a symbolic link "prefix" in SAGE_ROOT for convenient inspection; it is not used in the build.
    local:         bash -c 'if [ ! -d prefix -o -L prefix ]; then rm -f prefix; ln -sf {envdir}/local prefix; fi'

commands =
    docker:        bash -c 'build/bin/write-dockerfile.sh {env:SYSTEM} "{env:TYPE_PATTERN:}" {env:WITH_SYSTEM_SPKG} {env:IGNORE_MISSING_SYSTEM_PACKAGES} > {envdir}/Dockerfile'
    # From https://hub.docker.com/r/multiarch/ubuntu-core/
    # configure binfmt-support on the Docker host (works locally or remotely, i.e: using boot2docker)
    docker-{arm64,armhf}:  docker run --rm --privileged multiarch/qemu-user-static:register --reset
    docker:        docker build . -f {envdir}/Dockerfile                          \
    docker:        --build-arg EXTRA_CONFIGURE_ARGS="{env:CONFIGURE_ARGS}" \
    docker:        --build-arg BASE_IMAGE={env:FULL_BASE_IMAGE_AND_TAG}           \
    docker-conda:  --build-arg USE_CONDARC="{env:CONDARC}"                        \
    docker:        {env:EXTRA_DOCKER_BUILD_ARGS:}
    # pathpy checksuite needs tox. #28728: gap fails its test suite.
    # linbox/cysignals testsuites fail.  ppl takes very long.
    local:         bash -c 'export PATH={env:PATH} && {env:SETENV} && ./bootstrap && ./configure --prefix={envdir}/local {env:CONFIGURE_ARGS} && make -k V=0 base-toolchain && make -k V=0 SAGE_SPKG="sage-spkg -y -o" SAGE_CHECK=warn SAGE_CHECK_PACKAGES="!cython,!r,!python3,!python2,!nose,!pathpy,!gap,!cysignals,!linbox,!git,!ppl" {posargs:build}'

[testenv:check_configure]
## Test that configure behaves properly
whitelist_externals =
    bash
commands =
    ./bootstrap
    bash -c 'test -z "$(./configure --quiet 2>&1)" || (echo >&2 Error: "configure --quiet" is not quiet; exit 1)'
