# Run a specific environemnt:
#   tox -e docker-fedora-31
# Run all in parallel:
#   tox -p auto
# with local squid:
#   EXTRA_DOCKER_BUILD_ARGS="--build-arg http_proxy=http://host.docker.internal:3128 --build-arg https_proxy=http://host.docker.internal:3128" tox -p auto
[tox]
### Test that the system packages listed in debian.txt/fedora.txt files of standard spkg exist
### and satisfy the requirements tested by spkg-configure.m4, then compile a few packages.
envlist =
    check_configure,
    docker-{ubuntu-{trusty,xenial,bionic,latest,eoan,rolling,focal,devel},
            debian-{jessie,stretch,buster,bullseye,sid},
            fedora-{26,27,28,29,30,31,32},
            centos-{7,8},
            arch-latest,
            conda-forge,conda-anaconda3
            }
           -{# https://github.com/docker-library/official-images#architectures-other-than-amd64
             # architectures officially supported by Docker, Inc. for running Docker
             amd64,arm32v6,arm32v7,arm64v8,
             # windows-amd64  #  https://hub.docker.com/u/winamd64/
             # Other architectures built by official images:
             # (but not officially supported by Docker, Inc.)
             arm32v5,ppc64le,s390x,i386}
    ### "local" targets should be run from a source tree that is freshly checked out
    ### (for example, by 'git worktree add ...') or has been cleaned by 'make bdist-clean' --
    ### because they build within the source tree (because we have no VPATH support).
    ### Only one "local" target can be run at a time.
    ### However, "local" targets install in a separate prefix (SAGE_LOCAL=.tox/TOXENV/local)
    ### rather than "local/" and also place log files into .tox/TOXENV/log, where TOXENV
    ### is the name of the environment.
   -{minimal,standard,maximal},
   ### The "local-direct" toxenv passes the whole environment on to the sage build.
   ### Whatever is in PATH etc. will be used.
   local-direct

skipsdist = true

[testenv]
passenv =
    EXTRA_DOCKER_BUILD_ARGS
setenv =
    # Set this to 'force' instead of 'yes' to make it an error if an spkg with spkg-configure and system package
    # is not recognized.
    WITH_SYSTEM_SPKG=yes
    # Set this to 'yes' instead of 'no' to ignore missing system packages - by installing them one by one
    # and ignoring errors.  We use that to take care of old versions of distributions.
    IGNORE_MISSING_SYSTEM_PACKAGES=no
    # What system packages should be installed. Default: All standard packages with spkg-configure.
    # These are bash extglob patterns.
    TYPE_PATTERN=standard
    minimal: TYPE_PATTERN=minimal
    maximal: TYPE_PATTERN=@(standard|optional)
    #
    # default tag is "latest"
    #
    docker:           BASE_TAG=latest
    #
    # https://hub.docker.com/_/ubuntu?tab=description
    # as of 2020-01, latest=bionic=18.04, eoan=rolling=19.10, focal=devel=20.04
    #
    ubuntu:         SYSTEM=debian
    ubuntu:         BASE_IMAGE=ubuntu
    ubuntu-trusty:    BASE_TAG=trusty
    ubuntu-trusty:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-xenial:    BASE_TAG=xenial
    ubuntu-xenial:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-bionic:    BASE_TAG=bionic
    ubuntu-latest:    BASE_TAG=latest
    ubuntu-eoan:      BASE_TAG=eoan
    ubuntu-rolling:   BASE_TAG=rolling
    ubuntu-focal:     BASE_TAG=focal
    ubuntu-devel:     BASE_TAG=devel
    #
    # https://hub.docker.com/_/debian
    #
    debian:         SYSTEM=debian
    debian:         BASE_IMAGE=debian
    debian-jessie:    BASE_TAG=jessie
    debian-jessie:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    debian-stretch:   BASE_TAG=stretch
    debian-buster:    BASE_TAG=buster
    debian-bullseye:  BASE_TAG=bullseye
    debian-sid:       BASE_TAG=sid
    #
    # https://hub.docker.com/_/fedora
    # as of 2020, latest=31, rawhide=32
    fedora:         SYSTEM=fedora
    fedora:         BASE_IMAGE=fedora
    fedora-26:        BASE_TAG=26
    fedora-26:                                 IGNORE_MISSING_SYSTEM_PACKAGES=yes
    fedora-27:        BASE_TAG=27
    fedora-28:        BASE_TAG=28
    fedora-29:        BASE_TAG=29
    fedora-30:        BASE_TAG=30
    fedora-31:        BASE_TAG=31
    fedora-32:        BASE_TAG=32
    #
    # https://hub.docker.com/_/centos
    #
    centos:         SYSTEM=fedora
    centos:         BASE_IMAGE=centos
    centos:                                    IGNORE_MISSING_SYSTEM_PACKAGES=yes
    #centos-6:        BASE_TAG=centos6    # only has autoconf 2.63 -- too old for bootstrap
    centos-7:         BASE_TAG=centos7
    centos-8:         BASE_TAG=centos8
    #
    # https://hub.docker.com/_/archlinux/
    #
    archlinux:      SYSTEM=arch
    archlinux:      BASE_IMAGE=archlinux
    #
    # https://hub.docker.com/r/continuumio
    #
    conda:            SYSTEM=conda
    conda-forge:        BASE_IMAGE=continuumio/miniconda3
    conda-forge:                                                CONDARC=condarc.yml
    conda-anaconda3:    BASE_IMAGE=continuumio/anaconda3
    conda-anaconda3:                                            CONDARC=/dev/null
    conda-anaconda3:                                                                  IGNORE_MISSING_SYSTEM_PACKAGES=yes
    #
    # Other architectures:
    #
    # Many docker images for another architecture are named the same, in the arch prefix.
    # All work for Docker on Mac; but only i386 works for Linux Docker.
    #
    arm32v5:          ARCH_IMAGE_PREFIX=arm32v5/
    arm32v6:          ARCH_IMAGE_PREFIX=arm32v6/
    arm32v7:          ARCH_IMAGE_PREFIX=arm32v7/
    arm64v8:          ARCH_IMAGE_PREFIX=arm64v8/
    i386:             ARCH_IMAGE_PREFIX=i386/
    ppc64le:          ARCH_IMAGE_PREFIX=ppc64le/
    s390x:            ARCH_IMAGE_PREFIX=s390x/
    #
    # For Linux Docker, we need to work with known multiarch images.
    # https://www.ecliptik.com/Cross-Building-and-Running-Multi-Arch-Docker-Images/
    # (or we would need to change our tests from "docker build" to "docker run")
    #
    # https://hub.docker.com/r/multiarch/ubuntu-core:
    # multiarch/ubuntu-core:arm64-bionic, multiarch/ubuntu-core:armhf-bionic
    ubuntu-arm64:     BASE_IMAGE=ubuntu-core
    ubuntu-arm64:     ARCH_IMAGE_PREFIX=multiarch/
    ubuntu-arm64:       ARCH_TAG_PREFIX=arm64-
    ubuntu-armhf:     BASE_IMAGE=ubuntu-core
    ubuntu-armhf:     ARCH_IMAGE_PREFIX=multiarch/
    ubuntu-armhf:       ARCH_TAG_PREFIX=armhf-
    #
    # https://hub.docker.com/u/raspbian
    #
    raspbian:         SYSTEM=debian
    raspbian:         ARCH_IMAGE_PREFIX=
    raspbian-jessie:  BASE_IMAGE=raspbian/jessie
    raspbian-stretch: BASE_IMAGE=raspbian/stretch
    #
    # Resulting full image:tag name
    #
    docker:           FULL_BASE_IMAGE_AND_TAG={env:ARCH_IMAGE_PREFIX:}{env:BASE_IMAGE}:{env:ARCH_TAG_PREFIX:}{env:BASE_TAG}
    ###
    ### "local" envs
    ###
    local:            HOME={envdir}
    local-!direct:    PATH=/usr/bin:/bin:/usr/sbin:/sbin

# environment will be skipped if regular expression does not match against the sys.platform string
platform =
    local-macos:   darwin

whitelist_externals =
    bash
    docker
commands =
    docker:        bash -c 'build/bin/write-dockerfile.sh {env:SYSTEM} "{env:TYPE_PATTERN:}" {env:WITH_SYSTEM_SPKG} {env:IGNORE_MISSING_SYSTEM_PACKAGES} > {envdir}/Dockerfile'
    # From https://hub.docker.com/r/multiarch/ubuntu-core/
    # configure binfmt-support on the Docker host (works locally or remotely, i.e: using boot2docker)
    docker-{arm64,armhf}:  docker run --rm --privileged multiarch/qemu-user-static:register --reset
    docker:        docker build . -f {envdir}/Dockerfile                          \
    docker:        --build-arg EXTRA_CONFIGURE_ARGS="{env:EXTRA_CONFIGURE_ARGS:}" \
    docker:        --build-arg BASE_IMAGE={env:FULL_BASE_IMAGE_AND_TAG}           \
    docker-conda:  --build-arg USE_CONDARC="{env:CONDARC}"                        \
    docker:        {env:EXTRA_DOCKER_BUILD_ARGS:}

[testenv:check_configure]
## Test that configure behaves properly
whitelist_externals =
    bash
commands =
    ./bootstrap
    bash -c 'test -z "$(./configure --quiet 2>&1)" || (echo >&2 Error: "configure --quiet" is not quiet; exit 1)'
