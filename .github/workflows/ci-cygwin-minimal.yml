name: CI cygwin-minimal

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'
  workflow_dispatch:
    # Allow to run manually

env:
  MAKE: make -j8
  SAGE_NUM_THREADS: 3
  SAGE_CHECK: warn
  SAGE_CHECK_PACKAGES: "!cython,!r,!python3,!nose,!pathpy,!gap,!cysignals,!linbox,!git,!ppl"
  CYGWIN: winsymlinks:native
  CONFIGURE_ARGS: --enable-experimental-packages --enable-download-from-upstream-url
  SAGE_FAT_BINARY: yes

jobs:

############################################## stage-i ##########################################

  cygwin-stage-i-a:
    env:
      STAGE: i-a
      # builds openblas
      TARGETS: iml gsl
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --remove-files local'
      if: always()
    - uses: actions/upload-artifact@v2
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-i-b:
    env:
      STAGE: i-b
      TARGETS: cython setuptools_scm kiwisolver dateutil cycler pyparsing nose certifi pkgconfig pplpy
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --remove-files local'
      if: always()
    - uses: actions/upload-artifact@v2
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

############################################## stage-ii ##########################################

  cygwin-stage-ii-a:
    env:
      STAGE: ii-a
      PREVIOUS_STAGES: i-*
      TARGETS: cvxopt rpy2 networkx
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-i-a, cygwin-stage-i-b]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-ii-b:
    env:
      STAGE: ii-b
      PREVIOUS_STAGES: i-*
      TARGETS: singular maxima gap pari gfan palp flintqs ratpoints arb ecm givaro
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-i-a, cygwin-stage-i-b]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-ii-c:
    env:
      STAGE: ii-c
      PREVIOUS_STAGES: i-*
      TARGETS:  cypari eclib fplll linbox giac
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-i-a, cygwin-stage-i-b]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-ii-d:
    env:
      STAGE: ii-d
      PREVIOUS_STAGES: i-*
      TARGETS: ipython ipywidgets notebook thebe
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-i-a, cygwin-stage-i-b]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-ii-e:
    env:
      STAGE: ii-e
      PREVIOUS_STAGES: i-*
      TARGETS: threejs tachyon pillow jmol m4rie sympy lrcalc lcalc symmetrica cliquer libbraiding planarity rw elliptic_curves combinatorial_designs zn_poly sympow
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-i-a, cygwin-stage-i-b]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

############################################## stage-iii ##########################################

  cygwin-stage-iii:
    env:
      STAGE: iii
      PREVIOUS_STAGES: ii-*
      TARGETS: build
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-ii-a, cygwin-stage-ii-b, cygwin-stage-ii-c, cygwin-stage-ii-d, cygwin-stage-ii-e]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

############################################## stage-iv ##########################################

  cygwin-stage-iv-a:
    env:
      STAGE: iv-a
      PREVIOUS_STAGES: iii
      TARGETS: ptest
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-iii]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-iv-b:
    env:
      STAGE: iv-b
      PREVIOUS_STAGES: iii
      TARGETS: 4ti2 pynormaliz topcom lrslib latte_int cryptominisat
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-iii]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-iv-c:
    env:
      STAGE: iv-c
      PREVIOUS_STAGES: iii
      TARGETS: sage_numerical_backends_coin
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-iii]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh /tmp/sage-local-*.tar && tar --create --listed-incremental=/tmp/sage-local.snar --file /dev/null local'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  cygwin-stage-iv-d:
    env:
      STAGE: iv-d
      PREVIOUS_STAGES: iii
      TARGETS: qepcad  barvinok isl qhull primecount plantri kenzo libsemigroups mcqd meataxe mpfrcx openssl p_group_cohomology rst2ipynb sirocco tdlib tides
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    needs: [cygwin-stage-iii]

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - uses: actions/checkout@v1
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/_prereq/distros/cygwin.txt ./build/pkgs/_prereq/distros/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
        path: C:\\tools\\cygwin\\tmp
    - name: Extract sage-local artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && .github/workflows/extract-sage-local.sh'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --listed-incremental=/tmp/sage-local.snar local'
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()
